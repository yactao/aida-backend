{"version":3,"file":"index.js","sources":["../src/constants.ts","../src/generated/models/mappers.ts","../src/generated/models/parameters.ts","../src/error.ts","../src/transforms/polygon.ts","../src/azureKeyCredentialPolicy.ts","../src/generated/generatedClient.ts","../src/options/FormRecognizerClientOptions.ts","../src/util.ts","../src/models/fields.ts","../src/lro/analysis.ts","../src/lro/util/delayMs.ts","../src/lro/util/poller.ts","../src/documentAnalysisClient.ts","../src/lro/administration.ts","../src/documentModelAdministrationClient.ts","../src/options/BuildModelOptions.ts","../src/documentModel.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * The default AAD permissions scope for Cognitive Services.\n * @internal\n */\nexport const DEFAULT_COGNITIVE_SCOPE = \"https://cognitiveservices.azure.com/.default\";\n\n/**\n * @internal\n */\nexport const SDK_VERSION = \"4.0.0\";\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport const AnalyzeDocumentRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeDocumentRequest\",\n    modelProperties: {\n      urlSource: {\n        serializedName: \"urlSource\",\n        type: {\n          name: \"String\"\n        }\n      },\n      base64Source: {\n        serializedName: \"base64Source\",\n        type: {\n          name: \"ByteArray\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorResponse\",\n    modelProperties: {\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorModel\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorModel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorModel\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ErrorModel\"\n            }\n          }\n        }\n      },\n      innererror: {\n        serializedName: \"innererror\",\n        type: {\n          name: \"Composite\",\n          className: \"InnerError\"\n        }\n      }\n    }\n  }\n};\n\nexport const InnerError: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"InnerError\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innererror: {\n        serializedName: \"innererror\",\n        type: {\n          name: \"Composite\",\n          className: \"InnerError\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeResultOperation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeResultOperation\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"notStarted\", \"running\", \"failed\", \"succeeded\"]\n        }\n      },\n      createdOn: {\n        serializedName: \"createdDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastUpdatedOn: {\n        serializedName: \"lastUpdatedDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorModel\"\n        }\n      },\n      analyzeResult: {\n        serializedName: \"analyzeResult\",\n        type: {\n          name: \"Composite\",\n          className: \"AnalyzeResult\"\n        }\n      }\n    }\n  }\n};\n\nexport const AnalyzeResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AnalyzeResult\",\n    modelProperties: {\n      apiVersion: {\n        serializedName: \"apiVersion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      modelId: {\n        constraints: {\n          Pattern: new RegExp(\"[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}\")\n        },\n        serializedName: \"modelId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      stringIndexType: {\n        serializedName: \"stringIndexType\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      content: {\n        serializedName: \"content\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      pages: {\n        serializedName: \"pages\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentPage\"\n            }\n          }\n        }\n      },\n      paragraphs: {\n        serializedName: \"paragraphs\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentParagraph\"\n            }\n          }\n        }\n      },\n      tables: {\n        serializedName: \"tables\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentTable\"\n            }\n          }\n        }\n      },\n      keyValuePairs: {\n        serializedName: \"keyValuePairs\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentKeyValuePair\"\n            }\n          }\n        }\n      },\n      styles: {\n        serializedName: \"styles\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentStyle\"\n            }\n          }\n        }\n      },\n      languages: {\n        serializedName: \"languages\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentLanguage\"\n            }\n          }\n        }\n      },\n      documents: {\n        serializedName: \"documents\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Document\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentPage: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentPage\",\n    modelProperties: {\n      pageNumber: {\n        constraints: {\n          InclusiveMinimum: 1\n        },\n        serializedName: \"pageNumber\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      angle: {\n        constraints: {\n          InclusiveMaximum: 180,\n          ExclusiveMinimum: -180\n        },\n        serializedName: \"angle\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      width: {\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        serializedName: \"width\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      height: {\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        serializedName: \"height\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      unit: {\n        serializedName: \"unit\",\n        type: {\n          name: \"String\"\n        }\n      },\n      spans: {\n        serializedName: \"spans\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentSpan\"\n            }\n          }\n        }\n      },\n      words: {\n        serializedName: \"words\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentWord\"\n            }\n          }\n        }\n      },\n      selectionMarks: {\n        serializedName: \"selectionMarks\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentSelectionMark\"\n            }\n          }\n        }\n      },\n      lines: {\n        serializedName: \"lines\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentLine\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentSpan: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentSpan\",\n    modelProperties: {\n      offset: {\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        serializedName: \"offset\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      length: {\n        constraints: {\n          InclusiveMinimum: 0\n        },\n        serializedName: \"length\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentWord: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentWord\",\n    modelProperties: {\n      content: {\n        serializedName: \"content\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      polygon: {\n        serializedName: \"polygon\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMinimum: 0\n            },\n            type: {\n              name: \"Number\"\n            }\n          }\n        }\n      },\n      span: {\n        serializedName: \"span\",\n        type: {\n          name: \"Composite\",\n          className: \"DocumentSpan\"\n        }\n      },\n      confidence: {\n        constraints: {\n          InclusiveMaximum: 1,\n          InclusiveMinimum: 0\n        },\n        serializedName: \"confidence\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentSelectionMark: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentSelectionMark\",\n    modelProperties: {\n      state: {\n        serializedName: \"state\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      polygon: {\n        serializedName: \"polygon\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMinimum: 0\n            },\n            type: {\n              name: \"Number\"\n            }\n          }\n        }\n      },\n      span: {\n        serializedName: \"span\",\n        type: {\n          name: \"Composite\",\n          className: \"DocumentSpan\"\n        }\n      },\n      confidence: {\n        constraints: {\n          InclusiveMaximum: 1,\n          InclusiveMinimum: 0\n        },\n        serializedName: \"confidence\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentLine: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentLine\",\n    modelProperties: {\n      content: {\n        serializedName: \"content\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      polygon: {\n        serializedName: \"polygon\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMinimum: 0\n            },\n            type: {\n              name: \"Number\"\n            }\n          }\n        }\n      },\n      spans: {\n        serializedName: \"spans\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentSpan\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentParagraph: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentParagraph\",\n    modelProperties: {\n      role: {\n        serializedName: \"role\",\n        type: {\n          name: \"String\"\n        }\n      },\n      content: {\n        serializedName: \"content\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      boundingRegions: {\n        serializedName: \"boundingRegions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BoundingRegion\"\n            }\n          }\n        }\n      },\n      spans: {\n        serializedName: \"spans\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentSpan\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const BoundingRegion: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BoundingRegion\",\n    modelProperties: {\n      pageNumber: {\n        constraints: {\n          InclusiveMinimum: 1\n        },\n        serializedName: \"pageNumber\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      polygon: {\n        serializedName: \"polygon\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            constraints: {\n              InclusiveMinimum: 0\n            },\n            type: {\n              name: \"Number\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentTable: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentTable\",\n    modelProperties: {\n      rowCount: {\n        constraints: {\n          InclusiveMinimum: 1\n        },\n        serializedName: \"rowCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      columnCount: {\n        constraints: {\n          InclusiveMinimum: 1\n        },\n        serializedName: \"columnCount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      cells: {\n        serializedName: \"cells\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentTableCell\"\n            }\n          }\n        }\n      },\n      boundingRegions: {\n        serializedName: \"boundingRegions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BoundingRegion\"\n            }\n          }\n        }\n      },\n      spans: {\n        serializedName: \"spans\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentSpan\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentTableCell: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentTableCell\",\n    modelProperties: {\n      kind: {\n        defaultValue: \"content\",\n        serializedName: \"kind\",\n        type: {\n          name: \"String\"\n        }\n      },\n      rowIndex: {\n        serializedName: \"rowIndex\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      columnIndex: {\n        serializedName: \"columnIndex\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      rowSpan: {\n        defaultValue: 1,\n        constraints: {\n          InclusiveMinimum: 1\n        },\n        serializedName: \"rowSpan\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      columnSpan: {\n        defaultValue: 1,\n        constraints: {\n          InclusiveMinimum: 1\n        },\n        serializedName: \"columnSpan\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      content: {\n        serializedName: \"content\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      boundingRegions: {\n        serializedName: \"boundingRegions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BoundingRegion\"\n            }\n          }\n        }\n      },\n      spans: {\n        serializedName: \"spans\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentSpan\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentKeyValuePair: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentKeyValuePair\",\n    modelProperties: {\n      key: {\n        serializedName: \"key\",\n        type: {\n          name: \"Composite\",\n          className: \"DocumentKeyValueElement\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Composite\",\n          className: \"DocumentKeyValueElement\"\n        }\n      },\n      confidence: {\n        constraints: {\n          InclusiveMaximum: 1,\n          InclusiveMinimum: 0\n        },\n        serializedName: \"confidence\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentKeyValueElement: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentKeyValueElement\",\n    modelProperties: {\n      content: {\n        serializedName: \"content\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      boundingRegions: {\n        serializedName: \"boundingRegions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BoundingRegion\"\n            }\n          }\n        }\n      },\n      spans: {\n        serializedName: \"spans\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentSpan\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentStyle: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentStyle\",\n    modelProperties: {\n      isHandwritten: {\n        serializedName: \"isHandwritten\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      spans: {\n        serializedName: \"spans\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentSpan\"\n            }\n          }\n        }\n      },\n      confidence: {\n        constraints: {\n          InclusiveMaximum: 1,\n          InclusiveMinimum: 0\n        },\n        serializedName: \"confidence\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentLanguage: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentLanguage\",\n    modelProperties: {\n      locale: {\n        serializedName: \"locale\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      spans: {\n        serializedName: \"spans\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentSpan\"\n            }\n          }\n        }\n      },\n      confidence: {\n        constraints: {\n          InclusiveMaximum: 1,\n          InclusiveMinimum: 0\n        },\n        serializedName: \"confidence\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const Document: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Document\",\n    modelProperties: {\n      docType: {\n        constraints: {\n          MaxLength: 64,\n          MinLength: 2\n        },\n        serializedName: \"docType\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      boundingRegions: {\n        serializedName: \"boundingRegions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BoundingRegion\"\n            }\n          }\n        }\n      },\n      spans: {\n        serializedName: \"spans\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentSpan\"\n            }\n          }\n        }\n      },\n      fields: {\n        serializedName: \"fields\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"Composite\", className: \"DocumentField\" } }\n        }\n      },\n      confidence: {\n        constraints: {\n          InclusiveMaximum: 1,\n          InclusiveMinimum: 0\n        },\n        serializedName: \"confidence\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentField: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentField\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      valueString: {\n        serializedName: \"valueString\",\n        type: {\n          name: \"String\"\n        }\n      },\n      valueDate: {\n        serializedName: \"valueDate\",\n        type: {\n          name: \"Date\"\n        }\n      },\n      valueTime: {\n        serializedName: \"valueTime\",\n        type: {\n          name: \"String\"\n        }\n      },\n      valuePhoneNumber: {\n        serializedName: \"valuePhoneNumber\",\n        type: {\n          name: \"String\"\n        }\n      },\n      valueNumber: {\n        serializedName: \"valueNumber\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      valueInteger: {\n        serializedName: \"valueInteger\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      valueSelectionMark: {\n        serializedName: \"valueSelectionMark\",\n        type: {\n          name: \"String\"\n        }\n      },\n      valueSignature: {\n        serializedName: \"valueSignature\",\n        type: {\n          name: \"String\"\n        }\n      },\n      valueCountryRegion: {\n        serializedName: \"valueCountryRegion\",\n        type: {\n          name: \"String\"\n        }\n      },\n      valueArray: {\n        serializedName: \"valueArray\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentField\"\n            }\n          }\n        }\n      },\n      valueObject: {\n        serializedName: \"valueObject\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"Composite\", className: \"DocumentField\" } }\n        }\n      },\n      valueCurrency: {\n        serializedName: \"valueCurrency\",\n        type: {\n          name: \"Composite\",\n          className: \"CurrencyValue\"\n        }\n      },\n      valueAddress: {\n        serializedName: \"valueAddress\",\n        type: {\n          name: \"Composite\",\n          className: \"AddressValue\"\n        }\n      },\n      content: {\n        serializedName: \"content\",\n        type: {\n          name: \"String\"\n        }\n      },\n      boundingRegions: {\n        serializedName: \"boundingRegions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BoundingRegion\"\n            }\n          }\n        }\n      },\n      spans: {\n        serializedName: \"spans\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentSpan\"\n            }\n          }\n        }\n      },\n      confidence: {\n        constraints: {\n          InclusiveMaximum: 1,\n          InclusiveMinimum: 0\n        },\n        serializedName: \"confidence\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const CurrencyValue: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CurrencyValue\",\n    modelProperties: {\n      amount: {\n        serializedName: \"amount\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      currencySymbol: {\n        serializedName: \"currencySymbol\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AddressValue: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AddressValue\",\n    modelProperties: {\n      houseNumber: {\n        serializedName: \"houseNumber\",\n        type: {\n          name: \"String\"\n        }\n      },\n      poBox: {\n        serializedName: \"poBox\",\n        type: {\n          name: \"String\"\n        }\n      },\n      road: {\n        serializedName: \"road\",\n        type: {\n          name: \"String\"\n        }\n      },\n      city: {\n        serializedName: \"city\",\n        type: {\n          name: \"String\"\n        }\n      },\n      state: {\n        serializedName: \"state\",\n        type: {\n          name: \"String\"\n        }\n      },\n      postalCode: {\n        serializedName: \"postalCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      countryRegion: {\n        serializedName: \"countryRegion\",\n        type: {\n          name: \"String\"\n        }\n      },\n      streetAddress: {\n        serializedName: \"streetAddress\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BuildDocumentModelRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BuildDocumentModelRequest\",\n    modelProperties: {\n      modelId: {\n        constraints: {\n          Pattern: new RegExp(\"[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}\")\n        },\n        serializedName: \"modelId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        constraints: {\n          MaxLength: 4096\n        },\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      buildMode: {\n        serializedName: \"buildMode\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      azureBlobSource: {\n        serializedName: \"azureBlobSource\",\n        type: {\n          name: \"Composite\",\n          className: \"AzureBlobContentSource\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const AzureBlobContentSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AzureBlobContentSource\",\n    modelProperties: {\n      containerUrl: {\n        serializedName: \"containerUrl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prefix: {\n        serializedName: \"prefix\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ComposeDocumentModelRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ComposeDocumentModelRequest\",\n    modelProperties: {\n      modelId: {\n        constraints: {\n          Pattern: new RegExp(\"[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}\")\n        },\n        serializedName: \"modelId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        constraints: {\n          MaxLength: 4096\n        },\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      componentModels: {\n        constraints: {\n          UniqueItems: true\n        },\n        serializedName: \"componentModels\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ComponentDocumentModelDetails\"\n            }\n          }\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const ComponentDocumentModelDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ComponentDocumentModelDetails\",\n    modelProperties: {\n      modelId: {\n        constraints: {\n          Pattern: new RegExp(\"[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}\")\n        },\n        serializedName: \"modelId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AuthorizeCopyRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AuthorizeCopyRequest\",\n    modelProperties: {\n      modelId: {\n        constraints: {\n          Pattern: new RegExp(\"[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}\")\n        },\n        serializedName: \"modelId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        constraints: {\n          MaxLength: 4096\n        },\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const CopyAuthorization: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CopyAuthorization\",\n    modelProperties: {\n      targetResourceId: {\n        serializedName: \"targetResourceId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      targetResourceRegion: {\n        serializedName: \"targetResourceRegion\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      targetModelId: {\n        constraints: {\n          Pattern: new RegExp(\"[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}\")\n        },\n        serializedName: \"targetModelId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      targetModelLocation: {\n        serializedName: \"targetModelLocation\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      accessToken: {\n        serializedName: \"accessToken\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      expirationDateTime: {\n        serializedName: \"expirationDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const GetOperationsResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GetOperationsResponse\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OperationSummary\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OperationSummary: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OperationSummary\",\n    modelProperties: {\n      operationId: {\n        serializedName: \"operationId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"notStarted\",\n            \"running\",\n            \"failed\",\n            \"succeeded\",\n            \"canceled\"\n          ]\n        }\n      },\n      percentCompleted: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0\n        },\n        serializedName: \"percentCompleted\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      createdOn: {\n        serializedName: \"createdDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastUpdatedOn: {\n        serializedName: \"lastUpdatedDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      kind: {\n        serializedName: \"kind\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      resourceLocation: {\n        serializedName: \"resourceLocation\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      apiVersion: {\n        serializedName: \"apiVersion\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const OperationDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OperationDetails\",\n    uberParent: \"OperationDetails\",\n    polymorphicDiscriminator: {\n      serializedName: \"kind\",\n      clientName: \"kind\"\n    },\n    modelProperties: {\n      operationId: {\n        serializedName: \"operationId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"notStarted\",\n            \"running\",\n            \"failed\",\n            \"succeeded\",\n            \"canceled\"\n          ]\n        }\n      },\n      percentCompleted: {\n        constraints: {\n          InclusiveMaximum: 100,\n          InclusiveMinimum: 0\n        },\n        serializedName: \"percentCompleted\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      createdOn: {\n        serializedName: \"createdDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastUpdatedOn: {\n        serializedName: \"lastUpdatedDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      kind: {\n        serializedName: \"kind\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      resourceLocation: {\n        serializedName: \"resourceLocation\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      apiVersion: {\n        serializedName: \"apiVersion\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorModel\"\n        }\n      }\n    }\n  }\n};\n\nexport const GetDocumentModelsResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GetDocumentModelsResponse\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentModelSummary\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentModelSummary: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentModelSummary\",\n    modelProperties: {\n      modelId: {\n        constraints: {\n          Pattern: new RegExp(\"[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}\")\n        },\n        serializedName: \"modelId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        constraints: {\n          MaxLength: 4096\n        },\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      createdOn: {\n        serializedName: \"createdDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      apiVersion: {\n        serializedName: \"apiVersion\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentModelDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentModelDetails\",\n    modelProperties: {\n      modelId: {\n        constraints: {\n          Pattern: new RegExp(\"[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}\")\n        },\n        serializedName: \"modelId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        constraints: {\n          MaxLength: 4096\n        },\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      createdOn: {\n        serializedName: \"createdDateTime\",\n        required: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      apiVersion: {\n        serializedName: \"apiVersion\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      docTypes: {\n        serializedName: \"docTypes\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: { name: \"Composite\", className: \"DocumentTypeDetails\" }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentTypeDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentTypeDetails\",\n    modelProperties: {\n      description: {\n        constraints: {\n          MaxLength: 4096\n        },\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      buildMode: {\n        serializedName: \"buildMode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      fieldSchema: {\n        serializedName: \"fieldSchema\",\n        required: true,\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: { name: \"Composite\", className: \"DocumentFieldSchema\" }\n          }\n        }\n      },\n      fieldConfidence: {\n        serializedName: \"fieldConfidence\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: { name: \"Number\" },\n            constraints: { InclusiveMaximum: 1, InclusiveMinimum: 0 }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentFieldSchema: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DocumentFieldSchema\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      example: {\n        serializedName: \"example\",\n        type: {\n          name: \"String\"\n        }\n      },\n      items: {\n        serializedName: \"items\",\n        type: {\n          name: \"Composite\",\n          className: \"DocumentFieldSchema\"\n        }\n      },\n      properties: {\n        serializedName: \"properties\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: { name: \"Composite\", className: \"DocumentFieldSchema\" }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ResourceDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ResourceDetails\",\n    modelProperties: {\n      customDocumentModels: {\n        serializedName: \"customDocumentModels\",\n        type: {\n          name: \"Composite\",\n          className: \"CustomDocumentModelsDetails\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomDocumentModelsDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomDocumentModelsDetails\",\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      },\n      limit: {\n        serializedName: \"limit\",\n        required: true,\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentModelBuildOperationDetails: coreClient.CompositeMapper = {\n  serializedName: \"documentModelBuild\",\n  type: {\n    name: \"Composite\",\n    className: \"DocumentModelBuildOperationDetails\",\n    uberParent: \"OperationDetails\",\n    polymorphicDiscriminator: OperationDetails.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OperationDetails.type.modelProperties,\n      result: {\n        serializedName: \"result\",\n        type: {\n          name: \"Composite\",\n          className: \"DocumentModelDetails\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentModelComposeOperationDetails: coreClient.CompositeMapper = {\n  serializedName: \"documentModelCompose\",\n  type: {\n    name: \"Composite\",\n    className: \"DocumentModelComposeOperationDetails\",\n    uberParent: \"OperationDetails\",\n    polymorphicDiscriminator: OperationDetails.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OperationDetails.type.modelProperties,\n      result: {\n        serializedName: \"result\",\n        type: {\n          name: \"Composite\",\n          className: \"DocumentModelDetails\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentModelCopyToOperationDetails: coreClient.CompositeMapper = {\n  serializedName: \"documentModelCopyTo\",\n  type: {\n    name: \"Composite\",\n    className: \"DocumentModelCopyToOperationDetails\",\n    uberParent: \"OperationDetails\",\n    polymorphicDiscriminator: OperationDetails.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...OperationDetails.type.modelProperties,\n      result: {\n        serializedName: \"result\",\n        type: {\n          name: \"Composite\",\n          className: \"DocumentModelDetails\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeneratedClientAnalyzeDocumentHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GeneratedClientAnalyzeDocumentHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeneratedClientBuildDocumentModelHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GeneratedClientBuildDocumentModelHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeneratedClientComposeDocumentModelHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GeneratedClientComposeDocumentModelHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GeneratedClientCopyDocumentModelToHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GeneratedClientCopyDocumentModelToHeaders\",\n    modelProperties: {\n      operationLocation: {\n        serializedName: \"operation-location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport let discriminators = {\n  OperationDetails: OperationDetails,\n  \"OperationDetails.documentModelBuild\": DocumentModelBuildOperationDetails,\n  \"OperationDetails.documentModelCompose\": DocumentModelComposeOperationDetails,\n  \"OperationDetails.documentModelCopyTo\": DocumentModelCopyToOperationDetails\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-client\";\nimport {\n  AnalyzeDocumentRequest as AnalyzeDocumentRequestMapper,\n  BuildDocumentModelRequest as BuildDocumentModelRequestMapper,\n  ComposeDocumentModelRequest as ComposeDocumentModelRequestMapper,\n  AuthorizeCopyRequest as AuthorizeCopyRequestMapper,\n  CopyAuthorization as CopyAuthorizationMapper\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: \"contentType\",\n  mapper: {\n    serializedName: \"Content-Type\",\n    required: true,\n    type: {\n      name: \"Enum\",\n      allowedValues: [\n        \"application/octet-stream\",\n        \"application/pdf\",\n        \"image/bmp\",\n        \"image/heif\",\n        \"image/jpeg\",\n        \"image/png\",\n        \"image/tiff\"\n      ]\n    }\n  }\n};\n\nexport const analyzeRequest: OperationParameter = {\n  parameterPath: [\"options\", \"analyzeRequest\"],\n  mapper: {\n    serializedName: \"analyzeRequest\",\n    type: {\n      name: \"Stream\"\n    }\n  }\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType1: OperationParameter = {\n  parameterPath: \"contentType\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const analyzeRequest1: OperationParameter = {\n  parameterPath: [\"options\", \"analyzeRequest\"],\n  mapper: AnalyzeDocumentRequestMapper\n};\n\nexport const accept1: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const endpoint: OperationURLParameter = {\n  parameterPath: \"endpoint\",\n  mapper: {\n    serializedName: \"endpoint\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const modelId: OperationURLParameter = {\n  parameterPath: \"modelId\",\n  mapper: {\n    constraints: {\n      Pattern: new RegExp(\"[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}\")\n    },\n    serializedName: \"modelId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const pages: OperationQueryParameter = {\n  parameterPath: [\"options\", \"pages\"],\n  mapper: {\n    constraints: {\n      Pattern: new RegExp(\"^(\\\\d+(-\\\\d+)?)(,\\\\s*(\\\\d+(-\\\\d+)?))*$\")\n    },\n    serializedName: \"pages\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const locale: OperationQueryParameter = {\n  parameterPath: [\"options\", \"locale\"],\n  mapper: {\n    serializedName: \"locale\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const stringIndexType: OperationQueryParameter = {\n  parameterPath: \"stringIndexType\",\n  mapper: {\n    serializedName: \"stringIndexType\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const apiVersion: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    defaultValue: \"2022-08-31\",\n    isConstant: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const resultId: OperationURLParameter = {\n  parameterPath: \"resultId\",\n  mapper: {\n    serializedName: \"resultId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType2: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const buildRequest: OperationParameter = {\n  parameterPath: \"buildRequest\",\n  mapper: BuildDocumentModelRequestMapper\n};\n\nexport const composeRequest: OperationParameter = {\n  parameterPath: \"composeRequest\",\n  mapper: ComposeDocumentModelRequestMapper\n};\n\nexport const authorizeCopyRequest: OperationParameter = {\n  parameterPath: \"authorizeCopyRequest\",\n  mapper: AuthorizeCopyRequestMapper\n};\n\nexport const copyToRequest: OperationParameter = {\n  parameterPath: \"copyToRequest\",\n  mapper: CopyAuthorizationMapper\n};\n\nexport const operationId: OperationURLParameter = {\n  parameterPath: \"operationId\",\n  mapper: {\n    serializedName: \"operationId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const nextLink: OperationURLParameter = {\n  parameterPath: \"nextLink\",\n  mapper: {\n    serializedName: \"nextLink\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ErrorModel, InnerError } from \"./generated\";\n\n/**\n * Returns the innermost error that has a message field.\n *\n * @internal\n * @param error - the error to unwrap\n * @returns - the innermost populated error\n */\nfunction unwrap(error: ErrorModel | InnerError): ErrorModel {\n  if (error.innererror !== undefined && error.innererror.message !== undefined) {\n    return unwrap(error.innererror);\n  }\n\n  return error as ErrorModel;\n}\n\n/**\n * A class representing an Error from the Form Recognizer Service.\n *\n * For information about the error codes the service produces, refer to the service's error documentation:\n *\n * https://aka.ms/azsdk/formrecognizer/errors\n */\nexport class FormRecognizerError extends Error {\n  /**\n   * The error code.\n   *\n   * Example: `InternalServerError`\n   */\n  public code: string;\n\n  /**\n   * A list of detailed errors that are related to this error.\n   */\n  public details: ErrorModel[];\n\n  /**\n   * The target of the error (the component or resource that the error refers to).\n   */\n  public target?: string;\n\n  /**\n   * Create a FormRecognizerError from a generated ErrorModel.\n   * @internal\n   * @hidden\n   */\n  constructor(formRecognizerError: ErrorModel) {\n    // TODO: We used to unwrap FR errors this way, but is it still necessary\n    const e = unwrap(formRecognizerError);\n    super(e.message);\n\n    this.code = e.code;\n    this.details = e.details ?? [];\n    this.target = e.target;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BoundingRegion as GeneratedBoundingRegion,\n  DocumentKeyValuePair as GeneratedDocumentKeyValuePair,\n  DocumentTable as GeneratedDocumentTable,\n} from \"../generated\";\nimport { BoundingRegion, DocumentKeyValuePair, DocumentTable } from \"../models/documentElements\";\n\n/**\n * Represents a point used to define bounding polygons. The unit is either 'pixel' or 'inch' (See {@link LengthUnit}).\n */\nexport interface Point2D {\n  /**\n   * x coordinate - relative from the left side of the page\n   */\n  x: number;\n  /**\n   * y coordinate - relative from the top of the page\n   */\n  y: number;\n}\n\nexport function toBoundingPolygon(original: number[] | undefined): Point2D[] | undefined {\n  const points: Point2D[] = [];\n  if (!original) return;\n\n  if (original.length % 2 !== 0) {\n    throw new Error(\n      \"Unexpected number of points in the response, unable to translate as 2D points\"\n    );\n  }\n\n  for (let i = 0; i < original.length; i += 2) {\n    points.push({ x: original[i], y: original[i + 1] });\n  }\n\n  return points;\n}\n\nexport function toBoundingRegions(\n  original: GeneratedBoundingRegion[] | undefined\n): BoundingRegion[] | undefined {\n  return original?.map((region) => ({ ...region, polygon: toBoundingPolygon(region.polygon) }));\n}\n\nexport function toDocumentTableFromGenerated(table: GeneratedDocumentTable): DocumentTable {\n  return {\n    ...table,\n    boundingRegions: toBoundingRegions(table.boundingRegions),\n    cells: table.cells.map((cell) => ({\n      ...cell,\n      boundingRegions: toBoundingRegions(cell.boundingRegions),\n    })),\n  };\n}\n\nexport function toKeyValuePairFromGenerated(\n  pair: GeneratedDocumentKeyValuePair\n): DocumentKeyValuePair {\n  return {\n    ...pair,\n    key: { ...pair.key, boundingRegions: toBoundingRegions(pair.key.boundingRegions) },\n    value: pair.value\n      ? { ...pair.value, boundingRegions: toBoundingRegions(pair.value?.boundingRegions) }\n      : undefined,\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential } from \"@azure/core-auth\";\nimport { PipelinePolicy, PipelineResponse } from \"@azure/core-rest-pipeline\";\n\nconst APIM_SUBSCRIPTION_KEY_HEADER = \"Ocp-Apim-Subscription-Key\";\n\n/**\n * Create an HTTP pipeline policy to authenticate a request using an `AzureKeyCredential` for Azure Form Recognizer\n * @internal\n */\nexport function createFormRecognizerAzureKeyCredentialPolicy(\n  credential: KeyCredential\n): PipelinePolicy {\n  return {\n    name: \"cognitiveServicesApimSubscriptionKeyCredentialPolicy\",\n    sendRequest(request, next): Promise<PipelineResponse> {\n      request.headers.set(APIM_SUBSCRIPTION_KEY_HEADER, credential.key);\n      return next(request);\n    },\n  };\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport {\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest\n} from \"@azure/core-rest-pipeline\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport {\n  StringIndexType,\n  GeneratedClientOptionalParams,\n  OperationSummary,\n  GetOperationsNextOptionalParams,\n  GetOperationsOptionalParams,\n  DocumentModelSummary,\n  GetDocumentModelsNextOptionalParams,\n  GetDocumentModelsOptionalParams,\n  ContentType,\n  AnalyzeDocument$binaryOptionalParams,\n  AnalyzeDocument$jsonOptionalParams,\n  AnalyzeDocumentResponse,\n  GetAnalyzeDocumentResultOptionalParams,\n  GetAnalyzeDocumentResultResponse,\n  BuildDocumentModelRequest,\n  BuildDocumentModelOptionalParams,\n  BuildDocumentModelResponse,\n  ComposeDocumentModelRequest,\n  ComposeDocumentModelOptionalParams,\n  ComposeDocumentModelResponse,\n  AuthorizeCopyRequest,\n  AuthorizeCopyDocumentModelOptionalParams,\n  AuthorizeCopyDocumentModelResponse,\n  CopyAuthorization,\n  CopyDocumentModelToOptionalParams,\n  CopyDocumentModelToResponse,\n  GetOperationsOperationResponse,\n  GetOperationOptionalParams,\n  GetOperationResponse,\n  GetDocumentModelsOperationResponse,\n  GetDocumentModelOptionalParams,\n  GetDocumentModelResponse,\n  DeleteDocumentModelOptionalParams,\n  GetResourceDetailsOptionalParams,\n  GetResourceDetailsResponse,\n  GetOperationsNextResponse,\n  GetDocumentModelsNextResponse\n} from \"./models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\nexport class GeneratedClient extends coreClient.ServiceClient {\n  endpoint: string;\n  stringIndexType?: StringIndexType;\n  apiVersion: string;\n\n  /**\n   * Initializes a new instance of the GeneratedClient class.\n   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for\n   *                 example: https://westus2.api.cognitive.microsoft.com).\n   * @param options The parameter options\n   */\n  constructor(endpoint: string, options?: GeneratedClientOptionalParams) {\n    if (endpoint === undefined) {\n      throw new Error(\"'endpoint' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: GeneratedClientOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\"\n    };\n\n    const packageDetails = `azsdk-js-ai-form-recognizer/4.0.0`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      baseUri:\n        options.endpoint ?? options.baseUri ?? \"{endpoint}/formrecognizer\"\n    };\n    super(optionsWithDefaults);\n\n    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {\n      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();\n      const bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(\n        (pipelinePolicy) =>\n          pipelinePolicy.name ===\n          coreRestPipeline.bearerTokenAuthenticationPolicyName\n      );\n      if (!bearerTokenAuthenticationPolicyFound) {\n        this.pipeline.removePolicy({\n          name: coreRestPipeline.bearerTokenAuthenticationPolicyName\n        });\n        this.pipeline.addPolicy(\n          coreRestPipeline.bearerTokenAuthenticationPolicy({\n            scopes: `${optionsWithDefaults.baseUri}/.default`,\n            challengeCallbacks: {\n              authorizeRequestOnChallenge:\n                coreClient.authorizeRequestOnClaimChallenge\n            }\n          })\n        );\n      }\n    }\n    // Parameter assignments\n    this.endpoint = endpoint;\n\n    // Assigning values to Constant parameters\n    this.apiVersion = options.apiVersion || \"2022-08-31\";\n    this.addCustomApiVersionPolicy(options.apiVersion);\n  }\n\n  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */\n  private addCustomApiVersionPolicy(apiVersion?: string) {\n    if (!apiVersion) {\n      return;\n    }\n    const apiVersionPolicy = {\n      name: \"CustomApiVersionPolicy\",\n      async sendRequest(\n        request: PipelineRequest,\n        next: SendRequest\n      ): Promise<PipelineResponse> {\n        const param = request.url.split(\"?\");\n        if (param.length > 1) {\n          const newParams = param[1].split(\"&\").map((item) => {\n            if (item.indexOf(\"api-version\") > -1) {\n              return \"api-version=\" + apiVersion;\n            } else {\n              return item;\n            }\n          });\n          request.url = param[0] + \"?\" + newParams.join(\"&\");\n        }\n        return next(request);\n      }\n    };\n    this.pipeline.addPolicy(apiVersionPolicy);\n  }\n\n  /**\n   * Lists all operations.\n   * @param options The options parameters.\n   */\n  public listOperations(\n    options?: GetOperationsOptionalParams\n  ): PagedAsyncIterableIterator<OperationSummary> {\n    const iter = this.getOperationsPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: () => {\n        return this.getOperationsPagingPage(options);\n      }\n    };\n  }\n\n  private async *getOperationsPagingPage(\n    options?: GetOperationsOptionalParams\n  ): AsyncIterableIterator<OperationSummary[]> {\n    let result = await this._getOperations(options);\n    yield result.value || [];\n    let continuationToken = result.nextLink;\n    while (continuationToken) {\n      result = await this._getOperationsNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      yield result.value || [];\n    }\n  }\n\n  private async *getOperationsPagingAll(\n    options?: GetOperationsOptionalParams\n  ): AsyncIterableIterator<OperationSummary> {\n    for await (const page of this.getOperationsPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all document models\n   * @param options The options parameters.\n   */\n  public listDocumentModels(\n    options?: GetDocumentModelsOptionalParams\n  ): PagedAsyncIterableIterator<DocumentModelSummary> {\n    const iter = this.getDocumentModelsPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: () => {\n        return this.getDocumentModelsPagingPage(options);\n      }\n    };\n  }\n\n  private async *getDocumentModelsPagingPage(\n    options?: GetDocumentModelsOptionalParams\n  ): AsyncIterableIterator<DocumentModelSummary[]> {\n    let result = await this._getDocumentModels(options);\n    yield result.value || [];\n    let continuationToken = result.nextLink;\n    while (continuationToken) {\n      result = await this._getDocumentModelsNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      yield result.value || [];\n    }\n  }\n\n  private async *getDocumentModelsPagingAll(\n    options?: GetDocumentModelsOptionalParams\n  ): AsyncIterableIterator<DocumentModelSummary> {\n    for await (const page of this.getDocumentModelsPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Analyzes document with document model.\n   * @param modelId Unique document model name.\n   * @param contentType Upload file type\n   * @param options The options parameters.\n   */\n  analyzeDocument(\n    modelId: string,\n    contentType: ContentType,\n    options?: AnalyzeDocument$binaryOptionalParams\n  ): Promise<AnalyzeDocumentResponse>;\n  /**\n   * Analyzes document with document model.\n   * @param modelId Unique document model name.\n   * @param contentType Body Parameter content-type\n   * @param options The options parameters.\n   */\n  analyzeDocument(\n    modelId: string,\n    contentType: \"application/json\",\n    options?: AnalyzeDocument$jsonOptionalParams\n  ): Promise<AnalyzeDocumentResponse>;\n  /**\n   * Analyzes document with document model.\n   * @param args Includes all the parameters for this operation.\n   */\n  analyzeDocument(\n    ...args:\n      | [string, ContentType, AnalyzeDocument$binaryOptionalParams?]\n      | [string, \"application/json\", AnalyzeDocument$jsonOptionalParams?]\n  ): Promise<AnalyzeDocumentResponse> {\n    let operationSpec: coreClient.OperationSpec;\n    let operationArguments: coreClient.OperationArguments;\n    let options;\n    if (\n      args[1] === \"application/octet-stream\" ||\n      args[1] === \"application/pdf\" ||\n      args[1] === \"image/bmp\" ||\n      args[1] === \"image/heif\" ||\n      args[1] === \"image/jpeg\" ||\n      args[1] === \"image/png\" ||\n      args[1] === \"image/tiff\"\n    ) {\n      operationSpec = analyzeDocument$binaryOperationSpec;\n      operationArguments = {\n        modelId: args[0],\n        contentType: args[1],\n        options: args[2]\n      };\n      options = args[2];\n    } else if (args[1] === \"application/json\") {\n      operationSpec = analyzeDocument$jsonOperationSpec;\n      operationArguments = {\n        modelId: args[0],\n        contentType: args[1],\n        options: args[2]\n      };\n      options = args[2];\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[1]}\".`\n      );\n    }\n    operationArguments.options = options || {};\n    return this.sendOperationRequest(operationArguments, operationSpec);\n  }\n\n  /**\n   * Gets the result of document analysis.\n   * @param modelId Unique document model name.\n   * @param resultId Analyze operation result ID.\n   * @param options The options parameters.\n   */\n  getAnalyzeDocumentResult(\n    modelId: string,\n    resultId: string,\n    options?: GetAnalyzeDocumentResultOptionalParams\n  ): Promise<GetAnalyzeDocumentResultResponse> {\n    return this.sendOperationRequest(\n      { modelId, resultId, options },\n      getAnalyzeDocumentResultOperationSpec\n    );\n  }\n\n  /**\n   * Builds a custom document analysis model.\n   * @param buildRequest Building request parameters.\n   * @param options The options parameters.\n   */\n  buildDocumentModel(\n    buildRequest: BuildDocumentModelRequest,\n    options?: BuildDocumentModelOptionalParams\n  ): Promise<BuildDocumentModelResponse> {\n    return this.sendOperationRequest(\n      { buildRequest, options },\n      buildDocumentModelOperationSpec\n    );\n  }\n\n  /**\n   * Creates a new document model from document types of existing document models.\n   * @param composeRequest Compose request parameters.\n   * @param options The options parameters.\n   */\n  composeDocumentModel(\n    composeRequest: ComposeDocumentModelRequest,\n    options?: ComposeDocumentModelOptionalParams\n  ): Promise<ComposeDocumentModelResponse> {\n    return this.sendOperationRequest(\n      { composeRequest, options },\n      composeDocumentModelOperationSpec\n    );\n  }\n\n  /**\n   * Generates authorization to copy a document model to this location with specified modelId and\n   * optional description.\n   * @param authorizeCopyRequest Authorize copy request parameters.\n   * @param options The options parameters.\n   */\n  authorizeCopyDocumentModel(\n    authorizeCopyRequest: AuthorizeCopyRequest,\n    options?: AuthorizeCopyDocumentModelOptionalParams\n  ): Promise<AuthorizeCopyDocumentModelResponse> {\n    return this.sendOperationRequest(\n      { authorizeCopyRequest, options },\n      authorizeCopyDocumentModelOperationSpec\n    );\n  }\n\n  /**\n   * Copies document model to the target resource, region, and modelId.\n   * @param modelId Unique document model name.\n   * @param copyToRequest Copy to request parameters.\n   * @param options The options parameters.\n   */\n  copyDocumentModelTo(\n    modelId: string,\n    copyToRequest: CopyAuthorization,\n    options?: CopyDocumentModelToOptionalParams\n  ): Promise<CopyDocumentModelToResponse> {\n    return this.sendOperationRequest(\n      { modelId, copyToRequest, options },\n      copyDocumentModelToOperationSpec\n    );\n  }\n\n  /**\n   * Lists all operations.\n   * @param options The options parameters.\n   */\n  private _getOperations(\n    options?: GetOperationsOptionalParams\n  ): Promise<GetOperationsOperationResponse> {\n    return this.sendOperationRequest({ options }, getOperationsOperationSpec);\n  }\n\n  /**\n   * Gets operation info.\n   * @param operationId Unique operation ID.\n   * @param options The options parameters.\n   */\n  getOperation(\n    operationId: string,\n    options?: GetOperationOptionalParams\n  ): Promise<GetOperationResponse> {\n    return this.sendOperationRequest(\n      { operationId, options },\n      getOperationOperationSpec\n    );\n  }\n\n  /**\n   * List all document models\n   * @param options The options parameters.\n   */\n  private _getDocumentModels(\n    options?: GetDocumentModelsOptionalParams\n  ): Promise<GetDocumentModelsOperationResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getDocumentModelsOperationSpec\n    );\n  }\n\n  /**\n   * Gets detailed document model information.\n   * @param modelId Unique document model name.\n   * @param options The options parameters.\n   */\n  getDocumentModel(\n    modelId: string,\n    options?: GetDocumentModelOptionalParams\n  ): Promise<GetDocumentModelResponse> {\n    return this.sendOperationRequest(\n      { modelId, options },\n      getDocumentModelOperationSpec\n    );\n  }\n\n  /**\n   * Deletes document model.\n   * @param modelId Unique document model name.\n   * @param options The options parameters.\n   */\n  deleteDocumentModel(\n    modelId: string,\n    options?: DeleteDocumentModelOptionalParams\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { modelId, options },\n      deleteDocumentModelOperationSpec\n    );\n  }\n\n  /**\n   * Return information about the current resource.\n   * @param options The options parameters.\n   */\n  getResourceDetails(\n    options?: GetResourceDetailsOptionalParams\n  ): Promise<GetResourceDetailsResponse> {\n    return this.sendOperationRequest(\n      { options },\n      getResourceDetailsOperationSpec\n    );\n  }\n\n  /**\n   * GetOperationsNext\n   * @param nextLink The nextLink from the previous successful call to the GetOperations method.\n   * @param options The options parameters.\n   */\n  private _getOperationsNext(\n    nextLink: string,\n    options?: GetOperationsNextOptionalParams\n  ): Promise<GetOperationsNextResponse> {\n    return this.sendOperationRequest(\n      { nextLink, options },\n      getOperationsNextOperationSpec\n    );\n  }\n\n  /**\n   * GetDocumentModelsNext\n   * @param nextLink The nextLink from the previous successful call to the GetDocumentModels method.\n   * @param options The options parameters.\n   */\n  private _getDocumentModelsNext(\n    nextLink: string,\n    options?: GetDocumentModelsNextOptionalParams\n  ): Promise<GetDocumentModelsNextResponse> {\n    return this.sendOperationRequest(\n      { nextLink, options },\n      getDocumentModelsNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst analyzeDocument$binaryOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels/{modelId}:analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeDocumentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.analyzeRequest,\n  queryParameters: [\n    Parameters.pages,\n    Parameters.locale,\n    Parameters.stringIndexType,\n    Parameters.apiVersion\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"binary\",\n  serializer\n};\nconst analyzeDocument$jsonOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels/{modelId}:analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeDocumentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.analyzeRequest1,\n  queryParameters: [\n    Parameters.pages,\n    Parameters.locale,\n    Parameters.stringIndexType,\n    Parameters.apiVersion\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.contentType1, Parameters.accept1],\n  mediaType: \"json\",\n  serializer\n};\nconst getAnalyzeDocumentResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels/{modelId}/analyzeResults/{resultId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeResultOperation\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.modelId, Parameters.resultId],\n  headerParameters: [Parameters.accept1],\n  serializer\n};\nconst buildDocumentModelOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels:build\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientBuildDocumentModelHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.buildRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept1, Parameters.contentType2],\n  mediaType: \"json\",\n  serializer\n};\nconst composeDocumentModelOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels:compose\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientComposeDocumentModelHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.composeRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept1, Parameters.contentType2],\n  mediaType: \"json\",\n  serializer\n};\nconst authorizeCopyDocumentModelOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels:authorizeCopy\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CopyAuthorization\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.authorizeCopyRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept1, Parameters.contentType2],\n  mediaType: \"json\",\n  serializer\n};\nconst copyDocumentModelToOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels/{modelId}:copyTo\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientCopyDocumentModelToHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.copyToRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.accept1, Parameters.contentType2],\n  mediaType: \"json\",\n  serializer\n};\nconst getOperationsOperationSpec: coreClient.OperationSpec = {\n  path: \"/operations\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GetOperationsResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept1],\n  serializer\n};\nconst getOperationOperationSpec: coreClient.OperationSpec = {\n  path: \"/operations/{operationId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OperationDetails\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.operationId],\n  headerParameters: [Parameters.accept1],\n  serializer\n};\nconst getDocumentModelsOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GetDocumentModelsResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept1],\n  serializer\n};\nconst getDocumentModelOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels/{modelId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DocumentModelDetails\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.accept1],\n  serializer\n};\nconst deleteDocumentModelOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels/{modelId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.accept1],\n  serializer\n};\nconst getResourceDetailsOperationSpec: coreClient.OperationSpec = {\n  path: \"/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ResourceDetails\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept1],\n  serializer\n};\nconst getOperationsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GetOperationsResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [Parameters.accept1],\n  serializer\n};\nconst getDocumentModelsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GetDocumentModelsResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [Parameters.accept1],\n  serializer\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CommonClientOptions } from \"@azure/core-client\";\n\n/**\n * Valid values of the Form Recognizer service REST API version.\n */\nexport type FormRecognizerApiVersion =\n  typeof FormRecognizerApiVersion[keyof typeof FormRecognizerApiVersion];\n\n/**\n * Supported and common values of FormRecognizerApiVersion.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const FormRecognizerApiVersion = {\n  /**\n   * The newest version of the service known to be supported by the client (default).\n   *\n   * If using a beta package version, this will be identical to the latest preview version. Otherwise, it will be\n   * identical to the latest stable version.\n   */\n  Latest: \"2022-08-31\",\n  // TODO (GA): Add a `Stable` version selector that picks the latest GA version, even in beta packages, and an exact\n  // version entry for the GA version.\n  Stable: \"2022-08-31\",\n} as const;\n\n/**\n * Valid string index types supported by the Form Recognizer service and SDK clients.\n */\nexport type StringIndexType = typeof StringIndexType[keyof typeof StringIndexType];\n\n/**\n * Supported values of StringIndexType.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const StringIndexType = {\n  /**\n   * UTF-16 code units\n   */\n  Utf16CodeUnit: \"utf16CodeUnit\",\n  /**\n   * Unicode code points\n   */\n  UnicodeCodePoint: \"unicodeCodePoint\",\n} as const;\n\n/**\n * Default settings for Form Recognizer clients.\n *\n * @internal\n */\nexport const DEFAULT_GENERATED_CLIENT_OPTIONS = {\n  stringIndexType: StringIndexType.Utf16CodeUnit,\n  apiVersion: FormRecognizerApiVersion.Stable,\n} as const;\n\n/**\n * Configurable options for the Form Recognizer service clients (DocumentAnalysisClient and\n * DocumentModelAdministrationClient).\n */\nexport interface FormRecognizerCommonClientOptions extends CommonClientOptions {\n  /**\n   * The version of the Form Recognizer REST API to call. Service versions 2.1 and lower (non-date-based versions) are\n   * not supported by this client. To use API version 2.1, please use version 3 of the Azure Form Recognizer SDK for\n   * JavaScript (\\@azure/ai-form-recognizer\\@^3.2.0).\n   *\n   * Default: FormRecognizerApiVersion.Stable (\"2022-08-31\")\n   */\n  apiVersion?: FormRecognizerApiVersion;\n}\n\n/**\n * Configurable options for DocumentAnalysisClient.\n */\nexport interface DocumentAnalysisClientOptions extends FormRecognizerCommonClientOptions {\n  /**\n   * The unit of string offset/length values that the service returns.\n   *\n   * In JavaScript, strings are indexed by UTF-16 code units. Do _NOT_ set this value unless you are certain you need\n   * Unicode code-point units instead.\n   *\n   * Default: \"utf16CodeUnit\"\n   */\n  stringIndexType?: StringIndexType;\n}\n\n/**\n * Configurable options for DocumentModelAdministrationClient.\n */\nexport interface DocumentModelAdministrationClientOptions\n  extends FormRecognizerCommonClientOptions {}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\nimport { createFormRecognizerAzureKeyCredentialPolicy } from \"./azureKeyCredentialPolicy\";\nimport { DEFAULT_COGNITIVE_SCOPE } from \"./constants\";\nimport { GeneratedClient, GeneratedClientOptionalParams } from \"./generated\";\nimport { DEFAULT_GENERATED_CLIENT_OPTIONS } from \"./options/FormRecognizerClientOptions\";\n\nimport * as Mappers from \"./generated/models/mappers\";\nimport { createSerializer } from \"@azure/core-client\";\nexport { Mappers };\n\n// This is used for URL request processing.\nexport const SERIALIZER = createSerializer(Mappers, false);\n\n/** @internal */\nexport const identity = <T>(x: T): T => x;\n\n/**\n * Type-strong uncapitalization.\n * @internal\n */\nexport const uncapitalize = <S extends string = string>(s: string): Uncapitalize<S> =>\n  (s.substring(0, 1).toLowerCase() + s.substring(1)) as Uncapitalize<S>;\n\n/**\n * Type-strong capitalization\n * @internal\n */\nexport const capitalize = <S extends string = string>(s: S): Capitalize<S> =>\n  (s.substring(0, 1).toUpperCase() + s.substring(1)) as Capitalize<S>;\n\n/**\n * Tests if a string looks like it begins with an acronym, i.e. it starts with two capital letters.\n * @internal\n */\nexport const isAcronymic = (s: string): boolean => {\n  return /^[A-Z][A-Z]/.test(s);\n};\n\n/**\n * Map an optional value through a function\n * @internal\n */\nexport const maybemap = <T1, T2>(value: T1 | undefined, f: (v: T1) => T2): T2 | undefined =>\n  value === undefined ? undefined : f(value);\n\n/**\n * Create a GeneratedClient.\n * @internal\n */\nexport function makeServiceClient(\n  endpoint: string,\n  credential: KeyCredential | TokenCredential,\n  options: GeneratedClientOptionalParams\n): GeneratedClient {\n  const client = new GeneratedClient(endpoint?.replace(/\\/$/, \"\"), {\n    ...DEFAULT_GENERATED_CLIENT_OPTIONS,\n    ...options,\n  });\n\n  const authPolicy = isTokenCredential(credential)\n    ? bearerTokenAuthenticationPolicy({\n        credential,\n        scopes: DEFAULT_COGNITIVE_SCOPE,\n      })\n    : createFormRecognizerAzureKeyCredentialPolicy(credential);\n\n  client.pipeline.addPolicy(authPolicy);\n\n  return client;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { DocumentSpan } from \"..\";\n\nimport { AddressValue, CurrencyValue, DocumentField as GeneratedDocumentField } from \"../generated\";\nimport { toBoundingRegions } from \"../transforms/polygon\";\nimport { capitalize } from \"../util\";\nimport { BoundingRegion } from \"./documentElements\";\n\n/**\n * Fields that are common to all DocumentField variants.\n */\nexport interface DocumentFieldCommon {\n  /**\n   * The verbatim extracted text content of the field.\n   */\n  content?: string;\n\n  /**\n   * Bounding regions covering the field.\n   */\n  boundingRegions?: BoundingRegion[];\n\n  /**\n   * Confidence of correctly extracting the field.\n   */\n  confidence?: number;\n\n  /**\n   * Location of the field in the reading order concatenated content.\n   */\n  spans?: DocumentSpan[];\n}\n\n/**\n * A simple field that has a primitive value, such as a string, number etc.\n */\nexport interface DocumentValueField<T> extends DocumentFieldCommon {\n  /**\n   * The field's value, which has the type specified in the field's schema.\n   */\n  value?: T;\n}\n\n/**\n * An extracted field. The `kind` property identifies (discriminates) the type of the `DocumentField`.\n */\nexport type DocumentField =\n  | DocumentStringField\n  | DocumentDateField\n  | DocumentTimeField\n  | DocumentPhoneNumberField\n  | DocumentNumberField\n  | DocumentIntegerField\n  | DocumentSelectionMarkField\n  | DocumentCountryRegionField\n  | DocumentSignatureField\n  | DocumentCurrencyField\n  | DocumentAddressField\n  | DocumentArrayField\n  | DocumentObjectField;\n\n/**\n * A DocumentField that has a string value.\n */\nexport interface DocumentStringField<Value extends string = string>\n  extends DocumentValueField<Value> {\n  /** Field kind: \"string\". */\n  kind: \"string\";\n}\n\n/**\n * A DocumentField that has a Date value.\n */\nexport interface DocumentDateField extends DocumentValueField<Date> {\n  /** Field kind: \"date\". */\n  kind: \"date\";\n}\n\n/**\n * A DocumentField that has a time value, represented as a string.\n */\nexport interface DocumentTimeField extends DocumentFieldCommon {\n  /** Field kind: \"time\". */\n  kind: \"time\";\n  /**\n   * The field's value, which is a time in \"HH:MM:SS\" (ISO 8601) format.\n   */\n  value?: string;\n}\n\n/**\n * A DocumentField that has a phone number value, represented as a string.\n */\nexport interface DocumentPhoneNumberField extends DocumentFieldCommon {\n  /** Field kind: \"phoneNumber\". */\n  kind: \"phoneNumber\";\n  /**\n   * The field's value, which is a string containing the phone number.\n   *\n   * The phone number value is normalized to a standard format. If the value could not be normalized, this value may be\n   * undefined, and the `content` property will contain the verbatim text of the DocumentField as it appeared in the\n   * input.\n   */\n  value?: string;\n}\n\n/**\n * A DocumentField that has a number value.\n */\nexport interface DocumentNumberField extends DocumentValueField<number> {\n  /** Field kind: \"number\". */\n  kind: \"number\";\n}\n\n/**\n * A DocumentField that has an integer value.\n */\nexport interface DocumentIntegerField extends DocumentValueField<number> {\n  /** Field kind: \"integer\". */\n  kind: \"integer\";\n}\n\n/**\n * A DocumentField that is has a value indicating a selection mark state (such as a checkbox or radio button),\n * represented as a string.\n */\nexport interface DocumentSelectionMarkField extends DocumentFieldCommon {\n  /** Field kind: \"selectionMark\". */\n  kind: \"selectionMark\";\n  /**\n   * The state of the selection mark. One of:\n   *\n   * - \"selected\"\n   * - \"unselected\"\n   *\n   * This value may be undefined, and other variants may be introduced in the future.\n   */\n  value?: string;\n}\n\n/**\n * A DocumentField that has a value indicating a country or region, represented as a string.\n */\nexport interface DocumentCountryRegionField extends DocumentFieldCommon {\n  /** Field kind: \"countryRegion\". */\n  kind: \"countryRegion\";\n  /**\n   * The 3-letter country/region code (ISO 3166-1 alpha-3) of the extracted country or region.\n   */\n  value?: string;\n}\n\n/**\n * A DocumentField that indicates the state of a signature, represented as a string.\n */\nexport interface DocumentSignatureField extends DocumentFieldCommon {\n  /** Field kind: \"signature\". */\n  kind: \"signature\";\n  /**\n   * The state of the signature field. One of:\n   *\n   * - \"unsigned\"\n   * - \"signed\"\n   *\n   * This value may be undefined, and other variants may be introduced in the future.\n   */\n  value: \"signed\" | \"unsigned\";\n}\n\n/**\n * A DocumentField that consists of an array of nested fields. All fields in the array will have the same type.\n */\nexport interface DocumentArrayField<T = DocumentField> extends DocumentFieldCommon {\n  /** Field kind: \"array\". */\n  kind: \"array\";\n\n  /**\n   * The extracted members of the array field.\n   */\n  values: T[];\n}\n\n/**\n * A DocumentField that describes an amount of a certain currency.\n */\nexport interface DocumentCurrencyField extends DocumentFieldCommon {\n  /** Field kind: \"currency\". */\n  kind: \"currency\";\n\n  /**\n   * The properties of the extracted currency.\n   */\n  value?: CurrencyValue;\n}\n\n/**\n * A document field that describes a structured physical address.\n */\nexport interface DocumentAddressField extends DocumentFieldCommon {\n  /** Field kind: \"address\". */\n  kind: \"address\";\n\n  /**\n   * The properties of the extracted address.\n   */\n  value?: AddressValue;\n}\n\n/**\n * A DocumentField that consists of several named properties that have their own DocumentField values.\n */\nexport interface DocumentObjectField<Properties = { [k: string]: DocumentField | undefined }>\n  extends DocumentFieldCommon {\n  /** Field kind: \"object\". */\n  kind: \"object\";\n\n  /**\n   * The extracted object properties. Each property of this object is, itself, a nested DocumentField.\n   */\n  properties: Properties;\n}\n\n/**\n * Convert a record of generated fields to a record of strongly-typed fields.\n * @internal\n * @param fields - a map of field names to generated field values\n * @returns - an object with the same keys, where all values have been mapped to DocumentFields\n */\nexport function toAnalyzedDocumentFieldsFromGenerated(fields: {\n  [k: string]: GeneratedDocumentField;\n}): { [k: string]: DocumentField } {\n  return Object.entries(fields ?? {}).reduce((transformedFields, [name, value]) => {\n    transformedFields[name] = toDocumentField(value);\n    return transformedFields;\n  }, {} as { [k: string]: DocumentField });\n}\n\n/**\n * Convert a generated document field into a strong TypeScriptified document field.\n * @internal\n */\nexport function toDocumentField(field: GeneratedDocumentField): DocumentField {\n  const kind = field.type as DocumentField[\"kind\"];\n\n  const value: Omit<DocumentField, keyof DocumentFieldCommon | \"kind\"> = (() => {\n    switch (kind) {\n      // Almost all value kinds are represented as simple elemental values\n      case \"string\":\n      case \"date\":\n      case \"time\":\n      case \"phoneNumber\":\n      case \"number\":\n      case \"integer\":\n      case \"selectionMark\":\n      case \"countryRegion\":\n      case \"signature\":\n      case \"currency\":\n      case \"address\":\n        return {\n          value:\n            field[\n              (\"value\" + capitalize(kind)) as Extract<\n                keyof GeneratedDocumentField,\n                `value${string}`\n              >\n            ],\n        };\n      case \"array\":\n        return { values: field.valueArray?.map((v) => toDocumentField(v) ?? []) };\n      case \"object\":\n        return { properties: toAnalyzedDocumentFieldsFromGenerated(field.valueObject ?? {}) };\n      default:\n        // Exhaustiveness check\n        // eslint-disable-next-line no-case-declarations\n        const __exhaust: never = kind;\n        throw new Error(`Unrecognized DocumentField type: ${__exhaust}`);\n    }\n  })();\n\n  return {\n    kind,\n    ...value,\n    boundingRegions: toBoundingRegions(field.boundingRegions),\n    content: field.content,\n    spans: field.spans,\n    confidence: field.confidence,\n  } as DocumentField;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PollOperationState, PollerLike } from \"@azure/core-lro\";\nimport { FormRecognizerError } from \"../error\";\nimport {\n  AnalyzeResult as GeneratedAnalyzeResult,\n  AnalyzeResultOperation,\n  AnalyzeResultOperationStatus as AnalyzeOperationStatus,\n  DocumentLanguage,\n  DocumentSpan,\n  DocumentStyle,\n} from \"../generated\";\nimport { DocumentField, toAnalyzedDocumentFieldsFromGenerated } from \"../models/fields\";\nimport { FormRecognizerApiVersion, PollerOptions } from \"../options\";\nimport { AnalyzeDocumentOptions } from \"../options/AnalyzeDocumentsOptions\";\nimport {\n  toBoundingPolygon,\n  toBoundingRegions,\n  toDocumentTableFromGenerated,\n  toKeyValuePairFromGenerated,\n} from \"../transforms/polygon\";\nimport {\n  BoundingRegion,\n  DocumentTable,\n  DocumentKeyValuePair,\n  DocumentPage,\n  DocumentLine,\n  DocumentParagraph,\n} from \"../models/documentElements\";\nimport {\n  Document as GeneratedDocument,\n  DocumentPage as GeneratedDocumentPage,\n  DocumentLine as GeneratedDocumentLine,\n} from \"../generated\";\n\n/**\n * A request input that can be uploaded as binary data to the Form Recognizer service. Form Recognizer treats `string`\n * inputs as URLs, so to send a string as a _binary_ input, first convert the string to one of the following input\n * types.\n */\nexport type FormRecognizerRequestBody =\n  | NodeJS.ReadableStream\n  | Blob\n  | ArrayBuffer\n  | ArrayBufferView;\n\n/**\n * An extracted document object.\n *\n * An AnalyzedDocument is an instance of one of the document types within a model. Its fields correspond to the field\n * schema of the document type.\n */\nexport interface AnalyzedDocument {\n  /**\n   * The type of the document that was extracted. A model can have multiple document types (for example, in a composed\n   * model), so this property indicates which document type the fields of this document correspond to.\n   */\n  docType: string;\n\n  /**\n   * The extracted fields, which correspond to the document type's field schema.\n   */\n  fields: { [field: string]: DocumentField };\n\n  /**\n   * Bounding regions covering the document.\n   */\n  boundingRegions?: BoundingRegion[];\n\n  /**\n   * Locations of the document's elements in the `content` text (reading-order-concatenated content).\n   */\n  spans: DocumentSpan[];\n\n  /**\n   * The service's confidence that it has correctly extracted the document.\n   */\n  confidence: number;\n}\n\n/**\n * Transform a REST-level Document response object into the more strongly-typed AnalyzedDocument.\n *\n * @internal\n * @param document - a REST-level document response object\n * @returns an AnalyzedDocument (which has had its fields mapped to stronger DocumentField types)\n */\nexport function toAnalyzedDocumentFromGenerated(document: GeneratedDocument): AnalyzedDocument {\n  return {\n    ...document,\n    boundingRegions: toBoundingRegions(document.boundingRegions),\n    fields: toAnalyzedDocumentFieldsFromGenerated(document.fields ?? {}),\n  };\n}\n\n/**\n * The common fields of all AnalyzeResult-like types, such as LayoutResult, ReadResult, and GeneralDocumentResult.\n */\nexport interface AnalyzeResultCommon {\n  /**\n   * The service API version used to produce this result.\n   */\n  apiVersion: FormRecognizerApiVersion;\n\n  /**\n   * The unique ID of the model that was used to produce this result.\n   */\n  modelId: string;\n\n  /**\n   * A string representation of all textual and visual elements in the input, concatenated by reading order (the order\n   * in which the service \"reads\" or extracts the textual and visual content from the document).\n   */\n  content: string;\n}\n\n/**\n * The result of an analysis operation. The type of the Document may be determined by the model used to perform the\n * analysis.\n */\nexport interface AnalyzeResult<Document = AnalyzedDocument> extends AnalyzeResultCommon {\n  /**\n   * Extracted pages.\n   */\n  pages?: DocumentPage[];\n\n  /**\n   * Extracted tables.\n   */\n  tables?: DocumentTable[];\n\n  /**\n   * Extracted key-value pairs.\n   */\n  keyValuePairs?: DocumentKeyValuePair[];\n\n  /**\n   * Extracted text languages.\n   */\n  languages?: DocumentLanguage[];\n\n  /**\n   * Extracted font styles.\n   */\n  styles?: DocumentStyle[];\n\n  /**\n   * Extracted documents (instances of any of the model's document types and corresponding field schemas).\n   */\n  documents?: Document[];\n\n  /**\n   * Extracted document paragraphs.\n   */\n  paragraphs?: DocumentParagraph[];\n}\n\n/**\n * Tests if one span contains another, by testing that the outer span starts before or at the same character as the\n * inner span, and that the end position of the outer span is greater than or equal to the end position of the inner\n * span.\n *\n * @internal\n * @param outer - the outer (potentially containing) span\n * @param inner - the span to test if `outer` contains\n * @returns true if `inner` is contained inside of `outer`.\n */\nexport function contains(outer: DocumentSpan, inner: DocumentSpan): boolean {\n  return outer.offset <= inner.offset && outer.offset + outer.length >= inner.offset + inner.length;\n}\n\n/**\n * Make an empty generator. This might seem silly, but it's useful for satisfying invariants.\n */\nfunction* empty(): Generator<never> {\n  /* intentionally empty */\n}\n\n/**\n * Produces an iterator of the given items starting from the given index.\n *\n * @param items - the items to iterate over\n * @param idx - the index of the first item to begin iterating from\n */\nexport function* iterFrom<T>(items: T[], idx: number): Generator<T> {\n  let i = idx;\n\n  while (i < items.length) {\n    yield items[i++];\n  }\n}\n\nexport function toDocumentLineFromGenerated(\n  generated: GeneratedDocumentLine,\n  page: GeneratedDocumentPage\n): DocumentLine {\n  (generated as DocumentLine).words = () =>\n    fastGetChildren(\n      iterFrom(generated.spans, 0),\n      page.words?.map((word) => {\n        return { ...word, polygon: toBoundingPolygon(word.polygon) };\n      }) ?? []\n    );\n\n  (generated as DocumentLine).polygon = toBoundingPolygon(generated.polygon);\n\n  Object.defineProperty(generated, \"words\", {\n    enumerable: false,\n  });\n\n  return generated as DocumentLine;\n}\n\nexport function toDocumentPageFromGenerated(generated: GeneratedDocumentPage): DocumentPage {\n  return {\n    ...generated,\n    lines: generated.lines?.map((line) => toDocumentLineFromGenerated(line, generated)),\n    selectionMarks: generated.selectionMarks?.map((mark) => ({\n      ...mark,\n      polygon: toBoundingPolygon(mark.polygon),\n    })),\n    words: generated.words?.map((word) => ({\n      ...word,\n      polygon: toBoundingPolygon(word.polygon),\n    })),\n  };\n}\n\n/**\n * Binary search through an array of items to find the first item that could possibly be contained by the given span,\n * then return an iterator beginning from that item.\n *\n * This allows a program to quickly find the first relevant item in the array for consideration when testing for span\n * inclusion.\n *\n * @internal\n * @param span - the span to use when testing each individual item\n * @param items - an array of items to binary search through\n * @returns an iterator beginning from the item identified by the search\n */\nexport function iteratorFromFirstMatchBinarySearch<Spanned extends { span: DocumentSpan }>(\n  span: DocumentSpan,\n  items: Spanned[]\n): IterableIterator<Spanned> {\n  let idx = Math.floor(items.length / 2);\n  let prevIdx = idx;\n  let min = 0;\n  let max = items.length;\n\n  const found = (): boolean =>\n    // The item is found if it starts after the current span and the item before it does not. That means it is the first\n    // item in the array that could be a child if the spans are sorted.\n    items[idx].span.offset >= span.offset && (items[idx - 1]?.span?.offset ?? -1) < span.offset;\n\n  // Binary search to find the first element that could be a child\n  do {\n    if (found()) {\n      return iterFrom(items, idx);\n    } else if (span.offset > items[idx].span.offset) {\n      min = prevIdx = idx;\n      idx = Math.floor(idx + (max - idx) / 2);\n    } else {\n      max = prevIdx = idx;\n      idx = Math.floor(idx - (idx - min) / 2);\n    }\n  } while (idx !== prevIdx);\n\n  // This might seem weird, but it's a simple way to make the types a little more elegant.\n  return empty();\n}\n\n/**\n * This fast algorithm tests the elements of `childArray` for inclusion in any of the given `spans`, assuming that both\n * the spans and child items are sorted.\n *\n * INVARIANT: the items in both the `spans` iterator and `childrenArray` MUST BE SORTED INCREASING by span _offset_.\n *\n * @internal\n * @param spans - the spans that contain the child elements\n * @param childrenArray - an array of child items (items that have spans) to test for inclusion in the spans\n * @returns - an IterableIterator of child items that are included in any span in the `spans` iterator\n */\nexport function* fastGetChildren<Spanned extends { span: DocumentSpan }>(\n  spans: Iterator<DocumentSpan>,\n  childrenArray: Spanned[]\n): Generator<Spanned> {\n  let curSpan = spans.next();\n\n  // Need to exit early if there are no spans.\n  if (curSpan.done) {\n    return;\n  }\n\n  const children = iteratorFromFirstMatchBinarySearch(curSpan.value as DocumentSpan, childrenArray);\n  let curChild = children.next();\n\n  while (!(curChild.done || curSpan.done)) {\n    if (contains(curSpan.value, curChild.value.span)) {\n      // The span is contained, so yield the current child and advance it.\n      yield curChild.value;\n      curChild = children.next();\n    } else if (curSpan.value.offset + curSpan.value.length < curChild.value.span.offset) {\n      // The current span ends before the next potential child starts, so advance the span\n      curSpan = spans.next();\n    } else {\n      // The current child was not contained in the current span, so advance to the next child.\n      curChild = children.next();\n    }\n  }\n}\n\n/**\n * The state of an analysis operation, which will eventually produce the result type that corresponds to the model.\n */\nexport interface DocumentAnalysisPollOperationState<Result = AnalyzeResult<AnalyzedDocument>>\n  extends PollOperationState<Result> {\n  /**\n   * The status of the operation. One of:\n   *\n   * - \"notStarted\"\n   * - \"running\"\n   * - \"succeeded\"\n   * - \"failed\"\n   */\n  status: AnalyzeOperationStatus;\n\n  /**\n   * The model ID that the analysis operation will use to produce the result.\n   */\n  modelId: string;\n\n  /**\n   * The URL to the operation.\n   */\n  operationLocation: string;\n\n  /**\n   * The Date and Time that the operation was created.\n   */\n  createdOn: Date;\n\n  /**\n   * The date & time that the operation state was last modified.\n   */\n  lastUpdatedOn: Date;\n}\n\n/**\n * A long-running operation (poller) that tracks the state of an analysis operation, eventually producing the result\n * type that corresponds to the model.\n */\nexport type AnalysisPoller<Result = AnalyzeResult<AnalyzedDocument>> = PollerLike<\n  DocumentAnalysisPollOperationState<Result>,\n  Result\n>;\n\n/**\n * Convert a generated AnalyzeResult into a convenience layer AnalyzeResult.\n * @internal\n */\nexport function toAnalyzeResultFromGenerated(result: GeneratedAnalyzeResult): AnalyzeResult {\n  return {\n    apiVersion: result.apiVersion as FormRecognizerApiVersion,\n    modelId: result.modelId,\n    content: result.content,\n    pages: result.pages.map((page) => toDocumentPageFromGenerated(page)),\n    tables: result.tables?.map((table) => toDocumentTableFromGenerated(table)),\n    keyValuePairs: result.keyValuePairs?.map((pair) => toKeyValuePairFromGenerated(pair)),\n    languages: result.languages,\n    styles: result.styles,\n    paragraphs: result.paragraphs?.map((para) => ({\n      ...para,\n      boundingRegions: toBoundingRegions(para.boundingRegions),\n    })),\n    documents: result.documents?.map(toAnalyzedDocumentFromGenerated),\n  };\n}\n\n/**\n * Defines an analysis operation by the initial request model ID, poller options, and a transform to apply to the\n * eventual result,\n *\n * @internal\n */\nexport interface AnalysisOperationDefinition<Result = AnalyzeResult> {\n  transformResult: (primitiveResult: GeneratedAnalyzeResult) => Result;\n  initialModelId: string;\n  options: PollerOptions<DocumentAnalysisPollOperationState<Result>> &\n    AnalyzeDocumentOptions<Result>;\n}\n\n/**\n * Converts an AnalyzeResultOperation (LRO response) to a DocumentAnalysisPollOperationState\n * @internal\n */\nexport function toDocumentAnalysisPollOperationState<Result>(\n  definition: AnalysisOperationDefinition<Result>,\n  modelId: string,\n  operationLocation: string,\n  response: AnalyzeResultOperation\n): DocumentAnalysisPollOperationState<Result> {\n  return {\n    status: response.status,\n    modelId: modelId,\n    lastUpdatedOn: response.lastUpdatedOn,\n    createdOn: response.createdOn,\n    operationLocation,\n    result: response.analyzeResult && definition.transformResult(response.analyzeResult),\n    error: response.error && new FormRecognizerError(response.error),\n    isCancelled: false, // Not supported\n    isStarted: response.status !== \"notStarted\",\n    isCompleted: response.status === \"succeeded\",\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { maybemap } from \"../../util\";\n\ntype CancellationToken = Parameters<typeof clearTimeout>[0];\n\nconst INTERRUPTED = \"The local operation (timer) was interrupted or cancelled.\";\n\n/**\n * A PromiseLike object that supports cancellation.\n * @internal\n */\nexport interface CancelablePromiseLike<T> extends PromiseLike<T> {\n  /**\n   * Cancel the promise (cause it to reject).\n   */\n  cancel(): void;\n}\n\n/**\n * A promise that delays resolution until a certain amount of time (in milliseconds) has passed, with facilities for\n * robust cancellation.\n *\n * ### Example:\n *\n * ```javascript\n * let toCancel;\n *\n * // Wait 20 seconds, and optionally allow the function to be cancelled.\n * await delayMs(20000, (cancel) => { toCancel = cancel });\n *\n * // ... if `toCancel` is called before the 20 second timer expires, then the delayMs promise will reject.\n * ```\n *\n * @internal\n * @param ms - the number of milliseconds to wait before resolving\n * @param cb - a callback that can provide the caller with a cancellation function\n */\nexport function delayMs(ms: number): CancelablePromiseLike<void> {\n  let aborted = false;\n  let toReject: (() => void) | undefined;\n\n  return Object.assign(\n    new Promise<void>((resolve, reject) => {\n      let token: CancellationToken | undefined;\n      toReject = () => {\n        maybemap(token, clearTimeout);\n        reject(INTERRUPTED);\n      };\n\n      // In the rare case that the operation is _already_ aborted, we will reject instantly. This could happen, for\n      // example, if the user calls the cancellation function immediately without yielding execution.\n      if (aborted) {\n        toReject();\n      } else {\n        token = setTimeout(resolve, ms);\n      }\n    }),\n    {\n      cancel: () => {\n        aborted = true;\n        toReject?.();\n      },\n    }\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PollOperationState, PollerLike } from \"@azure/core-lro\";\nimport { delayMs } from \"./delayMs\";\n\nconst DEFAULT_POLLING_INTERVAL = 5000;\n\n/**\n * A specification for a long-running operation, which defines the poller flow.\n * @internal\n */\nexport interface OperationSpec<TState extends PollOperationState<unknown>> {\n  /**\n   * A function that produces the first operation state for this LRO.\n   */\n  init: () => Promise<TState>;\n  /**\n   * A function that consumes the existing state of the poller and produces the next state.\n   */\n  poll: (state: TState) => Promise<TState>;\n  /**\n   * A function that serializes the state into a string.\n   */\n  serialize: (state: TState) => string;\n}\n\n/**\n * Uniform poller implementation, creates a poller based on a PollerSpec.\n *\n * @internal\n */\nexport async function lro<TResult, TState extends PollOperationState<TResult>>(\n  spec: OperationSpec<TState>,\n  pollingInterval: number | undefined\n): Promise<PollerLike<TState, TResult>> {\n  let state = typeof spec.init === \"function\" ? await spec.init() : spec.init;\n\n  type ThisPoller = PollerLike<TState, TResult>;\n\n  // Job handling. If `job` is defined, then there is an active `pollUntilDone` call on this poller.\n  // Call `cancelJob` to interrupt the polling loop (awaiters will throw).\n  let job: Promise<TResult> | undefined;\n  let cancelJob: (() => void) | undefined;\n\n  // Progress handlers\n  type Handler = (state: TState) => void;\n  const handlers = new Map<symbol, Handler>();\n  const handleProgressEvents = async (): Promise<void> => handlers.forEach((h) => h(state));\n\n  const self: ThisPoller = {\n    onProgress: (callback: (state: TState) => void) => {\n      const s = Symbol();\n      handlers.set(s, callback);\n      return () => handlers.delete(s);\n    },\n    stopPolling: () => cancelJob?.(),\n    poll: async () => {\n      state = await spec.poll(state);\n      handleProgressEvents();\n    },\n    pollUntilDone: () =>\n      (job ??= (async () => {\n        // Technically, the poller could complete during initialization\n        if (!self.isDone()) {\n          // Poll once to get the ball rolling, this avoids a delay if the operation completes immediately\n          await self.poll();\n          while (!self.isDone()) {\n            const delay = delayMs(pollingInterval ?? DEFAULT_POLLING_INTERVAL);\n            cancelJob = delay.cancel;\n            await delay.then(() => self.poll());\n          }\n        }\n        const result = self.getResult();\n\n        // The state says it's done, so we know we are in either a success case, an error case, or an _internal_ error.\n        if (result !== undefined) return result;\n        else if (state.error !== undefined) throw state.error;\n        // Unreachable\n        else {\n          throw new Error(\n            `Internal Client Error: analysis poller completed without success or error: ${state}`\n          );\n        }\n      })().finally(() => {\n        job = undefined;\n      })),\n    // The poller is stopped if there is no job running\n    isStopped: () => !!job,\n    // The operation is complete if either a result or error is produced\n    isDone: () => !!state.result || !!state.error,\n    // In FR, all operations run to completion\n    cancelOperation() {\n      throw new Error(\"The Azure Form Recognizer service does not support operation cancellation.\");\n    },\n    getOperationState: () => state,\n    getResult: () => state.result,\n    toString: () => spec.serialize(state),\n  };\n\n  return self;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport { createTracingClient } from \"@azure/core-tracing\";\nimport { TracingClient } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"./constants\";\nimport {\n  AnalyzeDocumentRequest,\n  AnalyzeResultOperation,\n  ContentType,\n  GeneratedClient,\n} from \"./generated\";\nimport { accept1 } from \"./generated/models/parameters\";\nimport {\n  AnalysisOperationDefinition,\n  AnalysisPoller,\n  AnalyzeResult,\n  DocumentAnalysisPollOperationState,\n  FormRecognizerRequestBody,\n  toAnalyzeResultFromGenerated,\n  toDocumentAnalysisPollOperationState,\n} from \"./lro/analysis\";\nimport { lro } from \"./lro/util/poller\";\nimport { AnalyzeDocumentOptions } from \"./options/AnalyzeDocumentsOptions\";\nimport {\n  DEFAULT_GENERATED_CLIENT_OPTIONS,\n  DocumentAnalysisClientOptions,\n  FormRecognizerApiVersion,\n} from \"./options/FormRecognizerClientOptions\";\nimport { DocumentModel } from \"./documentModel\";\nimport { makeServiceClient, Mappers, SERIALIZER } from \"./util\";\n\n/**\n * A client for interacting with the Form Recognizer service's analysis features.\n *\n * ### Examples:\n *\n * The Form Recognizer service and clients support two means of authentication:\n *\n * #### Azure Active Directory\n *\n * ```javascript\n * import { DocumentAnalysisClient } from \"@azure/ai-form-recognizer\";\n * import { DefaultAzureCredential } from \"@azure/identity\";\n *\n * const endpoint = \"https://<resource name>.cognitiveservices.azure.com\";\n * const credential = new DefaultAzureCredential();\n *\n * const client = new DocumentAnalysisClient(endpoint, credential);\n * ```\n *\n * #### API Key (Subscription Key)\n *\n * ```javascript\n * import { DocumentAnalysisClient, AzureKeyCredential } from \"@azure/ai-form-recognizer\";\n *\n * const endpoint = \"https://<resource name>.cognitiveservices.azure.com\";\n * const credential = new AzureKeyCredential(\"<api key>\");\n *\n * const client = new DocumentAnalysisClient(endpoint, credential);\n * ```\n */\nexport class DocumentAnalysisClient {\n  private _restClient: GeneratedClient;\n  private _tracing: TracingClient;\n  private _apiVersion: FormRecognizerApiVersion;\n\n  /**\n   * Create a `DocumentAnalysisClient` instance from a resource endpoint and a an Azure Identity `TokenCredential`.\n   *\n   * See the [`@azure/identity`](https://npmjs.com/package/\\@azure/identity) package for more information about\n   * authenticating with Azure Active Directory.\n   *\n   * ### Example:\n   *\n   * ```javascript\n   * import { DocumentAnalysisClient } from \"@azure/ai-form-recognizer\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * const endpoint = \"https://<resource name>.cognitiveservices.azure.com\";\n   * const credential = new DefaultAzureCredential();\n   *\n   * const client = new DocumentAnalysisClient(endpoint, credential);\n   * ```\n   *\n   * @param endpoint - the endpoint URL of an Azure Cognitive Services instance\n   * @param credential - a TokenCredential instance from the `@azure/identity` package\n   * @param options - optional settings for configuring all methods in the client\n   */\n  public constructor(\n    endpoint: string,\n    credential: TokenCredential,\n    options?: DocumentAnalysisClientOptions\n  );\n  /**\n   * Create a `DocumentAnalysisClient` instance from a resource endpoint and a static API key (`KeyCredential`),\n   *\n   * ### Example:\n   *\n   * ```javascript\n   * import { DocumentAnalysisClient, AzureKeyCredential } from \"@azure/ai-form-recognizer\";\n   *\n   * const endpoint = \"https://<resource name>.cognitiveservices.azure.com\";\n   * const credential = new AzureKeyCredential(\"<api key>\");\n   *\n   * const client = new DocumentAnalysisClient(endpoint, credential);\n   * ```\n   *\n   * @param endpoint - the endpoint URL of an Azure Cognitive Services instance\n   * @param credential - a KeyCredential containing the Cognitive Services instance subscription key\n   * @param options - optional settings for configuring all methods in the client\n   */\n  public constructor(\n    endpoint: string,\n    credential: KeyCredential,\n    options?: DocumentAnalysisClientOptions\n  );\n  /**\n   * @hidden\n   */\n  public constructor(\n    endpoint: string,\n    credential: KeyCredential | TokenCredential,\n    options?: DocumentAnalysisClientOptions\n  );\n  public constructor(\n    endpoint: string,\n    credential: KeyCredential | TokenCredential,\n    options: DocumentAnalysisClientOptions = {}\n  ) {\n    this._restClient = makeServiceClient(endpoint, credential, options);\n    this._tracing = createTracingClient({\n      packageName: \"@azure/ai-form-recognizer\",\n      packageVersion: SDK_VERSION,\n      namespace: \"Microsoft.CognitiveServices\",\n    });\n\n    this._apiVersion = options.apiVersion ?? DEFAULT_GENERATED_CLIENT_OPTIONS.apiVersion;\n  }\n\n  // #region Analysis\n\n  /**\n   * Extract data from an input using a model given by its unique ID.\n   *\n   * This operation supports custom as well as prebuilt models. For example, to use the prebuilt invoice model, provide\n   * the model ID \"prebuilt-invoice\", or to use the simpler prebuilt layout model, provide the model ID\n   * \"prebuilt-layout\".\n   *\n   * The fields produced in the `AnalyzeResult` depend on the model that is used for analysis, and the values in any\n   * extracted documents' fields depend on the document types in the model (if any) and their corresponding field\n   * schemas.\n   *\n   * ### Examples\n   *\n   * This method supports streamable request bodies ({@link FormRecognizerRequestBody}) such as Node.JS `ReadableStream`\n   * objects, browser `Blob`s, and `ArrayBuffer`s. The contents of the body will be uploaded to the service for analysis.\n   *\n   * ```javascript\n   * import * as fs from \"fs\";\n   *\n   * const file = fs.createReadStream(\"path/to/receipt.pdf\");\n   *\n   * // The model that is passed to the following function call determines the type of the eventual result. In the\n   * // example, we will use the prebuilt receipt model, but you could use a custom model ID/name instead.\n   * const poller = await client.beginAnalyzeDocument(\"prebuilt-receipt\", file);\n   *\n   * // The result is a long-running operation (poller), which must itself be polled until the operation completes\n   * const {\n   *   pages, // pages extracted from the document, which contain lines and words\n   *   tables, // extracted tables, organized into cells that contain their contents\n   *   styles, // text styles (ex. handwriting) that were observed in the document\n   *   keyValuePairs, // extracted pairs of elements  (directed associations from one element in the input to another)\n   *   entities, // extracted entities in the input's content, which are categorized (ex. \"Location\" or \"Organization\")\n   *   documents // extracted documents (instances of one of the model's document types and its field schema)\n   * } = await poller.pollUntilDone();\n   *\n   * // Extract the fields of the first document. These fields constitute a receipt, because we used the receipt model\n   * const [{ fields: receipt }] = documents;\n   *\n   * // The fields correspond to the model's document types and their field schemas. Refer to the Form Recognizer\n   * // documentation for information about the document types and field schemas within a model, or use the `getModel`\n   * // operation to view this information programmatically.\n   * console.log(\"The type of this receipt is:\", receipt?.[\"ReceiptType\"]?.value);\n   * ```\n   *\n   *\n   * @param modelId - the unique ID (name) of the model within this client's resource\n   * @param document - a {@link FormRecognizerRequestBody} that will be uploaded with the request\n   * @param options - optional settings for the analysis operation and poller\n   * @returns a long-running operation (poller) that will eventually produce an `AnalyzeResult`\n   */\n  public async beginAnalyzeDocument(\n    modelId: string,\n    document: FormRecognizerRequestBody,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: AnalyzeDocumentOptions\n  ): Promise<AnalysisPoller>;\n  /**\n   * Extract data from an input using a model that has a known, strongly-typed document schema (a {@link DocumentModel}).\n   *\n   * The fields produced in the `AnalyzeResult` depend on the model that is used for analysis. In TypeScript, the type\n   * of the result for this method overload is inferred from the type of the input `DocumentModel`.\n   *\n   * ### Examples\n   *\n   * This method supports streamable request bodies ({@link FormRecognizerRequestBody}) such as Node.JS `ReadableStream`\n   * objects, browser `Blob`s, and `ArrayBuffer`s. The contents of the body will be uploaded to the service for analysis.\n   *\n   * ```typescript\n   * import * as fs from \"fs\";\n   *\n   * // See the `prebuilt` folder in the SDK samples (http://aka.ms/azsdk/formrecognizer/js/samples) for examples of\n   * // DocumentModels for known prebuilts.\n   * import { PrebuiltReceiptModel } from \"./prebuilt-receipt.ts\";\n   *\n   * const file = fs.createReadStream(\"path/to/receipt.pdf\");\n   *\n   * // The model that is passed to the following function call determines the type of the eventual result. In the\n   * // example, we will use the prebuilt receipt model.\n   * const poller = await client.beginAnalyzeDocument(PrebuiltReceiptModel, file);\n   *\n   * // The result is a long-running operation (poller), which must itself be polled until the operation completes\n   * const {\n   *   pages, // pages extracted from the document, which contain lines and words\n   *   tables, // extracted tables, organized into cells that contain their contents\n   *   styles, // text styles (ex. handwriting) that were observed in the document\n   *   keyValuePairs, // extracted pairs of elements  (directed associations from one element in the input to another)\n   *\n   *   documents // extracted documents (instances of one of the model's document types and its field schema)\n   * } = await poller.pollUntilDone();\n   *\n   * // Extract the fields of the first document. These fields constitute a receipt, because we used the receipt model\n   * const [{ fields: receipt }] = documents;\n   *\n   * // Since we used the strongly-typed PrebuiltReceiptModel object instead of the \"prebuilt-receipt\" model ID\n   * // string, the fields of the receipt are strongly-typed and have camelCase names (as opposed to PascalCase).\n   * console.log(\"The type of this receipt is:\", receipt.receiptType?.value);\n   * ```\n   *\n   * @param model - a {@link DocumentModel} representing the model to use for analysis and the expected output type\n   * @param document - a {@link FormRecognizerRequestBody} that will be uploaded with the request\n   * @param options - optional settings for the analysis operation and poller\n   * @returns a long-running operation (poller) that will eventually produce an `AnalyzeResult` with documents that have\n   *          the result type associated with the input model\n   */\n  public async beginAnalyzeDocument<Result>(\n    model: DocumentModel<Result>,\n    document: FormRecognizerRequestBody,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: AnalyzeDocumentOptions<Result>\n  ): Promise<AnalysisPoller<Result>>;\n  public async beginAnalyzeDocument(\n    model: string | DocumentModel<unknown>,\n    document: FormRecognizerRequestBody,\n    options: AnalyzeDocumentOptions<unknown> = {}\n  ): Promise<AnalysisPoller<unknown>> {\n    return this._tracing.withSpan(\n      \"DocumentAnalysisClient.beginAnalyzeDocument\",\n      options,\n      this.analyze.bind(this, model, document)\n    );\n  }\n\n  /**\n   * Extract data from an input using a model given by its unique ID.\n   *\n   * This operation supports custom as well as prebuilt models. For example, to use the prebuilt invoice model, provide\n   * the model ID \"prebuilt-invoice\", or to use the simpler prebuilt layout model, provide the model ID\n   * \"prebuilt-layout\".\n   *\n   * The fields produced in the `AnalyzeResult` depend on the model that is used for analysis, and the values in any\n   * extracted documents' fields depend on the document types in the model (if any) and their corresponding field\n   * schemas.\n   *\n   * ### Examples\n   *\n   * This method supports extracting data from a file at a given URL. The Form Recognizer service will attempt to\n   * download a file using the submitted URL, so the URL must be accessible from the public internet. For example, a SAS\n   * token can be used to grant read access to a blob in Azure Storage, and the service will use the SAS-encoded URL to\n   * request the file.\n   *\n   * ```javascript\n   * // the URL must be publicly accessible\n   * const url = \"<receipt document url>\";\n   *\n   * // The model that is passed to the following function call determines the type of the eventual result. In the\n   * // example, we will use the prebuilt receipt model, but you could use a custom model ID/name instead.\n   * const poller = await client.beginAnalyzeDocument(\"prebuilt-receipt\", url);\n   *\n   * // The result is a long-running operation (poller), which must itself be polled until the operation completes\n   * const {\n   *   pages, // pages extracted from the document, which contain lines and words\n   *   tables, // extracted tables, organized into cells that contain their contents\n   *   styles, // text styles (ex. handwriting) that were observed in the document\n   *   keyValuePairs, // extracted pairs of elements  (directed associations from one element in the input to another)\n   *\n   *   documents // extracted documents (instances of one of the model's document types and its field schema)\n   * } = await poller.pollUntilDone();\n   *\n   * // Extract the fields of the first document. These fields constitute a receipt, because we used the receipt model\n   * const [{ fields: receipt }] = documents;\n   *\n   * // The fields correspond to the model's document types and their field schemas. Refer to the Form Recognizer\n   * // documentation for information about the document types and field schemas within a model, or use the `getModel`\n   * // operation to view this information programmatically.\n   * console.log(\"The type of this receipt is:\", receipt?.[\"ReceiptType\"]?.value);\n   * ```\n   *\n   * @param modelId - the unique ID (name) of the model within this client's resource\n   * @param documentUrl - a URL (string) to an input document accessible from the public internet\n   * @param options - optional settings for the analysis operation and poller\n   * @returns a long-running operation (poller) that will eventually produce an `AnalyzeResult`\n   */\n  public async beginAnalyzeDocumentFromUrl(\n    modelId: string,\n    documentUrl: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: AnalyzeDocumentOptions\n  ): Promise<AnalysisPoller>;\n  /**\n   * Extract data from an input using a model that has a known, strongly-typed document schema (a {@link DocumentModel}).\n   *\n   * The fields produced in the `AnalyzeResult` depend on the model that is used for analysis. In TypeScript, the type\n   * of the result for this method overload is inferred from the type of the input `DocumentModel`.\n   *\n   * ### Examples\n   *\n   * This method supports extracting data from a file at a given URL. The Form Recognizer service will attempt to\n   * download a file using the submitted URL, so the URL must be accessible from the public internet. For example, a SAS\n   * token can be used to grant read access to a blob in Azure Storage, and the service will use the SAS-encoded URL to\n   * request the file.\n   *\n   * ```typescript\n   * // See the `prebuilt` folder in the SDK samples (http://aka.ms/azsdk/formrecognizer/js/samples) for examples of\n   * // DocumentModels for known prebuilts.\n   * import { PrebuiltReceiptModel } from \"./prebuilt-receipt.ts\";\n   *\n   * // the URL must be publicly accessible\n   * const url = \"<receipt document url>\";\n   *\n   * // The model that is passed to the following function call determines the type of the eventual result. In the\n   * // example, we will use the prebuilt receipt model.\n   * const poller = await client.beginAnalyzeDocument(PrebuiltReceiptModel, url);\n   *\n   * // The result is a long-running operation (poller), which must itself be polled until the operation completes\n   * const {\n   *   pages, // pages extracted from the document, which contain lines and words\n   *   tables, // extracted tables, organized into cells that contain their contents\n   *   styles, // text styles (ex. handwriting) that were observed in the document\n   *   keyValuePairs, // extracted pairs of elements  (directed associations from one element in the input to another)\n   *\n   *   documents // extracted documents (instances of one of the model's document types and its field schema)\n   * } = await poller.pollUntilDone();\n   *\n   * // Extract the fields of the first document. These fields constitute a receipt, because we used the receipt model\n   * const [{ fields: receipt }] = documents;\n   *\n   * // Since we used the strongly-typed PrebuiltReceiptModel object instead of the \"prebuilt-receipt\" model ID\n   * // string, the fields of the receipt are strongly-typed and have camelCase names (as opposed to PascalCase).\n   * console.log(\"The type of this receipt is:\", receipt.receiptType?.value);\n   * ```\n   *\n   * @param model - a {@link DocumentModel} representing the model to use for analysis and the expected output type\n   * @param documentUrl - a URL (string) to an input document accessible from the public internet\n   * @param options - optional settings for the analysis operation and poller\n   * @returns a long-running operation (poller) that will eventually produce an `AnalyzeResult`\n   */\n  public async beginAnalyzeDocumentFromUrl<Result>(\n    model: DocumentModel<Result>,\n    documentUrl: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: AnalyzeDocumentOptions<Result>\n  ): Promise<AnalysisPoller<Result>>;\n  public async beginAnalyzeDocumentFromUrl(\n    model: string | DocumentModel<unknown>,\n    documentUrl: string,\n    options: AnalyzeDocumentOptions<unknown> = {}\n  ): Promise<AnalysisPoller<unknown>> {\n    return this._tracing.withSpan(\n      \"DocumentAnalysisClient.beginAnalyzeDocumentFromUrl\",\n      options,\n      this.analyze.bind(this, model, documentUrl)\n    );\n  }\n\n  /**\n   * A helper method for running analysis polymorphically.\n   * @internal\n   * @param model - the model ID or DocumentModel to use for analysis\n   * @param input - the string URL or request body to use\n   * @param options - analysis options\n   * @returns - an analysis poller\n   */\n  private analyze(\n    model: string | DocumentModel<unknown>,\n    input: string | FormRecognizerRequestBody,\n    options: AnalyzeDocumentOptions<unknown>\n  ) {\n    const {\n      modelId: initialModelId,\n      apiVersion: requestApiVersion,\n      transformResult,\n    } = typeof model === \"string\"\n      ? { modelId: model, apiVersion: undefined, transformResult: (v: AnalyzeResult) => v }\n      : model;\n\n    if (requestApiVersion && requestApiVersion !== this._apiVersion) {\n      throw new Error(\n        [\n          `API Version mismatch: the provided model wants version: ${requestApiVersion}, but the client is using ${this._apiVersion}.`,\n          \"The API version of the model must match the client's API version.\",\n        ].join(\"\\n\")\n      );\n    }\n\n    return this.createAnalysisPoller<unknown>(input, {\n      initialModelId,\n      options,\n      transformResult: (result) => transformResult(toAnalyzeResultFromGenerated(result)),\n    });\n  }\n\n  /**\n   * Create an LRO poller that handles analysis operations.\n   *\n   * This is the meat of all analysis polling operations.\n   *\n   * @param input - either a string for URL inputs or a FormRecognizerRequestBody to upload a file directly to the Form\n   *                Recognizer API\n   * @param definition - operation definition (initial model ID, operation transforms, request options)\n   * @returns - an analysis poller that produces the given return types according to the operation spec\n   */\n  private async createAnalysisPoller<Result>(\n    input: string | FormRecognizerRequestBody,\n    definition: AnalysisOperationDefinition<Result>\n  ): Promise<AnalysisPoller<Result>> {\n    const { resumeFrom } = definition.options;\n\n    // TODO: what should we do if resumeFrom.modelId is different from initialModelId?\n    // And what do we do with the redundant input??\n\n    const getAnalyzeResult = (operationLocation: string): Promise<AnalyzeResultOperation> =>\n      this._tracing.withSpan(\n        \"DocumentAnalysisClient.createAnalysisPoller-getAnalyzeResult\",\n        definition.options,\n        (finalOptions) =>\n          this._restClient.sendOperationRequest<AnalyzeResultOperation>(\n            {\n              options: finalOptions,\n            },\n            {\n              path: operationLocation,\n              httpMethod: \"GET\",\n              responses: {\n                200: {\n                  bodyMapper: Mappers.AnalyzeResultOperation,\n                },\n                default: {\n                  bodyMapper: Mappers.ErrorResponse,\n                },\n              },\n              // URL is fully-formed, so we don't need any query parameters\n              headerParameters: [accept1],\n              serializer: SERIALIZER,\n            }\n          )\n      );\n\n    const toInit =\n      // If the user gave us a stored token, we'll poll it again\n      resumeFrom !== undefined\n        ? async () =>\n            this._tracing.withSpan(\n              \"DocumentAnalysisClient.createAnalysisPoller-resume\",\n              definition.options,\n              async () => {\n                const { operationLocation, modelId } = JSON.parse(resumeFrom) as {\n                  operationLocation: string;\n                  modelId: string;\n                };\n\n                const result = await getAnalyzeResult(operationLocation);\n\n                return toDocumentAnalysisPollOperationState(\n                  definition,\n                  modelId,\n                  operationLocation,\n                  result\n                );\n              }\n            )\n        : // Otherwise, we'll start a new operation from the initialModelId\n          async () =>\n            this._tracing.withSpan(\n              \"DocumentAnalysisClient.createAnalysisPoller-start\",\n              definition.options,\n              async () => {\n                const [contentType, analyzeRequest] = toAnalyzeRequest(input);\n\n                const { operationLocation } = await this._restClient.analyzeDocument(\n                  definition.initialModelId,\n                  contentType as any,\n                  {\n                    ...definition.options,\n                    analyzeRequest,\n                  }\n                );\n\n                if (operationLocation === undefined) {\n                  throw new Error(\n                    \"Unable to start analysis operation: no Operation-Location received.\"\n                  );\n                }\n\n                const result = await getAnalyzeResult(operationLocation);\n\n                return toDocumentAnalysisPollOperationState(\n                  definition,\n                  definition.initialModelId,\n                  operationLocation,\n                  result\n                );\n              }\n            );\n\n    const poller = await lro<Result, DocumentAnalysisPollOperationState<Result>>(\n      {\n        init: toInit,\n        poll: async ({ operationLocation, modelId }) =>\n          this._tracing.withSpan(\n            \"DocumentAnalysisClient.createAnalysisPoller-poll\",\n            {},\n            async () => {\n              const result = await getAnalyzeResult(operationLocation);\n\n              return toDocumentAnalysisPollOperationState(\n                definition,\n                modelId,\n                operationLocation,\n                result\n              );\n            }\n          ),\n        serialize: ({ operationLocation, modelId }) =>\n          JSON.stringify({ modelId, operationLocation }),\n      },\n      definition.options.updateIntervalInMs\n    );\n\n    if (definition.options.onProgress !== undefined) {\n      poller.onProgress(definition.options.onProgress);\n      definition.options.onProgress(poller.getOperationState());\n    }\n\n    return poller;\n  }\n\n  // #endregion\n}\n\n/**\n * Produce an appropriate pair of content-type and analyzeRequest value for the analysis request.\n * @internal\n */\nfunction toAnalyzeRequest(\n  input: string | FormRecognizerRequestBody\n): [\"application/json\", AnalyzeDocumentRequest] | [ContentType, FormRecognizerRequestBody] {\n  if (typeof input === \"string\") {\n    return [\n      \"application/json\",\n      {\n        urlSource: input,\n      },\n    ];\n  } else {\n    return [\"application/octet-stream\", input];\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PollOperationState, PollerLike } from \"@azure/core-lro\";\nimport { OperationOptions } from \"@azure/core-client\";\nimport { FormRecognizerError } from \"../error\";\nimport {\n  DocumentModelDetails,\n  OperationStatus,\n  DocumentModelBuildOperationDetails,\n  DocumentModelCopyToOperationDetails,\n  DocumentModelComposeOperationDetails,\n} from \"../generated\";\nimport { PollerOptions } from \"../options/PollerOptions\";\n\n/**\n * The state of a model creation operation.\n */\nexport interface DocumentModelOperationState extends PollOperationState<DocumentModelDetails> {\n  /**\n   * The status of the operation. One of:\n   *\n   * - \"notStarted\"\n   * - \"running\"\n   * - \"succeeded\"\n   * - \"failed\"\n   * - \"canceled\"\n   */\n  status: OperationStatus;\n\n  /**\n   * The API version used to train this model.\n   */\n  apiVersion?: string;\n\n  /**\n   * The unique ID of this operation.\n   */\n  operationId: string;\n\n  /**\n   * A number between 0 and 100 representing the progress of the operation.\n   */\n  percentCompleted: number;\n\n  /**\n   * The Date and Time that the operation was created.\n   */\n  createdOn: Date;\n\n  /**\n   * The date & time that the operation state was last modified.\n   */\n  lastUpdatedOn: Date;\n\n  /**\n   * Additional, user-defined key-value pairs associated with the model as metadata.\n   */\n  tags?: Record<string, string>;\n}\n\n// The generated type for GetOperationResult is not ideal here. This assertion is just kicking the can down the road but\n// it's about the only thing we can do to actually access the common `result` property.\nexport type DocumentModelBuildResponse =\n  | DocumentModelBuildOperationDetails\n  | DocumentModelCopyToOperationDetails\n  | DocumentModelComposeOperationDetails;\n\n/**\n * Convert an operation result into a training poller state.\n * @internal\n */\nexport async function toTrainingPollOperationState(\n  response: DocumentModelBuildResponse\n): Promise<DocumentModelOperationState> {\n  return {\n    operationId: response.operationId,\n    status: response.status,\n    apiVersion: response.apiVersion,\n    percentCompleted: response.percentCompleted ?? 0,\n    lastUpdatedOn: response.lastUpdatedOn,\n    createdOn: response.createdOn,\n    error: response.error && new FormRecognizerError(response.error),\n    isCancelled: response.status === \"canceled\",\n    isCompleted: response.status === \"succeeded\",\n    isStarted: response.status !== \"notStarted\",\n    tags: response.tags,\n    result: response.result,\n  };\n}\n\n/**\n * A long-running operation (poller) that tracks the state of a model creation operation, eventually producing a\n * {@link DocumentModelDetails}.\n */\nexport type DocumentModelPoller = PollerLike<DocumentModelOperationState, DocumentModelDetails>;\n\n/**\n * Defines a training operation.\n * @internal\n */\nexport interface TrainingOperationDefinition {\n  /**\n   * A function to start the operation, producing an operationLocation.\n   */\n  start: () => Promise<{ operationLocation?: string }>;\n  /**\n   * Options for the poller and requests.\n   */\n  options: PollerOptions<DocumentModelOperationState> & OperationOptions;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { TracingClient, createTracingClient } from \"@azure/core-tracing\";\nimport { __decorate } from \"tslib\";\nimport { SDK_VERSION } from \"./constants\";\nimport {\n  CopyAuthorization,\n  GeneratedClient,\n  ResourceDetails,\n  GetOperationResponse,\n  DocumentModelDetails,\n  DocumentModelSummary,\n  OperationSummary,\n  OperationDetails,\n} from \"./generated\";\nimport { accept1 } from \"./generated/models/parameters\";\nimport {\n  TrainingOperationDefinition,\n  DocumentModelOperationState,\n  DocumentModelPoller,\n  toTrainingPollOperationState,\n} from \"./lro/administration\";\nimport { lro } from \"./lro/util/poller\";\nimport {\n  BeginCopyModelOptions,\n  DeleteDocumentModelOptions,\n  DocumentModelAdministrationClientOptions,\n  GetCopyAuthorizationOptions,\n  GetResourceDetailsOptions,\n  GetModelOptions,\n  GetOperationOptions,\n  ListModelsOptions,\n  ListOperationsOptions,\n} from \"./options\";\nimport {\n  BeginBuildDocumentModelOptions,\n  BeginComposeDocumentModelOptions,\n  DocumentModelBuildMode,\n} from \"./options/BuildModelOptions\";\nimport { Mappers, SERIALIZER, makeServiceClient } from \"./util\";\n\n/**\n * A client for interacting with the Form Recognizer service's model management features, such as creating, reading,\n * listing, deleting, and copying models.\n *\n * ### Examples:\n *\n * #### Azure Active Directory\n *\n * ```typescript\n * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n * import { DefaultAzureCredential } from \"@azure/identity\";\n *\n * const endpoint = \"https://<resource name>.cognitiveservices.azure.com\";\n * const credential = new DefaultAzureCredential();\n *\n * const client = new DocumentModelAdministrationClient(endpoint, credential);\n * ```\n *\n * #### API Key (Subscription Key)\n *\n * ```typescript\n * import { DocumentModelAdministrationClient, AzureKeyCredential } from \"@azure/ai-form-recognizer\";\n *\n * const endpoint = \"https://<resource name>.cognitiveservices.azure.com\";\n * const credential = new AzureKeyCredential(\"<api key>\");\n *\n * const client = new DocumentModelAdministrationClient(endpoint, credential);\n * ```\n */\nexport class DocumentModelAdministrationClient {\n  private _restClient: GeneratedClient;\n  private _tracing: TracingClient;\n\n  /**\n   * Create a DocumentModelAdministrationClient instance from a resource endpoint and a an Azure Identity `TokenCredential`.\n   *\n   * See the [`@azure/identity`](https://npmjs.com/package/\\@azure/identity) package for more information about\n   * authenticating with Azure Active Directory.\n   *\n   * ### Example:\n   *\n   * ```javascript\n   * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * const endpoint = \"https://<resource name>.cognitiveservices.azure.com\";\n   * const credential = new DefaultAzureCredential();\n   *\n   * const client = new DocumentModelAdministrationClient(endpoint, credential);\n   * ```\n   *\n   * @param endpoint - the endpoint URL of an Azure Cognitive Services instance\n   * @param credential - a TokenCredential instance from the `@azure/identity` package\n   * @param options - optional settings for configuring all methods in the client\n   */\n  public constructor(\n    endpoint: string,\n    credential: TokenCredential,\n    options?: DocumentModelAdministrationClientOptions\n  );\n  /**\n   * Create a DocumentModelAdministrationClient instance from a resource endpoint and a static API key\n   * (`KeyCredential`),\n   *\n   * ### Example:\n   *\n   * ```javascript\n   * import { DocumentModelAdministrationClient, AzureKeyCredential } from \"@azure/ai-form-recognizer\";\n   *\n   * const endpoint = \"https://<resource name>.cognitiveservices.azure.com\";\n   * const credential = new AzureKeyCredential(\"<api key>\");\n   *\n   * const client = new DocumentModelAdministrationClient(endpoint, credential);\n   * ```\n   *\n   * @param endpoint - the endpoint URL of an Azure Cognitive Services instance\n   * @param credential - a KeyCredential containing the Cognitive Services instance subscription key\n   * @param options - optional settings for configuring all methods in the client\n   */\n  public constructor(\n    endpoint: string,\n    credential: KeyCredential,\n    options?: DocumentModelAdministrationClientOptions\n  );\n  /**\n   * @hidden\n   */\n  public constructor(\n    endpoint: string,\n    credential: KeyCredential | TokenCredential,\n    options?: DocumentModelAdministrationClientOptions\n  );\n  public constructor(\n    endpoint: string,\n    credential: KeyCredential | TokenCredential,\n    options: DocumentModelAdministrationClientOptions = {}\n  ) {\n    this._restClient = makeServiceClient(endpoint, credential, options);\n    this._tracing = createTracingClient({\n      packageName: \"@azure/ai-form-recognizer\",\n      packageVersion: SDK_VERSION,\n      namespace: \"Microsoft.CognitiveServices\",\n    });\n  }\n\n  // #region Model Creation\n\n  /**\n   * Build a new model with a given ID from a set of input documents and labeled fields.\n   *\n   * The Model ID can consist of any text, so long as it does not begin with \"prebuilt-\" (as these models refer to\n   * prebuilt Form Recognizer models that are common to all resources), and so long as it does not already exist within\n   * the resource.\n   *\n   * The Form Recognizer service reads the training data set from an Azure Storage container, given as a URL to the\n   * container with a SAS token that allows the service backend to communicate with the container. At a minimum, the\n   * \"read\" and \"list\" permissions are required. In addition, the data in the given container must be organized\n   * according to a particular convention, which is documented in [the service's documentation for building custom\n   * models](https://aka.ms/form-recognizer/custom).\n   *\n   * ### Example\n   *\n   * ```javascript\n   * const modelId = \"aNewModel\";\n   * const containerUrl = \"<training data container SAS URL>\";\n   *\n   * const poller = await client.beginBuildDocumentModel(modelId, containerUrl, {\n   *   // Optionally, a text description may be attached to the model\n   *   description: \"This is an example model!\"\n   * });\n   *\n   * // Model building, like all other model creation operations, returns a poller that eventually produces a ModelDetails\n   * // object\n   * const modelDetails = await poller.pollUntilDone();\n   *\n   * const {\n   *   modelId, // identical to the modelId given when creating the model\n   *   description, // identical to the description given when creating the model\n   *   createdOn, // the Date (timestamp) that the model was created\n   *   docTypes // information about the document types in the model and their field schemas\n   * } = modelDetails;\n   * ```\n   *\n   * @param modelId - the unique ID of the model to create\n   * @param containerUrl - SAS-encoded URL to an Azure Storage container holding the training data set\n   * @param buildMode - the mode to use when building the model (see `DocumentModelBuildMode`)\n   * @param options - optional settings for the model build operation\n   * @returns a long-running operation (poller) that will eventually produce the created model information or an error\n   */\n  public async beginBuildDocumentModel(\n    modelId: string,\n    containerUrl: string,\n    buildMode: DocumentModelBuildMode,\n    options: BeginBuildDocumentModelOptions = {}\n  ): Promise<DocumentModelPoller> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.beginBuildDocumentModel\",\n      options,\n      (finalOptions) =>\n        this.createDocumentModelPoller({\n          options: finalOptions,\n          start: () =>\n            this._restClient.buildDocumentModel(\n              {\n                modelId,\n                description: finalOptions.description,\n                azureBlobSource: {\n                  containerUrl,\n                },\n                buildMode,\n              },\n              finalOptions\n            ),\n        })\n    );\n  }\n\n  /**\n   * Creates a single composed model from several pre-existing submodels.\n   *\n   * The resulting composed model combines the document types of its component models, and inserts a classification step\n   * into the extraction pipeline to determine which of its component submodels is most appropriate for the given input.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * const modelId = \"aNewComposedModel\";\n   * const subModelIds = [\n   *   \"documentType1Model\",\n   *   \"documentType2Model\",\n   *   \"documentType3Model\"\n   * ];\n   *\n   * // The resulting composed model can classify and extract data from documents\n   * // conforming to any of the above document types\n   * const poller = await client.beginComposeDocumentModel(modelId, subModelIds, {\n   *   description: \"This is a composed model that can handle several document types.\"\n   * });\n   *\n   * // Model composition, like all other model creation operations, returns a poller that eventually produces a\n   * // ModelDetails object\n   * const modelDetails = await poller.pollUntilDone();\n   *\n   * const {\n   *   modelId, // identical to the modelId given when creating the model\n   *   description, // identical to the description given when creating the model\n   *   createdOn, // the Date (timestamp) that the model was created\n   *   docTypes // information about the document types of the composed submodels\n   * } = modelDetails;\n   * ```\n   *\n   * @param modelId - the unique ID of the model to create\n   * @param componentModelIds - an Iterable of strings representing the unique model IDs of the models to compose\n   * @param options - optional settings for model creation\n   * @returns a long-running operation (poller) that will eventually produce the created model information or an error\n   */\n  public async beginComposeDocumentModel(\n    modelId: string,\n    componentModelIds: Iterable<string>,\n    options: BeginComposeDocumentModelOptions = {}\n  ): Promise<DocumentModelPoller> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.beginComposeDocumentModel\",\n      options,\n      (finalOptions) =>\n        this.createDocumentModelPoller({\n          options: finalOptions,\n          start: () =>\n            this._restClient.composeDocumentModel(\n              {\n                modelId,\n                componentModels: [...componentModelIds].map((submodelId) => ({\n                  modelId: submodelId,\n                })),\n                description: finalOptions.description,\n                tags: finalOptions.tags,\n              },\n              finalOptions\n            ),\n        })\n    );\n  }\n\n  /**\n   * Creates an authorization to copy a model into the resource, used with the `beginCopyModelTo` method.\n   *\n   * The `CopyAuthorization` grants another cognitive service resource the right to create a model in this client's\n   * resource with the model ID and optional description that are encoded into the authorization.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * // The copyAuthorization data structure stored below grants any cognitive services resource the right to copy a\n   * // model into the client's resource with the given destination model ID.\n   * const copyAuthorization = await client.getCopyAuthorization(\"<destination model ID>\");\n   * ```\n   *\n   * @param destinationModelId - the unique ID of the destination model (the ID to copy the model into)\n   * @param options - optional settings for creating the copy authorization\n   * @returns a copy authorization that encodes the given modelId and optional description\n   */\n  public async getCopyAuthorization(\n    destinationModelId: string,\n    options: GetCopyAuthorizationOptions = {}\n  ): Promise<CopyAuthorization> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.getCopyAuthorization\",\n      options,\n      (finalOptions) =>\n        this._restClient.authorizeCopyDocumentModel(\n          {\n            modelId: destinationModelId,\n            description: finalOptions.description,\n            tags: finalOptions.tags,\n          },\n          finalOptions\n        )\n    );\n  }\n\n  /**\n   * Copies a model with the given ID into the resource and model ID encoded by a given copy authorization.\n   *\n   * See {@link CopyAuthorization} and {@link getCopyAuthorization}.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * // We need a client for the source model's resource\n   * const sourceEndpoint = \"https://<source resource name>.cognitiveservices.azure.com\";\n   * const sourceCredential = new AzureKeyCredential(\"<source api key>\");\n   * const sourceClient = new DocumentModelAdministrationClient(sourceEndpoint, sourceCredential);\n   *\n   * // We create the copy authorization using a client authenticated with the destination resource. Note that these two\n   * // resources can be the same (you can copy a model to a new ID in the same resource).\n   * const copyAuthorization = await client.getCopyAuthorization(\"<destination model ID>\");\n   *\n   * // Finally, use the _source_ client to copy the model and await the copy operation\n   * const poller = await sourceClient.beginCopyModelTo(\"<source model ID>\");\n   *\n   * // Model copying, like all other model creation operations, returns a poller that eventually produces a ModelDetails\n   * // object\n   * const modelDetails = await poller.pollUntilDone();\n   *\n   * const {\n   *   modelId, // identical to the modelId given when creating the copy authorization\n   *   description, // identical to the description given when creating the copy authorization\n   *   createdOn, // the Date (timestamp) that the model was created\n   *   docTypes // information about the document types of the model (identical to the original, source model)\n   * } = modelDetails;\n   * ```\n   *\n   * @param sourceModelId - the unique ID of the source model that will be copied\n   * @param authorization - an authorization to copy the model, created using the {@link getCopyAuthorization}\n   * @param options - optional settings for\n   * @returns a long-running operation (poller) that will eventually produce the copied model information or an error\n   */\n  public async beginCopyModelTo(\n    sourceModelId: string,\n    authorization: CopyAuthorization,\n    options: BeginCopyModelOptions = {}\n  ): Promise<DocumentModelPoller> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.beginCopyModel\",\n      options,\n      (finalOptions) =>\n        this.createDocumentModelPoller({\n          options: finalOptions,\n          start: () =>\n            this._restClient.copyDocumentModelTo(sourceModelId, authorization, finalOptions),\n        })\n    );\n  }\n\n  /**\n   * Create an LRO poller that handles model creation operations.\n   *\n   * This is the meat of the above model creation operations.\n   *\n   * @param definition - operation definition (start operation method, request options)\n   * @returns a model poller (produces a ModelDetails)\n   */\n  private async createDocumentModelPoller(\n    definition: TrainingOperationDefinition\n  ): Promise<DocumentModelPoller> {\n    const { resumeFrom } = definition.options;\n\n    const toInit =\n      resumeFrom === undefined\n        ? () =>\n            this._tracing.withSpan(\n              \"DocumentModelAdministrationClient.createDocumentModelPoller-start\",\n              definition.options,\n              async (options) => {\n                const { operationLocation } = await definition.start();\n\n                if (operationLocation === undefined) {\n                  throw new Error(\n                    \"Unable to start model creation operation: no Operation-Location received.\"\n                  );\n                }\n\n                return this._restClient.sendOperationRequest(\n                  {\n                    options,\n                  },\n                  {\n                    path: operationLocation,\n                    httpMethod: \"GET\",\n                    responses: {\n                      200: {\n                        bodyMapper: Mappers.OperationDetails,\n                      },\n                      default: {\n                        bodyMapper: Mappers.ErrorResponse,\n                      },\n                    },\n                    headerParameters: [accept1],\n                    serializer: SERIALIZER,\n                  }\n                ) as Promise<GetOperationResponse>;\n              }\n            )\n        : () =>\n            this._tracing.withSpan(\n              \"DocumentModelAdministrationClient.createDocumentModelPoller-resume\",\n              definition.options,\n              (options) => {\n                const { operationId } = JSON.parse(resumeFrom) as { operationId: string };\n\n                return this._restClient.getOperation(operationId, options);\n              }\n            );\n\n    const poller = await lro<DocumentModelDetails, DocumentModelOperationState>(\n      {\n        init: async () => toTrainingPollOperationState(await toInit()),\n        poll: async ({ operationId }) =>\n          this._tracing.withSpan(\n            \"DocumentModelAdminstrationClient.createDocumentModelPoller-poll\",\n            definition.options,\n            async (options) => {\n              const res = await this._restClient.getOperation(operationId, options);\n\n              return toTrainingPollOperationState(res);\n            }\n          ),\n        serialize: ({ operationId }) => JSON.stringify({ operationId }),\n      },\n      definition.options.updateIntervalInMs\n    );\n\n    if (definition.options.onProgress !== undefined) {\n      poller.onProgress(definition.options.onProgress);\n      definition.options.onProgress(poller.getOperationState());\n    }\n\n    return poller;\n  }\n\n  // #endregion\n\n  // #region Model Management\n\n  /**\n   * Retrieve basic information about this client's resource.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * const {\n   *   // Information about the custom models in the current resource\n   *   customDocumentModelDetails: {\n   *     // The number of custom models in the current resource\n   *     count,\n   *     // The maximum number of models that the current resource can support\n   *     limit\n   *   }\n   * } = await client.getResourceDetails();\n   * ```\n   *\n   * @param options - optional settings for the request\n   * @returns basic information about this client's resource\n   */\n  public getResourceDetails(options: GetResourceDetailsOptions = {}): Promise<ResourceDetails> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.getResourceDetails\",\n      options,\n      (finalOptions) => this._restClient.getResourceDetails(finalOptions)\n    );\n  }\n\n  /**\n   * Retrieves information about a model ({@link ModelDetails}) by ID.\n   *\n   * This method can retrieve information about custom as well as prebuilt models.\n   *\n   * ### **Breaking Change**\n   *\n   * In previous versions of the Form Recognizer REST API and SDK, the `getModel` method could return any model, even\n   * one that failed to create due to errors. In the new service versions, `getDocumentModel` and `listDocumentModels`\n   * _only produce successfully created models_ (i.e. models that are \"ready\" for use). Failed models are now retrieved\n   * through the \"operations\" APIs, see {@link getOperation} and {@link listOperations}.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * // The ID of the prebuilt business card model\n   * const modelId = \"prebuilt-businessCard\";\n   *\n   * const {\n   *   modelId, // identical to the modelId given when calling `getDocumentModel`\n   *   description, // a textual description of the model, if provided during model creation\n   *   createdOn, // the Date (timestamp) that the model was created\n   *   // information about the document types in the model and their field schemas\n   *   docTypes: {\n   *     // the document type of the prebuilt business card model\n   *     \"prebuilt:businesscard\": {\n   *       // an optional, textual description of this document type\n   *       description,\n   *       // the schema of the fields in this document type, see the FieldSchema type\n   *       fieldSchema,\n   *       // the service's confidences in the fields (an object with field names as properties and numeric confidence\n   *       // values)\n   *       fieldConfidence\n   *     }\n   *   }\n   * } = await client.getDocumentModel(modelId);\n   * ```\n   *\n   * @param modelId - the unique ID of the model to query\n   * @param options - optional settings for the request\n   * @returns information about the model with the given ID\n   */\n  public getDocumentModel(\n    modelId: string,\n    options: GetModelOptions = {}\n  ): Promise<DocumentModelDetails> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.getDocumentModel\",\n      options,\n      (finalOptions) => this._restClient.getDocumentModel(modelId, finalOptions)\n    );\n  }\n\n  /**\n   * List summaries of models in the resource. Custom as well as prebuilt models will be included. This operation\n   * supports paging.\n   *\n   * The model summary ({@link ModelSummary}) includes only the basic information about the model, and does not include\n   * information about the document types in the model (such as the field schemas and confidence values).\n   *\n   * To access the full information about the model, use {@link getDocumentModel}.\n   *\n   * ### **Breaking Change**\n   *\n   * In previous versions of the Form Recognizer REST API and SDK, the `listModels` method would return all models, even\n   * those that failed to create due to errors. In the new service versions, `listDocumentModels` and `getDocumentModel`\n   * _only produce successfully created models_ (i.e. models that are \"ready\" for use). Failed models are now retrieved\n   * through the \"operations\" APIs, see {@link getOperation} and {@link listOperations}.\n   *\n   * ### Examples\n   *\n   * #### Async Iteration\n   *\n   * ```javascript\n   * for await (const summary of client.listDocumentModels()) {\n   *   const {\n   *     modelId, // The model's unique ID\n   *     description, // a textual description of the model, if provided during model creation\n   *   } = summary;\n   *\n   *   // You can get the full model info using `getDocumentModel`\n   *   const model = await client.getDocumentModel(modelId);\n   * }\n   * ```\n   *\n   * #### By Page\n   *\n   * ```javascript\n   * // The listDocumentModels method is paged, and you can iterate by page using the `byPage` method.\n   * const pages = client.listDocumentModels().byPage();\n   *\n   * for await (const page of pages) {\n   *   // Each page is an array of models and can be iterated synchronously\n   *   for (const model of page) {\n   *     const {\n   *       modelId, // The model's unique ID\n   *       description, // a textual description of the model, if provided during model creation\n   *     } = summary;\n   *\n   *     // You can get the full model info using `getDocumentModel`\n   *     const model = await client.getDocumentModel(modelId);\n   *   }\n   * }\n   * ```\n   *\n   * @param options - optional settings for the model requests\n   * @returns an async iterable of model summaries that supports paging\n   */\n  public listDocumentModels(\n    options: ListModelsOptions = {}\n  ): PagedAsyncIterableIterator<DocumentModelSummary> {\n    return this._restClient.listDocumentModels(options);\n  }\n\n  /**\n   * Retrieves information about an operation (`OperationDetails`) by its ID.\n   *\n   * Operations represent non-analysis tasks, such as building, composing, or copying a model.\n   *\n   * @param operationId - the ID of the operation to query\n   * @param options - optional settings for the request\n   * @returns information about the operation with the given ID\n   *\n   * ### Example\n   *\n   * ```javascript\n   * // The ID of the operation, which should be a GUID\n   * const operationId = \"<operation GUID>\";\n   *\n   * const {\n   *   operationId, // identical to the operationId given when calling `getOperation`\n   *   kind, // the operation kind, one of \"documentModelBuild\", \"documentModelCompose\", or \"documentModelCopyTo\"\n   *   status, // the status of the operation, one of \"notStarted\", \"running\", \"failed\", \"succeeded\", or \"canceled\"\n   *   percentCompleted, // a number between 0 and 100 representing the progress of the operation\n   *   createdOn, // a Date object that reflects the time when the operation was started\n   *   lastUpdatedOn, // a Date object that reflects the time when the operation state was last modified\n   * } = await client.getOperation(operationId);\n   * ```\n   */\n  public getOperation(\n    operationId: string,\n    options: GetOperationOptions = {}\n  ): Promise<OperationDetails> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.getOperation\",\n      options,\n      (finalOptions) => this._restClient.getOperation(operationId, finalOptions)\n    );\n  }\n\n  /**\n   * List model creation operations in the resource. This will produce all operations, including operations that failed\n   * to create models successfully. This operation supports paging.\n   *\n   * ### Examples\n   *\n   * #### Async Iteration\n   *\n   * ```javascript\n   * for await (const operation of client.listOperations()) {\n   *   const {\n   *     operationId, // the operation's GUID\n   *     status, // the operation status, one of \"notStarted\", \"running\", \"succeeded\", \"failed\", or \"canceled\"\n   *     percentCompleted // the progress of the operation, from 0 to 100\n   *   } = operation;\n   * }\n   * ```\n   *\n   * #### By Page\n   *\n   * ```javascript\n   * // The listOperations method is paged, and you can iterate by page using the `byPage` method.\n   * const pages = client.listOperations().byPage();\n   *\n   * for await (const page of pages) {\n   *   // Each page is an array of operation info objects and can be iterated synchronously\n   *   for (const operation of page) {\n   *     const {\n   *       operationId, // the operation's GUID\n   *       status, // the operation status, one of \"notStarted\", \"running\", \"succeeded\", \"failed\", or \"canceled\"\n   *       percentCompleted // the progress of the operation, from 0 to 100\n   *     } = operation;\n   *   }\n   * }\n   * ```\n   *\n   * @param options - optional settings for the operation requests\n   * @returns an async iterable of operation information objects that supports paging\n   */\n  public listOperations(\n    options: ListOperationsOptions = {}\n  ): PagedAsyncIterableIterator<OperationSummary> {\n    return this._restClient.listOperations(options);\n  }\n\n  /**\n   * Deletes a model with the given ID from the client's resource, if it exists. This operation CANNOT be reverted.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * await client.deleteModel(\"<model ID to delete>\"));\n   * ```\n   *\n   * @param modelId - the unique ID of the model to delete from the resource\n   * @param options - optional settings for the request\n   */\n  public deleteDocumentModel(\n    modelId: string,\n    options: DeleteDocumentModelOptions = {}\n  ): Promise<void> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.deleteDocumentModel\",\n      options,\n      (finalOptions) => this._restClient.deleteDocumentModel(modelId, finalOptions)\n    );\n  }\n\n  // #endregion\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationOptions } from \"@azure/core-client\";\nimport { DocumentModelOperationState } from \"../lro/administration\";\nimport { PollerOptions } from \"./PollerOptions\";\n\n/**\n * Supported model build modes. The model build mode selects the engine that the service uses to train the model based\n * on the labeled training data.\n *\n * The options are:\n * - \"neural\", which yields the highest quality of model that is capable of extracting data from classes of documents\n *   that have the same structure of data, but different layouts (for example, W2 tax forms, which may vary from company\n *   to company, but always contain the same information).\n * - \"template\", which requires all documents to have the same fixed layout (template).\n *\n * Please see the following link for more information: https://aka.ms/azsdk/formrecognizer/buildmode\n */\nexport type DocumentModelBuildMode =\n  typeof DocumentModelBuildMode[keyof typeof DocumentModelBuildMode];\n\n/**\n * Supported values of `DocumentModelBuildMode`.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const DocumentModelBuildMode = {\n  /**\n   * A mode that builds a model assuming that documents all follow the same, fixed template layout (the same relative\n   * positioning of fields between documents).\n   */\n  Template: \"template\",\n  /**\n   * A mode that uses a neural engine to extract fields, allowing for documents that have different visual appearances,\n   * but that contain the same information.\n   */\n  Neural: \"neural\",\n} as const;\n\n/**\n * Options common to all operations that define new models, such as `beginBuildDocumentModel`,\n * `beginComposeDocumentModel`, and `getCopyAuthorization`.\n */\nexport interface CommonModelCreationOptions {\n  /**\n   * A textual description of the model (can be any text).\n   */\n  description?: string;\n\n  /**\n   * Additional, user-specified key-value pairs to associate with the model as persistent metadata.\n   */\n  tags?: Record<string, string>;\n}\n\n/**\n * Options for the model creation operation.\n */\nexport interface CreateDocumentModelOptions\n  extends OperationOptions,\n    CommonModelCreationOptions,\n    PollerOptions<DocumentModelOperationState> {}\n\n/**\n * Options for the model build operation.\n */\nexport interface BeginBuildDocumentModelOptions extends CreateDocumentModelOptions {}\n\n/**\n * Options for the model compose operation.\n */\nexport interface BeginComposeDocumentModelOptions extends CreateDocumentModelOptions {}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { DocumentFieldSchema, DocumentModelDetails } from \"./generated\";\nimport { AnalyzedDocument, AnalyzeResult } from \"./lro/analysis\";\nimport { DocumentField } from \"./models/fields\";\nimport { FormRecognizerApiVersion } from \"./options\";\nimport { isAcronymic, uncapitalize } from \"./util\";\n\n/**\n * A well-known model specification that supports extracting structured documents.\n *\n * See the `beginAnalyzeDocument` method of {@link DocumentAnalysisClient}, which supports consuming these\n * `DocumentModel` objects instead of model ID strings to provide stronger result types.\n */\nexport interface DocumentModel<Result> {\n  /**\n   * The unique ID of this model.\n   */\n  modelId: string;\n  /**\n   * The API version of the model.\n   */\n  apiVersion?: FormRecognizerApiVersion;\n  /**\n   * An associated transformation that is used to conver the base (weak) Result type to the strong version.\n   */\n  transformResult: (input: AnalyzeResult) => Result;\n}\n\n/**\n * Checks a field value against a schema and converts it into a strong idiomatic DocumentField,\n * @internal\n * @param fieldName - the name of the field (used in diagnostics)\n * @param schema - the field's schema\n * @param field - the raw DocumentField value\n * @returns\n */\nfunction extractField(\n  fieldName: string,\n  schema: DocumentFieldSchema,\n  field: DocumentField\n): DocumentField {\n  if (schema.type !== field.kind) {\n    throw new Error(\n      `Schema violation: ${fieldName} had type \"${field.kind}\", but expected \"${schema.type}\"`\n    );\n  }\n\n  // Objects need to be handled specially, so that we can camelCase the field names.\n  if (field.kind === \"object\") {\n    const result: any = {};\n\n    for (const [subFieldName, subFieldSchema] of Object.entries(schema.properties!)) {\n      if (field.properties[subFieldName] !== undefined && field.properties[subFieldName] !== null) {\n        result[isAcronymic(subFieldName) ? subFieldName : uncapitalize(subFieldName)] =\n          extractField(\n            fieldName + \".\" + subFieldName,\n            subFieldSchema,\n            field.properties[subFieldName]!\n          );\n      }\n    }\n\n    return {\n      ...field,\n      properties: result,\n    };\n  } else if (field.kind === \"array\") {\n    return {\n      ...field,\n      values: field.values.map((val, idx) =>\n        extractField(fieldName + \"[\" + idx + \"]\", schema.items!, val)\n      ),\n    };\n  } else return field;\n}\n\n/**\n * Create a DocumentModel that performs analysis using the given schema.\n *\n * The types of `documents` are created from the schema, so they are `unknown` unless they are asserted to be a\n * different type.\n *\n * @hidden\n * @param schema - model schema contents\n * @returns - a DocumentModel that encodes the schema\n */\nexport function createModelFromSchema(\n  schema: Omit<DocumentModelDetails, \"createdOn\">\n): DocumentModel<AnalyzeResult<unknown>> {\n  return {\n    modelId: schema.modelId,\n    apiVersion: schema.apiVersion as FormRecognizerApiVersion,\n    transformResult(baseResult: AnalyzeResult): AnalyzeResult<unknown> {\n      const hasDocuments = Object.entries(schema.docTypes ?? {}).length > 0;\n\n      const defaultDocuments = hasDocuments ? [] : undefined;\n\n      return {\n        ...baseResult,\n        documents: baseResult.documents?.map(toDocument) ?? defaultDocuments,\n      };\n\n      function toDocument(document: AnalyzedDocument): unknown {\n        const result: Record<string, unknown> = {};\n        const model = schema.docTypes?.[document.docType];\n\n        if (model === undefined) {\n          throw new Error(\n            `Unexpected document type \"${document.docType}\" in result using model \"${schema.modelId}\"`\n          );\n        }\n        for (const [fieldName, fieldSchema] of Object.entries(model.fieldSchema)) {\n          if (\n            document.fields &&\n            document.fields[fieldName] !== undefined &&\n            document.fields[fieldName] !== null\n          ) {\n            result[isAcronymic(fieldName) ? fieldName : uncapitalize(fieldName)] = extractField(\n              fieldName,\n              fieldSchema,\n              document.fields[fieldName]\n            );\n          }\n        }\n\n        return {\n          ...document,\n          fields: result,\n        };\n      }\n    },\n  };\n}\n"],"names":["AnalyzeDocumentRequestMapper","BuildDocumentModelRequestMapper","ComposeDocumentModelRequestMapper","AuthorizeCopyRequestMapper","CopyAuthorizationMapper","coreClient","coreRestPipeline","__await","__asyncValues","__asyncDelegator","Mappers.GeneratedClientAnalyzeDocumentHeaders","Mappers.ErrorResponse","Parameters.analyzeRequest","Parameters.pages","Parameters.locale","Parameters.stringIndexType","Parameters.apiVersion","Parameters.endpoint","Parameters.modelId","Parameters.contentType","Parameters.accept","Parameters.analyzeRequest1","Parameters.contentType1","Parameters.accept1","Mappers.AnalyzeResultOperation","Parameters.resultId","Mappers.GeneratedClientBuildDocumentModelHeaders","Parameters.buildRequest","Parameters.contentType2","Mappers.GeneratedClientComposeDocumentModelHeaders","Parameters.composeRequest","Mappers.CopyAuthorization","Parameters.authorizeCopyRequest","Mappers.GeneratedClientCopyDocumentModelToHeaders","Parameters.copyToRequest","Mappers.GetOperationsResponse","Mappers.OperationDetails","Parameters.operationId","Mappers.GetDocumentModelsResponse","Mappers.DocumentModelDetails","Mappers.ResourceDetails","Parameters.nextLink","createSerializer","isTokenCredential","bearerTokenAuthenticationPolicy","createTracingClient"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;;;AAGG;AACI,MAAM,uBAAuB,GAAG,8CAA8C,CAAC;AAEtF;;AAEG;AACI,MAAM,WAAW,GAAG,OAAO;;ACZlC;;;;;;AAMG;AAII,MAAM,sBAAsB,GAA+B;AAChE,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,wBAAwB;AACnC,QAAA,eAAe,EAAE;AACf,YAAA,SAAS,EAAE;AACT,gBAAA,cAAc,EAAE,WAAW;AAC3B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,YAAY,EAAE;AACZ,gBAAA,cAAc,EAAE,cAAc;AAC9B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AAClB,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,aAAa,GAA+B;AACvD,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,eAAe;AAC1B,QAAA,eAAe,EAAE;AACf,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AACjB,oBAAA,SAAS,EAAE,YAAY;AACxB,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,UAAU,GAA+B;AACpD,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,YAAY;AACvB,QAAA,eAAe,EAAE;AACf,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,OAAO,EAAE;AACP,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,MAAM,EAAE;AACN,gBAAA,cAAc,EAAE,QAAQ;AACxB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,OAAO,EAAE;AACP,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,YAAY;AACxB,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,UAAU,EAAE;AACV,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AACjB,oBAAA,SAAS,EAAE,YAAY;AACxB,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,UAAU,GAA+B;AACpD,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,YAAY;AACvB,QAAA,eAAe,EAAE;AACf,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,OAAO,EAAE;AACP,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,UAAU,EAAE;AACV,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AACjB,oBAAA,SAAS,EAAE,YAAY;AACxB,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,sBAAsB,GAA+B;AAChE,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,wBAAwB;AACnC,QAAA,eAAe,EAAE;AACf,YAAA,MAAM,EAAE;AACN,gBAAA,cAAc,EAAE,QAAQ;AACxB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,MAAM;oBACZ,aAAa,EAAE,CAAC,YAAY,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,CAAC;AAChE,iBAAA;AACF,aAAA;AACD,YAAA,SAAS,EAAE;AACT,gBAAA,cAAc,EAAE,iBAAiB;AACjC,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AACjB,iBAAA;AACF,aAAA;AACD,YAAA,aAAa,EAAE;AACb,gBAAA,cAAc,EAAE,qBAAqB;AACrC,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AACjB,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AACjB,oBAAA,SAAS,EAAE,YAAY;AACxB,iBAAA;AACF,aAAA;AACD,YAAA,aAAa,EAAE;AACb,gBAAA,cAAc,EAAE,eAAe;AAC/B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AACjB,oBAAA,SAAS,EAAE,eAAe;AAC3B,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,aAAa,GAA+B;AACvD,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,eAAe;AAC1B,QAAA,eAAe,EAAE;AACf,YAAA,UAAU,EAAE;AACV,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,OAAO,EAAE;AACP,gBAAA,WAAW,EAAE;AACX,oBAAA,OAAO,EAAE,IAAI,MAAM,CAAC,kCAAkC,CAAC;AACxD,iBAAA;AACD,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,eAAe,EAAE;AACf,gBAAA,cAAc,EAAE,iBAAiB;AACjC,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,OAAO,EAAE;AACP,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,cAAc;AAC1B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,UAAU,EAAE;AACV,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,mBAAmB;AAC/B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,MAAM,EAAE;AACN,gBAAA,cAAc,EAAE,QAAQ;AACxB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,eAAe;AAC3B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,aAAa,EAAE;AACb,gBAAA,cAAc,EAAE,eAAe;AAC/B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,sBAAsB;AAClC,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,MAAM,EAAE;AACN,gBAAA,cAAc,EAAE,QAAQ;AACxB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,eAAe;AAC3B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,SAAS,EAAE;AACT,gBAAA,cAAc,EAAE,WAAW;AAC3B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,kBAAkB;AAC9B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,SAAS,EAAE;AACT,gBAAA,cAAc,EAAE,WAAW;AAC3B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,UAAU;AACtB,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,YAAY,GAA+B;AACtD,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,cAAc;AACzB,QAAA,eAAe,EAAE;AACf,YAAA,UAAU,EAAE;AACV,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,GAAG;oBACrB,gBAAgB,EAAE,CAAC,GAAG;AACvB,iBAAA;AACD,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,MAAM,EAAE;AACN,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,QAAQ;AACxB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,cAAc;AAC1B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,cAAc;AAC1B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,cAAc,EAAE;AACd,gBAAA,cAAc,EAAE,gBAAgB;AAChC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,uBAAuB;AACnC,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,cAAc;AAC1B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,YAAY,GAA+B;AACtD,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,cAAc;AACzB,QAAA,eAAe,EAAE;AACf,YAAA,MAAM,EAAE;AACN,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,QAAQ;AACxB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,MAAM,EAAE;AACN,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,QAAQ;AACxB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,YAAY,GAA+B;AACtD,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,cAAc;AACzB,QAAA,eAAe,EAAE;AACf,YAAA,OAAO,EAAE;AACP,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,OAAO,EAAE;AACP,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,WAAW,EAAE;AACX,4BAAA,gBAAgB,EAAE,CAAC;AACpB,yBAAA;AACD,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,QAAQ;AACf,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AACjB,oBAAA,SAAS,EAAE,cAAc;AAC1B,iBAAA;AACF,aAAA;AACD,YAAA,UAAU,EAAE;AACV,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,CAAC;AACnB,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,qBAAqB,GAA+B;AAC/D,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,uBAAuB;AAClC,QAAA,eAAe,EAAE;AACf,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,OAAO,EAAE;AACP,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,WAAW,EAAE;AACX,4BAAA,gBAAgB,EAAE,CAAC;AACpB,yBAAA;AACD,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,QAAQ;AACf,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AACjB,oBAAA,SAAS,EAAE,cAAc;AAC1B,iBAAA;AACF,aAAA;AACD,YAAA,UAAU,EAAE;AACV,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,CAAC;AACnB,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,YAAY,GAA+B;AACtD,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,cAAc;AACzB,QAAA,eAAe,EAAE;AACf,YAAA,OAAO,EAAE;AACP,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,OAAO,EAAE;AACP,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,WAAW,EAAE;AACX,4BAAA,gBAAgB,EAAE,CAAC;AACpB,yBAAA;AACD,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,QAAQ;AACf,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,cAAc;AAC1B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,iBAAiB,GAA+B;AAC3D,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,mBAAmB;AAC9B,QAAA,eAAe,EAAE;AACf,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,OAAO,EAAE;AACP,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,eAAe,EAAE;AACf,gBAAA,cAAc,EAAE,iBAAiB;AACjC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,gBAAgB;AAC5B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,cAAc;AAC1B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,cAAc,GAA+B;AACxD,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,gBAAgB;AAC3B,QAAA,eAAe,EAAE;AACf,YAAA,UAAU,EAAE;AACV,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,OAAO,EAAE;AACP,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,WAAW,EAAE;AACX,4BAAA,gBAAgB,EAAE,CAAC;AACpB,yBAAA;AACD,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,QAAQ;AACf,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,aAAa,GAA+B;AACvD,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,eAAe;AAC1B,QAAA,eAAe,EAAE;AACf,YAAA,QAAQ,EAAE;AACR,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,UAAU;AAC1B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,WAAW,EAAE;AACX,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,aAAa;AAC7B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,mBAAmB;AAC/B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,eAAe,EAAE;AACf,gBAAA,cAAc,EAAE,iBAAiB;AACjC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,gBAAgB;AAC5B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,cAAc;AAC1B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,iBAAiB,GAA+B;AAC3D,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,mBAAmB;AAC9B,QAAA,eAAe,EAAE;AACf,YAAA,IAAI,EAAE;AACJ,gBAAA,YAAY,EAAE,SAAS;AACvB,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,QAAQ,EAAE;AACR,gBAAA,cAAc,EAAE,UAAU;AAC1B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,WAAW,EAAE;AACX,gBAAA,cAAc,EAAE,aAAa;AAC7B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,OAAO,EAAE;AACP,gBAAA,YAAY,EAAE,CAAC;AACf,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,UAAU,EAAE;AACV,gBAAA,YAAY,EAAE,CAAC;AACf,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,OAAO,EAAE;AACP,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,eAAe,EAAE;AACf,gBAAA,cAAc,EAAE,iBAAiB;AACjC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,gBAAgB;AAC5B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,cAAc;AAC1B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,oBAAoB,GAA+B;AAC9D,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,sBAAsB;AACjC,QAAA,eAAe,EAAE;AACf,YAAA,GAAG,EAAE;AACH,gBAAA,cAAc,EAAE,KAAK;AACrB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AACjB,oBAAA,SAAS,EAAE,yBAAyB;AACrC,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AACjB,oBAAA,SAAS,EAAE,yBAAyB;AACrC,iBAAA;AACF,aAAA;AACD,YAAA,UAAU,EAAE;AACV,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,CAAC;AACnB,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,uBAAuB,GAA+B;AACjE,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,yBAAyB;AACpC,QAAA,eAAe,EAAE;AACf,YAAA,OAAO,EAAE;AACP,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,eAAe,EAAE;AACf,gBAAA,cAAc,EAAE,iBAAiB;AACjC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,gBAAgB;AAC5B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,cAAc;AAC1B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,aAAa,GAA+B;AACvD,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,eAAe;AAC1B,QAAA,eAAe,EAAE;AACf,YAAA,aAAa,EAAE;AACb,gBAAA,cAAc,EAAE,eAAe;AAC/B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,SAAS;AAChB,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,cAAc;AAC1B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,UAAU,EAAE;AACV,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,CAAC;AACnB,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,gBAAgB,GAA+B;AAC1D,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,kBAAkB;AAC7B,QAAA,eAAe,EAAE;AACf,YAAA,MAAM,EAAE;AACN,gBAAA,cAAc,EAAE,QAAQ;AACxB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,cAAc;AAC1B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,UAAU,EAAE;AACV,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,CAAC;AACnB,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,QAAQ,GAA+B;AAClD,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,UAAU;AACrB,QAAA,eAAe,EAAE;AACf,YAAA,OAAO,EAAE;AACP,gBAAA,WAAW,EAAE;AACX,oBAAA,SAAS,EAAE,EAAE;AACb,oBAAA,SAAS,EAAE,CAAC;AACb,iBAAA;AACD,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,eAAe,EAAE;AACf,gBAAA,cAAc,EAAE,iBAAiB;AACjC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,gBAAgB;AAC5B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,cAAc;AAC1B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,MAAM,EAAE;AACN,gBAAA,cAAc,EAAE,QAAQ;AACxB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,YAAY;AAClB,oBAAA,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,eAAe,EAAE,EAAE;AACnE,iBAAA;AACF,aAAA;AACD,YAAA,UAAU,EAAE;AACV,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,CAAC;AACnB,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,aAAa,GAA+B;AACvD,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,eAAe;AAC1B,QAAA,eAAe,EAAE;AACf,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,WAAW,EAAE;AACX,gBAAA,cAAc,EAAE,aAAa;AAC7B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,SAAS,EAAE;AACT,gBAAA,cAAc,EAAE,WAAW;AAC3B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,MAAM;AACb,iBAAA;AACF,aAAA;AACD,YAAA,SAAS,EAAE;AACT,gBAAA,cAAc,EAAE,WAAW;AAC3B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,gBAAgB,EAAE;AAChB,gBAAA,cAAc,EAAE,kBAAkB;AAClC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,WAAW,EAAE;AACX,gBAAA,cAAc,EAAE,aAAa;AAC7B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,YAAY,EAAE;AACZ,gBAAA,cAAc,EAAE,cAAc;AAC9B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,kBAAkB,EAAE;AAClB,gBAAA,cAAc,EAAE,oBAAoB;AACpC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,cAAc,EAAE;AACd,gBAAA,cAAc,EAAE,gBAAgB;AAChC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,kBAAkB,EAAE;AAClB,gBAAA,cAAc,EAAE,oBAAoB;AACpC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,UAAU,EAAE;AACV,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,eAAe;AAC3B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,WAAW,EAAE;AACX,gBAAA,cAAc,EAAE,aAAa;AAC7B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,YAAY;AAClB,oBAAA,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,eAAe,EAAE,EAAE;AACnE,iBAAA;AACF,aAAA;AACD,YAAA,aAAa,EAAE;AACb,gBAAA,cAAc,EAAE,eAAe;AAC/B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AACjB,oBAAA,SAAS,EAAE,eAAe;AAC3B,iBAAA;AACF,aAAA;AACD,YAAA,YAAY,EAAE;AACZ,gBAAA,cAAc,EAAE,cAAc;AAC9B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AACjB,oBAAA,SAAS,EAAE,cAAc;AAC1B,iBAAA;AACF,aAAA;AACD,YAAA,OAAO,EAAE;AACP,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,eAAe,EAAE;AACf,gBAAA,cAAc,EAAE,iBAAiB;AACjC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,gBAAgB;AAC5B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,cAAc;AAC1B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,UAAU,EAAE;AACV,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,CAAC;AACnB,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,aAAa,GAA+B;AACvD,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,eAAe;AAC1B,QAAA,eAAe,EAAE;AACf,YAAA,MAAM,EAAE;AACN,gBAAA,cAAc,EAAE,QAAQ;AACxB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,cAAc,EAAE;AACd,gBAAA,cAAc,EAAE,gBAAgB;AAChC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,YAAY,GAA+B;AACtD,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,cAAc;AACzB,QAAA,eAAe,EAAE;AACf,YAAA,WAAW,EAAE;AACX,gBAAA,cAAc,EAAE,aAAa;AAC7B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,UAAU,EAAE;AACV,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,aAAa,EAAE;AACb,gBAAA,cAAc,EAAE,eAAe;AAC/B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,aAAa,EAAE;AACb,gBAAA,cAAc,EAAE,eAAe;AAC/B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,yBAAyB,GAA+B;AACnE,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,2BAA2B;AACtC,QAAA,eAAe,EAAE;AACf,YAAA,OAAO,EAAE;AACP,gBAAA,WAAW,EAAE;AACX,oBAAA,OAAO,EAAE,IAAI,MAAM,CAAC,kCAAkC,CAAC;AACxD,iBAAA;AACD,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,WAAW,EAAE;AACX,gBAAA,WAAW,EAAE;AACX,oBAAA,SAAS,EAAE,IAAI;AAChB,iBAAA;AACD,gBAAA,cAAc,EAAE,aAAa;AAC7B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,SAAS,EAAE;AACT,gBAAA,cAAc,EAAE,WAAW;AAC3B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,eAAe,EAAE;AACf,gBAAA,cAAc,EAAE,iBAAiB;AACjC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AACjB,oBAAA,SAAS,EAAE,wBAAwB;AACpC,iBAAA;AACF,aAAA;AACD,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE;AACpC,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,sBAAsB,GAA+B;AAChE,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,wBAAwB;AACnC,QAAA,eAAe,EAAE;AACf,YAAA,YAAY,EAAE;AACZ,gBAAA,cAAc,EAAE,cAAc;AAC9B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,MAAM,EAAE;AACN,gBAAA,cAAc,EAAE,QAAQ;AACxB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,2BAA2B,GAA+B;AACrE,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,6BAA6B;AACxC,QAAA,eAAe,EAAE;AACf,YAAA,OAAO,EAAE;AACP,gBAAA,WAAW,EAAE;AACX,oBAAA,OAAO,EAAE,IAAI,MAAM,CAAC,kCAAkC,CAAC;AACxD,iBAAA;AACD,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,WAAW,EAAE;AACX,gBAAA,WAAW,EAAE;AACX,oBAAA,SAAS,EAAE,IAAI;AAChB,iBAAA;AACD,gBAAA,cAAc,EAAE,aAAa;AAC7B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,eAAe,EAAE;AACf,gBAAA,WAAW,EAAE;AACX,oBAAA,WAAW,EAAE,IAAI;AAClB,iBAAA;AACD,gBAAA,cAAc,EAAE,iBAAiB;AACjC,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,+BAA+B;AAC3C,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE;AACpC,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,6BAA6B,GAA+B;AACvE,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,+BAA+B;AAC1C,QAAA,eAAe,EAAE;AACf,YAAA,OAAO,EAAE;AACP,gBAAA,WAAW,EAAE;AACX,oBAAA,OAAO,EAAE,IAAI,MAAM,CAAC,kCAAkC,CAAC;AACxD,iBAAA;AACD,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,oBAAoB,GAA+B;AAC9D,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,sBAAsB;AACjC,QAAA,eAAe,EAAE;AACf,YAAA,OAAO,EAAE;AACP,gBAAA,WAAW,EAAE;AACX,oBAAA,OAAO,EAAE,IAAI,MAAM,CAAC,kCAAkC,CAAC;AACxD,iBAAA;AACD,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,WAAW,EAAE;AACX,gBAAA,WAAW,EAAE;AACX,oBAAA,SAAS,EAAE,IAAI;AAChB,iBAAA;AACD,gBAAA,cAAc,EAAE,aAAa;AAC7B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE;AACpC,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,iBAAiB,GAA+B;AAC3D,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,mBAAmB;AAC9B,QAAA,eAAe,EAAE;AACf,YAAA,gBAAgB,EAAE;AAChB,gBAAA,cAAc,EAAE,kBAAkB;AAClC,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,oBAAoB,EAAE;AACpB,gBAAA,cAAc,EAAE,sBAAsB;AACtC,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,aAAa,EAAE;AACb,gBAAA,WAAW,EAAE;AACX,oBAAA,OAAO,EAAE,IAAI,MAAM,CAAC,kCAAkC,CAAC;AACxD,iBAAA;AACD,gBAAA,cAAc,EAAE,eAAe;AAC/B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,mBAAmB,EAAE;AACnB,gBAAA,cAAc,EAAE,qBAAqB;AACrC,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,WAAW,EAAE;AACX,gBAAA,cAAc,EAAE,aAAa;AAC7B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,kBAAkB,EAAE;AAClB,gBAAA,cAAc,EAAE,oBAAoB;AACpC,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AACjB,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,qBAAqB,GAA+B;AAC/D,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,uBAAuB;AAClC,QAAA,eAAe,EAAE;AACf,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,kBAAkB;AAC9B,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,QAAQ,EAAE;AACR,gBAAA,cAAc,EAAE,UAAU;AAC1B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,gBAAgB,GAA+B;AAC1D,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,kBAAkB;AAC7B,QAAA,eAAe,EAAE;AACf,YAAA,WAAW,EAAE;AACX,gBAAA,cAAc,EAAE,aAAa;AAC7B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,MAAM,EAAE;AACN,gBAAA,cAAc,EAAE,QAAQ;AACxB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,MAAM;AACZ,oBAAA,aAAa,EAAE;wBACb,YAAY;wBACZ,SAAS;wBACT,QAAQ;wBACR,WAAW;wBACX,UAAU;AACX,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,gBAAgB,EAAE;AAChB,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,GAAG;AACrB,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,kBAAkB;AAClC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,SAAS,EAAE;AACT,gBAAA,cAAc,EAAE,iBAAiB;AACjC,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AACjB,iBAAA;AACF,aAAA;AACD,YAAA,aAAa,EAAE;AACb,gBAAA,cAAc,EAAE,qBAAqB;AACrC,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AACjB,iBAAA;AACF,aAAA;AACD,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,gBAAgB,EAAE;AAChB,gBAAA,cAAc,EAAE,kBAAkB;AAClC,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,UAAU,EAAE;AACV,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE;AACpC,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,gBAAgB,GAA+B;AAC1D,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,kBAAkB;AAC7B,QAAA,UAAU,EAAE,kBAAkB;AAC9B,QAAA,wBAAwB,EAAE;AACxB,YAAA,cAAc,EAAE,MAAM;AACtB,YAAA,UAAU,EAAE,MAAM;AACnB,SAAA;AACD,QAAA,eAAe,EAAE;AACf,YAAA,WAAW,EAAE;AACX,gBAAA,cAAc,EAAE,aAAa;AAC7B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,MAAM,EAAE;AACN,gBAAA,cAAc,EAAE,QAAQ;AACxB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,MAAM;AACZ,oBAAA,aAAa,EAAE;wBACb,YAAY;wBACZ,SAAS;wBACT,QAAQ;wBACR,WAAW;wBACX,UAAU;AACX,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,gBAAgB,EAAE;AAChB,gBAAA,WAAW,EAAE;AACX,oBAAA,gBAAgB,EAAE,GAAG;AACrB,oBAAA,gBAAgB,EAAE,CAAC;AACpB,iBAAA;AACD,gBAAA,cAAc,EAAE,kBAAkB;AAClC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,SAAS,EAAE;AACT,gBAAA,cAAc,EAAE,iBAAiB;AACjC,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AACjB,iBAAA;AACF,aAAA;AACD,YAAA,aAAa,EAAE;AACb,gBAAA,cAAc,EAAE,qBAAqB;AACrC,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AACjB,iBAAA;AACF,aAAA;AACD,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,gBAAgB,EAAE;AAChB,gBAAA,cAAc,EAAE,kBAAkB;AAClC,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,UAAU,EAAE;AACV,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE;AACpC,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AACjB,oBAAA,SAAS,EAAE,YAAY;AACxB,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,yBAAyB,GAA+B;AACnE,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,2BAA2B;AACtC,QAAA,eAAe,EAAE;AACf,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AAChB,oBAAA,OAAO,EAAE;AACP,wBAAA,IAAI,EAAE;AACJ,4BAAA,IAAI,EAAE,WAAW;AACjB,4BAAA,SAAS,EAAE,sBAAsB;AAClC,yBAAA;AACF,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,QAAQ,EAAE;AACR,gBAAA,cAAc,EAAE,UAAU;AAC1B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,oBAAoB,GAA+B;AAC9D,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,sBAAsB;AACjC,QAAA,eAAe,EAAE;AACf,YAAA,OAAO,EAAE;AACP,gBAAA,WAAW,EAAE;AACX,oBAAA,OAAO,EAAE,IAAI,MAAM,CAAC,kCAAkC,CAAC;AACxD,iBAAA;AACD,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,WAAW,EAAE;AACX,gBAAA,WAAW,EAAE;AACX,oBAAA,SAAS,EAAE,IAAI;AAChB,iBAAA;AACD,gBAAA,cAAc,EAAE,aAAa;AAC7B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,SAAS,EAAE;AACT,gBAAA,cAAc,EAAE,iBAAiB;AACjC,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AACjB,iBAAA;AACF,aAAA;AACD,YAAA,UAAU,EAAE;AACV,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE;AACpC,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,oBAAoB,GAA+B;AAC9D,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,sBAAsB;AACjC,QAAA,eAAe,EAAE;AACf,YAAA,OAAO,EAAE;AACP,gBAAA,WAAW,EAAE;AACX,oBAAA,OAAO,EAAE,IAAI,MAAM,CAAC,kCAAkC,CAAC;AACxD,iBAAA;AACD,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,WAAW,EAAE;AACX,gBAAA,WAAW,EAAE;AACX,oBAAA,SAAS,EAAE,IAAI;AAChB,iBAAA;AACD,gBAAA,cAAc,EAAE,aAAa;AAC7B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,SAAS,EAAE;AACT,gBAAA,cAAc,EAAE,iBAAiB;AACjC,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,UAAU;AACjB,iBAAA;AACF,aAAA;AACD,YAAA,UAAU,EAAE;AACV,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE;AACpC,iBAAA;AACF,aAAA;AACD,YAAA,QAAQ,EAAE;AACR,gBAAA,cAAc,EAAE,UAAU;AAC1B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,YAAY;AAClB,oBAAA,KAAK,EAAE;wBACL,IAAI,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,qBAAqB,EAAE;AAC9D,qBAAA;AACF,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,mBAAmB,GAA+B;AAC7D,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,qBAAqB;AAChC,QAAA,eAAe,EAAE;AACf,YAAA,WAAW,EAAE;AACX,gBAAA,WAAW,EAAE;AACX,oBAAA,SAAS,EAAE,IAAI;AAChB,iBAAA;AACD,gBAAA,cAAc,EAAE,aAAa;AAC7B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,SAAS,EAAE;AACT,gBAAA,cAAc,EAAE,WAAW;AAC3B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,WAAW,EAAE;AACX,gBAAA,cAAc,EAAE,aAAa;AAC7B,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,YAAY;AAClB,oBAAA,KAAK,EAAE;wBACL,IAAI,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,qBAAqB,EAAE;AAC9D,qBAAA;AACF,iBAAA;AACF,aAAA;AACD,YAAA,eAAe,EAAE;AACf,gBAAA,cAAc,EAAE,iBAAiB;AACjC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,YAAY;AAClB,oBAAA,KAAK,EAAE;AACL,wBAAA,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wBACxB,WAAW,EAAE,EAAE,gBAAgB,EAAE,CAAC,EAAE,gBAAgB,EAAE,CAAC,EAAE;AAC1D,qBAAA;AACF,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,mBAAmB,GAA+B;AAC7D,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,qBAAqB;AAChC,QAAA,eAAe,EAAE;AACf,YAAA,IAAI,EAAE;AACJ,gBAAA,cAAc,EAAE,MAAM;AACtB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,WAAW,EAAE;AACX,gBAAA,cAAc,EAAE,aAAa;AAC7B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,OAAO,EAAE;AACP,gBAAA,cAAc,EAAE,SAAS;AACzB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AACjB,oBAAA,SAAS,EAAE,qBAAqB;AACjC,iBAAA;AACF,aAAA;AACD,YAAA,UAAU,EAAE;AACV,gBAAA,cAAc,EAAE,YAAY;AAC5B,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,YAAY;AAClB,oBAAA,KAAK,EAAE;wBACL,IAAI,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,qBAAqB,EAAE;AAC9D,qBAAA;AACF,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,eAAe,GAA+B;AACzD,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,iBAAiB;AAC5B,QAAA,eAAe,EAAE;AACf,YAAA,oBAAoB,EAAE;AACpB,gBAAA,cAAc,EAAE,sBAAsB;AACtC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AACjB,oBAAA,SAAS,EAAE,6BAA6B;AACzC,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,2BAA2B,GAA+B;AACrE,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,6BAA6B;AACxC,QAAA,eAAe,EAAE;AACf,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACD,YAAA,KAAK,EAAE;AACL,gBAAA,cAAc,EAAE,OAAO;AACvB,gBAAA,QAAQ,EAAE,IAAI;AACd,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,kCAAkC,GAA+B;AAC5E,IAAA,cAAc,EAAE,oBAAoB;AACpC,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,oCAAoC;AAC/C,QAAA,UAAU,EAAE,kBAAkB;AAC9B,QAAA,wBAAwB,EAAE,gBAAgB,CAAC,IAAI,CAAC,wBAAwB;QACxE,eAAe,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACV,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAA,EAAA,EACxC,MAAM,EAAE;AACN,gBAAA,cAAc,EAAE,QAAQ;AACxB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AACjB,oBAAA,SAAS,EAAE,sBAAsB;AAClC,iBAAA;aACF,EACF,CAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,oCAAoC,GAA+B;AAC9E,IAAA,cAAc,EAAE,sBAAsB;AACtC,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,sCAAsC;AACjD,QAAA,UAAU,EAAE,kBAAkB;AAC9B,QAAA,wBAAwB,EAAE,gBAAgB,CAAC,IAAI,CAAC,wBAAwB;QACxE,eAAe,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACV,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAA,EAAA,EACxC,MAAM,EAAE;AACN,gBAAA,cAAc,EAAE,QAAQ;AACxB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AACjB,oBAAA,SAAS,EAAE,sBAAsB;AAClC,iBAAA;aACF,EACF,CAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,mCAAmC,GAA+B;AAC7E,IAAA,cAAc,EAAE,qBAAqB;AACrC,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,qCAAqC;AAChD,QAAA,UAAU,EAAE,kBAAkB;AAC9B,QAAA,wBAAwB,EAAE,gBAAgB,CAAC,IAAI,CAAC,wBAAwB;QACxE,eAAe,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACV,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAA,EAAA,EACxC,MAAM,EAAE;AACN,gBAAA,cAAc,EAAE,QAAQ;AACxB,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,WAAW;AACjB,oBAAA,SAAS,EAAE,sBAAsB;AAClC,iBAAA;aACF,EACF,CAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,qCAAqC,GAA+B;AAC/E,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,uCAAuC;AAClD,QAAA,eAAe,EAAE;AACf,YAAA,iBAAiB,EAAE;AACjB,gBAAA,cAAc,EAAE,oBAAoB;AACpC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,wCAAwC,GAA+B;AAClF,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,0CAA0C;AACrD,QAAA,eAAe,EAAE;AACf,YAAA,iBAAiB,EAAE;AACjB,gBAAA,cAAc,EAAE,oBAAoB;AACpC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,0CAA0C,GAA+B;AACpF,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,4CAA4C;AACvD,QAAA,eAAe,EAAE;AACf,YAAA,iBAAiB,EAAE;AACjB,gBAAA,cAAc,EAAE,oBAAoB;AACpC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,yCAAyC,GAA+B;AACnF,IAAA,IAAI,EAAE;AACJ,QAAA,IAAI,EAAE,WAAW;AACjB,QAAA,SAAS,EAAE,2CAA2C;AACtD,QAAA,eAAe,EAAE;AACf,YAAA,iBAAiB,EAAE;AACjB,gBAAA,cAAc,EAAE,oBAAoB;AACpC,gBAAA,IAAI,EAAE;AACJ,oBAAA,IAAI,EAAE,QAAQ;AACf,iBAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,IAAI,cAAc,GAAG;AAC1B,IAAA,gBAAgB,EAAE,gBAAgB;AAClC,IAAA,qCAAqC,EAAE,kCAAkC;AACzE,IAAA,uCAAuC,EAAE,oCAAoC;AAC7E,IAAA,sCAAsC,EAAE,mCAAmC;CAC5E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClgED;;;;;;AAMG;AAeI,MAAM,WAAW,GAAuB;AAC7C,IAAA,aAAa,EAAE,aAAa;AAC5B,IAAA,MAAM,EAAE;AACN,QAAA,cAAc,EAAE,cAAc;AAC9B,QAAA,QAAQ,EAAE,IAAI;AACd,QAAA,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,MAAM;AACZ,YAAA,aAAa,EAAE;gBACb,0BAA0B;gBAC1B,iBAAiB;gBACjB,WAAW;gBACX,YAAY;gBACZ,YAAY;gBACZ,WAAW;gBACX,YAAY;AACb,aAAA;AACF,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,cAAc,GAAuB;AAChD,IAAA,aAAa,EAAE,CAAC,SAAS,EAAE,gBAAgB,CAAC;AAC5C,IAAA,MAAM,EAAE;AACN,QAAA,cAAc,EAAE,gBAAgB;AAChC,QAAA,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,MAAM,GAAuB;AACxC,IAAA,aAAa,EAAE,QAAQ;AACvB,IAAA,MAAM,EAAE;AACN,QAAA,YAAY,EAAE,kBAAkB;AAChC,QAAA,UAAU,EAAE,IAAI;AAChB,QAAA,cAAc,EAAE,QAAQ;AACxB,QAAA,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,YAAY,GAAuB;AAC9C,IAAA,aAAa,EAAE,aAAa;AAC5B,IAAA,MAAM,EAAE;AACN,QAAA,YAAY,EAAE,kBAAkB;AAChC,QAAA,UAAU,EAAE,IAAI;AAChB,QAAA,cAAc,EAAE,cAAc;AAC9B,QAAA,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,eAAe,GAAuB;AACjD,IAAA,aAAa,EAAE,CAAC,SAAS,EAAE,gBAAgB,CAAC;AAC5C,IAAA,MAAM,EAAEA,sBAA4B;CACrC,CAAC;AAEK,MAAM,OAAO,GAAuB;AACzC,IAAA,aAAa,EAAE,QAAQ;AACvB,IAAA,MAAM,EAAE;AACN,QAAA,YAAY,EAAE,kBAAkB;AAChC,QAAA,UAAU,EAAE,IAAI;AAChB,QAAA,cAAc,EAAE,QAAQ;AACxB,QAAA,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,QAAQ,GAA0B;AAC7C,IAAA,aAAa,EAAE,UAAU;AACzB,IAAA,MAAM,EAAE;AACN,QAAA,cAAc,EAAE,UAAU;AAC1B,QAAA,QAAQ,EAAE,IAAI;AACd,QAAA,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;AACD,IAAA,YAAY,EAAE,IAAI;CACnB,CAAC;AAEK,MAAM,OAAO,GAA0B;AAC5C,IAAA,aAAa,EAAE,SAAS;AACxB,IAAA,MAAM,EAAE;AACN,QAAA,WAAW,EAAE;AACX,YAAA,OAAO,EAAE,IAAI,MAAM,CAAC,kCAAkC,CAAC;AACxD,SAAA;AACD,QAAA,cAAc,EAAE,SAAS;AACzB,QAAA,QAAQ,EAAE,IAAI;AACd,QAAA,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,KAAK,GAA4B;AAC5C,IAAA,aAAa,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC;AACnC,IAAA,MAAM,EAAE;AACN,QAAA,WAAW,EAAE;AACX,YAAA,OAAO,EAAE,IAAI,MAAM,CAAC,wCAAwC,CAAC;AAC9D,SAAA;AACD,QAAA,cAAc,EAAE,OAAO;AACvB,QAAA,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,MAAM,GAA4B;AAC7C,IAAA,aAAa,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAC;AACpC,IAAA,MAAM,EAAE;AACN,QAAA,cAAc,EAAE,QAAQ;AACxB,QAAA,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,eAAe,GAA4B;AACtD,IAAA,aAAa,EAAE,iBAAiB;AAChC,IAAA,MAAM,EAAE;AACN,QAAA,cAAc,EAAE,iBAAiB;AACjC,QAAA,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,UAAU,GAA4B;AACjD,IAAA,aAAa,EAAE,YAAY;AAC3B,IAAA,MAAM,EAAE;AACN,QAAA,YAAY,EAAE,YAAY;AAC1B,QAAA,UAAU,EAAE,IAAI;AAChB,QAAA,cAAc,EAAE,aAAa;AAC7B,QAAA,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,QAAQ,GAA0B;AAC7C,IAAA,aAAa,EAAE,UAAU;AACzB,IAAA,MAAM,EAAE;AACN,QAAA,cAAc,EAAE,UAAU;AAC1B,QAAA,QAAQ,EAAE,IAAI;AACd,QAAA,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,YAAY,GAAuB;AAC9C,IAAA,aAAa,EAAE,CAAC,SAAS,EAAE,aAAa,CAAC;AACzC,IAAA,MAAM,EAAE;AACN,QAAA,YAAY,EAAE,kBAAkB;AAChC,QAAA,UAAU,EAAE,IAAI;AAChB,QAAA,cAAc,EAAE,cAAc;AAC9B,QAAA,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,YAAY,GAAuB;AAC9C,IAAA,aAAa,EAAE,cAAc;AAC7B,IAAA,MAAM,EAAEC,yBAA+B;CACxC,CAAC;AAEK,MAAM,cAAc,GAAuB;AAChD,IAAA,aAAa,EAAE,gBAAgB;AAC/B,IAAA,MAAM,EAAEC,2BAAiC;CAC1C,CAAC;AAEK,MAAM,oBAAoB,GAAuB;AACtD,IAAA,aAAa,EAAE,sBAAsB;AACrC,IAAA,MAAM,EAAEC,oBAA0B;CACnC,CAAC;AAEK,MAAM,aAAa,GAAuB;AAC/C,IAAA,aAAa,EAAE,eAAe;AAC9B,IAAA,MAAM,EAAEC,iBAAuB;CAChC,CAAC;AAEK,MAAM,WAAW,GAA0B;AAChD,IAAA,aAAa,EAAE,aAAa;AAC5B,IAAA,MAAM,EAAE;AACN,QAAA,cAAc,EAAE,aAAa;AAC7B,QAAA,QAAQ,EAAE,IAAI;AACd,QAAA,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;CACF,CAAC;AAEK,MAAM,QAAQ,GAA0B;AAC7C,IAAA,aAAa,EAAE,UAAU;AACzB,IAAA,MAAM,EAAE;AACN,QAAA,cAAc,EAAE,UAAU;AAC1B,QAAA,QAAQ,EAAE,IAAI;AACd,QAAA,IAAI,EAAE;AACJ,YAAA,IAAI,EAAE,QAAQ;AACf,SAAA;AACF,KAAA;AACD,IAAA,YAAY,EAAE,IAAI;CACnB;;ACnOD;AACA;AAIA;;;;;;AAMG;AACH,SAAS,MAAM,CAAC,KAA8B,EAAA;AAC5C,IAAA,IAAI,KAAK,CAAC,UAAU,KAAK,SAAS,IAAI,KAAK,CAAC,UAAU,CAAC,OAAO,KAAK,SAAS,EAAE;AAC5E,QAAA,OAAO,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AACjC,KAAA;AAED,IAAA,OAAO,KAAmB,CAAC;AAC7B,CAAC;AAED;;;;;;AAMG;AACG,MAAO,mBAAoB,SAAQ,KAAK,CAAA;AAkB5C;;;;AAIG;AACH,IAAA,WAAA,CAAY,mBAA+B,EAAA;;;AAEzC,QAAA,MAAM,CAAC,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAC;AACtC,QAAA,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;AAEjB,QAAA,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,CAAA,EAAA,GAAA,CAAC,CAAC,OAAO,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAAE,CAAC;AAC/B,QAAA,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;KACxB;AACF;;AC3DD;AACA;AAuBM,SAAU,iBAAiB,CAAC,QAA8B,EAAA;IAC9D,MAAM,MAAM,GAAc,EAAE,CAAC;AAC7B,IAAA,IAAI,CAAC,QAAQ;QAAE,OAAO;AAEtB,IAAA,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;AAC7B,QAAA,MAAM,IAAI,KAAK,CACb,+EAA+E,CAChF,CAAC;AACH,KAAA;AAED,IAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;QAC3C,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AACrD,KAAA;AAED,IAAA,OAAO,MAAM,CAAC;AAChB,CAAC;AAEK,SAAU,iBAAiB,CAC/B,QAA+C,EAAA;IAE/C,OAAO,QAAQ,KAAR,IAAA,IAAA,QAAQ,KAAR,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,QAAQ,CAAE,GAAG,CAAC,CAAC,MAAM,sCAAW,MAAM,CAAA,EAAA,EAAE,OAAO,EAAE,iBAAiB,CAAC,MAAM,CAAC,OAAO,CAAC,EAAG,CAAA,CAAA,CAAC,CAAC;AAChG,CAAC;AAEK,SAAU,4BAA4B,CAAC,KAA6B,EAAA;AACxE,IAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,KAAK,CACR,EAAA,EAAA,eAAe,EAAE,iBAAiB,CAAC,KAAK,CAAC,eAAe,CAAC,EACzD,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,MAAK,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAC5B,IAAI,CACP,EAAA,EAAA,eAAe,EAAE,iBAAiB,CAAC,IAAI,CAAC,eAAe,CAAC,EAAA,CAAA,CACxD,CAAC,EACH,CAAA,CAAA;AACJ,CAAC;AAEK,SAAU,2BAA2B,CACzC,IAAmC,EAAA;;IAEnC,OACK,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,KACP,GAAG,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,IAAI,CAAC,GAAG,CAAE,EAAA,EAAA,eAAe,EAAE,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,KAChF,KAAK,EAAE,IAAI,CAAC,KAAK;cACd,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,IAAI,CAAC,KAAK,KAAE,eAAe,EAAE,iBAAiB,CAAC,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,0CAAE,eAAe,CAAC,MAChF,SAAS,EACb,CAAA,CAAA;AACJ;;ACpEA;AACA;AAKA,MAAM,4BAA4B,GAAG,2BAA2B,CAAC;AAEjE;;;AAGG;AACG,SAAU,4CAA4C,CAC1D,UAAyB,EAAA;IAEzB,OAAO;AACL,QAAA,IAAI,EAAE,sDAAsD;QAC5D,WAAW,CAAC,OAAO,EAAE,IAAI,EAAA;YACvB,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,4BAA4B,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC;AAClE,YAAA,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;SACtB;KACF,CAAC;AACJ;;ACtBA;;;;;;AAMG;AAoDH;AACa,MAAA,eAAgB,SAAQC,qBAAU,CAAC,aAAa,CAAA;AAK3D;;;;;AAKG;IACH,WAAY,CAAA,QAAgB,EAAE,OAAuC,EAAA;;QACnE,IAAI,QAAQ,KAAK,SAAS,EAAE;AAC1B,YAAA,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;AAC9C,SAAA;;QAGD,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,EAAE,CAAC;AACd,SAAA;AACD,QAAA,MAAM,QAAQ,GAAkC;AAC9C,YAAA,kBAAkB,EAAE,iCAAiC;SACtD,CAAC;QAEF,MAAM,cAAc,GAAG,CAAA,iCAAA,CAAmC,CAAC;QAC3D,MAAM,eAAe,GACnB,OAAO,CAAC,gBAAgB,IAAI,OAAO,CAAC,gBAAgB,CAAC,eAAe;cAChE,GAAG,OAAO,CAAC,gBAAgB,CAAC,eAAe,CAAI,CAAA,EAAA,cAAc,CAAE,CAAA;AACjE,cAAE,CAAA,EAAG,cAAc,CAAA,CAAE,CAAC;AAE1B,QAAA,MAAM,mBAAmB,GACpB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,QAAQ,GACR,OAAO,CAAA,EAAA,EACV,gBAAgB,EAAE;gBAChB,eAAe;AAChB,aAAA,EACD,OAAO,EACL,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,OAAO,CAAC,QAAQ,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,OAAO,CAAC,OAAO,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,2BAA2B,GACrE,CAAC;QACF,KAAK,CAAC,mBAAmB,CAAC,CAAC;AAE3B,QAAA,IAAI,CAAA,OAAO,KAAA,IAAA,IAAP,OAAO,KAAP,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAE,QAAQ,KAAI,OAAO,CAAC,QAAQ,CAAC,kBAAkB,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE;YACzE,MAAM,gBAAgB,GAAsC,OAAO,CAAC,QAAQ,CAAC,kBAAkB,EAAE,CAAC;AAClG,YAAA,MAAM,oCAAoC,GAAG,gBAAgB,CAAC,IAAI,CAChE,CAAC,cAAc,KACb,cAAc,CAAC,IAAI;gBACnBC,2BAAgB,CAAC,mCAAmC,CACvD,CAAC;YACF,IAAI,CAAC,oCAAoC,EAAE;AACzC,gBAAA,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;oBACzB,IAAI,EAAEA,2BAAgB,CAAC,mCAAmC;AAC3D,iBAAA,CAAC,CAAC;gBACH,IAAI,CAAC,QAAQ,CAAC,SAAS,CACrBA,2BAAgB,CAAC,+BAA+B,CAAC;AAC/C,oBAAA,MAAM,EAAE,CAAA,EAAG,mBAAmB,CAAC,OAAO,CAAW,SAAA,CAAA;AACjD,oBAAA,kBAAkB,EAAE;wBAClB,2BAA2B,EACzBD,qBAAU,CAAC,gCAAgC;AAC9C,qBAAA;AACF,iBAAA,CAAC,CACH,CAAC;AACH,aAAA;AACF,SAAA;;AAED,QAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;;QAGzB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,YAAY,CAAC;AACrD,QAAA,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;KACpD;;AAGO,IAAA,yBAAyB,CAAC,UAAmB,EAAA;QACnD,IAAI,CAAC,UAAU,EAAE;YACf,OAAO;AACR,SAAA;AACD,QAAA,MAAM,gBAAgB,GAAG;AACvB,YAAA,IAAI,EAAE,wBAAwB;AAC9B,YAAA,MAAM,WAAW,CACf,OAAwB,EACxB,IAAiB,EAAA;gBAEjB,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACrC,gBAAA,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AACpB,oBAAA,MAAM,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;wBACjD,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE;4BACpC,OAAO,cAAc,GAAG,UAAU,CAAC;AACpC,yBAAA;AAAM,6BAAA;AACL,4BAAA,OAAO,IAAI,CAAC;AACb,yBAAA;AACH,qBAAC,CAAC,CAAC;AACH,oBAAA,OAAO,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACpD,iBAAA;AACD,gBAAA,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;aACtB;SACF,CAAC;AACF,QAAA,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;KAC3C;AAED;;;AAGG;AACI,IAAA,cAAc,CACnB,OAAqC,EAAA;QAErC,MAAM,IAAI,GAAG,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;QAClD,OAAO;YACL,IAAI,GAAA;AACF,gBAAA,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;aACpB;YACD,CAAC,MAAM,CAAC,aAAa,CAAC,GAAA;AACpB,gBAAA,OAAO,IAAI,CAAC;aACb;YACD,MAAM,EAAE,MAAK;AACX,gBAAA,OAAO,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;aAC9C;SACF,CAAC;KACH;AAEc,IAAA,uBAAuB,CACpC,OAAqC,EAAA;;YAErC,IAAI,MAAM,GAAG,MAAAE,aAAA,CAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAA,CAAC;AAChD,YAAA,MAAA,MAAAA,aAAA,CAAM,MAAM,CAAC,KAAK,IAAI,EAAE,CAAA,CAAC;AACzB,YAAA,IAAI,iBAAiB,GAAG,MAAM,CAAC,QAAQ,CAAC;AACxC,YAAA,OAAO,iBAAiB,EAAE;gBACxB,MAAM,GAAG,MAAMA,aAAA,CAAA,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAA,CAAC;AACnE,gBAAA,iBAAiB,GAAG,MAAM,CAAC,QAAQ,CAAC;AACpC,gBAAA,MAAA,MAAAA,aAAA,CAAM,MAAM,CAAC,KAAK,IAAI,EAAE,CAAA,CAAC;AAC1B,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAEc,IAAA,sBAAsB,CACnC,OAAqC,EAAA;;;;gBAErC,KAAyB,IAAA,EAAA,GAAAC,mBAAA,CAAA,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAA,EAAA,EAAA,EAAA,EAAA,GAAA,MAAAD,aAAA,CAAA,EAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,IAAA,GAAA;oBAAnD,MAAM,IAAI,WAAA,CAAA;oBACnB,MAAAA,aAAA,CAAA,OAAOE,sBAAA,CAAAD,oBAAA,IAAI,CAAA,CAAA,CAAA,CAAC;AACb,iBAAA;;;;;;;;;SACF,CAAA,CAAA;AAAA,KAAA;AAED;;;AAGG;AACI,IAAA,kBAAkB,CACvB,OAAyC,EAAA;QAEzC,MAAM,IAAI,GAAG,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;QACtD,OAAO;YACL,IAAI,GAAA;AACF,gBAAA,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;aACpB;YACD,CAAC,MAAM,CAAC,aAAa,CAAC,GAAA;AACpB,gBAAA,OAAO,IAAI,CAAC;aACb;YACD,MAAM,EAAE,MAAK;AACX,gBAAA,OAAO,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,CAAC;aAClD;SACF,CAAC;KACH;AAEc,IAAA,2BAA2B,CACxC,OAAyC,EAAA;;YAEzC,IAAI,MAAM,GAAG,MAAAD,aAAA,CAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAA,CAAC;AACpD,YAAA,MAAA,MAAAA,aAAA,CAAM,MAAM,CAAC,KAAK,IAAI,EAAE,CAAA,CAAC;AACzB,YAAA,IAAI,iBAAiB,GAAG,MAAM,CAAC,QAAQ,CAAC;AACxC,YAAA,OAAO,iBAAiB,EAAE;gBACxB,MAAM,GAAG,MAAMA,aAAA,CAAA,IAAI,CAAC,sBAAsB,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAA,CAAC;AACvE,gBAAA,iBAAiB,GAAG,MAAM,CAAC,QAAQ,CAAC;AACpC,gBAAA,MAAA,MAAAA,aAAA,CAAM,MAAM,CAAC,KAAK,IAAI,EAAE,CAAA,CAAC;AAC1B,aAAA;SACF,CAAA,CAAA;AAAA,KAAA;AAEc,IAAA,0BAA0B,CACvC,OAAyC,EAAA;;;;gBAEzC,KAAyB,IAAA,EAAA,GAAAC,mBAAA,CAAA,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,CAAA,EAAA,EAAA,EAAA,EAAA,GAAA,MAAAD,aAAA,CAAA,EAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,IAAA,GAAA;oBAAvD,MAAM,IAAI,WAAA,CAAA;oBACnB,MAAAA,aAAA,CAAA,OAAOE,sBAAA,CAAAD,oBAAA,IAAI,CAAA,CAAA,CAAA,CAAC;AACb,iBAAA;;;;;;;;;SACF,CAAA,CAAA;AAAA,KAAA;AAwBD;;;AAGG;IACH,eAAe,CACb,GAAG,IAEkE,EAAA;AAErE,QAAA,IAAI,aAAuC,CAAC;AAC5C,QAAA,IAAI,kBAAiD,CAAC;AACtD,QAAA,IAAI,OAAO,CAAC;AACZ,QAAA,IACE,IAAI,CAAC,CAAC,CAAC,KAAK,0BAA0B;AACtC,YAAA,IAAI,CAAC,CAAC,CAAC,KAAK,iBAAiB;AAC7B,YAAA,IAAI,CAAC,CAAC,CAAC,KAAK,WAAW;AACvB,YAAA,IAAI,CAAC,CAAC,CAAC,KAAK,YAAY;AACxB,YAAA,IAAI,CAAC,CAAC,CAAC,KAAK,YAAY;AACxB,YAAA,IAAI,CAAC,CAAC,CAAC,KAAK,WAAW;AACvB,YAAA,IAAI,CAAC,CAAC,CAAC,KAAK,YAAY,EACxB;YACA,aAAa,GAAG,mCAAmC,CAAC;AACpD,YAAA,kBAAkB,GAAG;AACnB,gBAAA,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;AAChB,gBAAA,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;AACpB,gBAAA,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;aACjB,CAAC;AACF,YAAA,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACnB,SAAA;AAAM,aAAA,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,kBAAkB,EAAE;YACzC,aAAa,GAAG,iCAAiC,CAAC;AAClD,YAAA,kBAAkB,GAAG;AACnB,gBAAA,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;AAChB,gBAAA,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;AACpB,gBAAA,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;aACjB,CAAC;AACF,YAAA,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACnB,SAAA;AAAM,aAAA;YACL,MAAM,IAAI,SAAS,CACjB,CAAwD,qDAAA,EAAA,IAAI,CAAC,CAAC,CAAC,CAAI,EAAA,CAAA,CACpE,CAAC;AACH,SAAA;AACD,QAAA,kBAAkB,CAAC,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QAC3C,OAAO,IAAI,CAAC,oBAAoB,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC;KACrE;AAED;;;;;AAKG;AACH,IAAA,wBAAwB,CACtB,OAAe,EACf,QAAgB,EAChB,OAAgD,EAAA;AAEhD,QAAA,OAAO,IAAI,CAAC,oBAAoB,CAC9B,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,EAC9B,qCAAqC,CACtC,CAAC;KACH;AAED;;;;AAIG;IACH,kBAAkB,CAChB,YAAuC,EACvC,OAA0C,EAAA;AAE1C,QAAA,OAAO,IAAI,CAAC,oBAAoB,CAC9B,EAAE,YAAY,EAAE,OAAO,EAAE,EACzB,+BAA+B,CAChC,CAAC;KACH;AAED;;;;AAIG;IACH,oBAAoB,CAClB,cAA2C,EAC3C,OAA4C,EAAA;AAE5C,QAAA,OAAO,IAAI,CAAC,oBAAoB,CAC9B,EAAE,cAAc,EAAE,OAAO,EAAE,EAC3B,iCAAiC,CAClC,CAAC;KACH;AAED;;;;;AAKG;IACH,0BAA0B,CACxB,oBAA0C,EAC1C,OAAkD,EAAA;AAElD,QAAA,OAAO,IAAI,CAAC,oBAAoB,CAC9B,EAAE,oBAAoB,EAAE,OAAO,EAAE,EACjC,uCAAuC,CACxC,CAAC;KACH;AAED;;;;;AAKG;AACH,IAAA,mBAAmB,CACjB,OAAe,EACf,aAAgC,EAChC,OAA2C,EAAA;AAE3C,QAAA,OAAO,IAAI,CAAC,oBAAoB,CAC9B,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,EAAE,EACnC,gCAAgC,CACjC,CAAC;KACH;AAED;;;AAGG;AACK,IAAA,cAAc,CACpB,OAAqC,EAAA;QAErC,OAAO,IAAI,CAAC,oBAAoB,CAAC,EAAE,OAAO,EAAE,EAAE,0BAA0B,CAAC,CAAC;KAC3E;AAED;;;;AAIG;IACH,YAAY,CACV,WAAmB,EACnB,OAAoC,EAAA;AAEpC,QAAA,OAAO,IAAI,CAAC,oBAAoB,CAC9B,EAAE,WAAW,EAAE,OAAO,EAAE,EACxB,yBAAyB,CAC1B,CAAC;KACH;AAED;;;AAGG;AACK,IAAA,kBAAkB,CACxB,OAAyC,EAAA;QAEzC,OAAO,IAAI,CAAC,oBAAoB,CAC9B,EAAE,OAAO,EAAE,EACX,8BAA8B,CAC/B,CAAC;KACH;AAED;;;;AAIG;IACH,gBAAgB,CACd,OAAe,EACf,OAAwC,EAAA;AAExC,QAAA,OAAO,IAAI,CAAC,oBAAoB,CAC9B,EAAE,OAAO,EAAE,OAAO,EAAE,EACpB,6BAA6B,CAC9B,CAAC;KACH;AAED;;;;AAIG;IACH,mBAAmB,CACjB,OAAe,EACf,OAA2C,EAAA;AAE3C,QAAA,OAAO,IAAI,CAAC,oBAAoB,CAC9B,EAAE,OAAO,EAAE,OAAO,EAAE,EACpB,gCAAgC,CACjC,CAAC;KACH;AAED;;;AAGG;AACH,IAAA,kBAAkB,CAChB,OAA0C,EAAA;QAE1C,OAAO,IAAI,CAAC,oBAAoB,CAC9B,EAAE,OAAO,EAAE,EACX,+BAA+B,CAChC,CAAC;KACH;AAED;;;;AAIG;IACK,kBAAkB,CACxB,QAAgB,EAChB,OAAyC,EAAA;AAEzC,QAAA,OAAO,IAAI,CAAC,oBAAoB,CAC9B,EAAE,QAAQ,EAAE,OAAO,EAAE,EACrB,8BAA8B,CAC/B,CAAC;KACH;AAED;;;;AAIG;IACK,sBAAsB,CAC5B,QAAgB,EAChB,OAA6C,EAAA;AAE7C,QAAA,OAAO,IAAI,CAAC,oBAAoB,CAC9B,EAAE,QAAQ,EAAE,OAAO,EAAE,EACrB,kCAAkC,CACnC,CAAC;KACH;AACF,CAAA;AACD;AACA,MAAM,UAAU,GAAGH,qBAAU,CAAC,gBAAgB,CAAC,OAAO,cAAc,KAAK,CAAC,CAAC;AAE3E,MAAM,mCAAmC,GAA6B;AACpE,IAAA,IAAI,EAAE,mCAAmC;AACzC,IAAA,UAAU,EAAE,MAAM;AAClB,IAAA,SAAS,EAAE;AACT,QAAA,GAAG,EAAE;YACH,aAAa,EAAEK,qCAA6C;AAC7D,SAAA;AACD,QAAA,OAAO,EAAE;YACP,UAAU,EAAEC,aAAqB;AAClC,SAAA;AACF,KAAA;IACD,WAAW,EAAEC,cAAyB;AACtC,IAAA,eAAe,EAAE;AACf,QAAAC,KAAgB;AAChB,QAAAC,MAAiB;AACjB,QAAAC,eAA0B;AAC1B,QAAAC,UAAqB;AACtB,KAAA;IACD,aAAa,EAAE,CAACC,QAAmB,EAAEC,OAAkB,CAAC;IACxD,gBAAgB,EAAE,CAACC,WAAsB,EAAEC,MAAiB,CAAC;AAC7D,IAAA,SAAS,EAAE,QAAQ;IACnB,UAAU;CACX,CAAC;AACF,MAAM,iCAAiC,GAA6B;AAClE,IAAA,IAAI,EAAE,mCAAmC;AACzC,IAAA,UAAU,EAAE,MAAM;AAClB,IAAA,SAAS,EAAE;AACT,QAAA,GAAG,EAAE;YACH,aAAa,EAAEV,qCAA6C;AAC7D,SAAA;AACD,QAAA,OAAO,EAAE;YACP,UAAU,EAAEC,aAAqB;AAClC,SAAA;AACF,KAAA;IACD,WAAW,EAAEU,eAA0B;AACvC,IAAA,eAAe,EAAE;AACf,QAAAR,KAAgB;AAChB,QAAAC,MAAiB;AACjB,QAAAC,eAA0B;AAC1B,QAAAC,UAAqB;AACtB,KAAA;IACD,aAAa,EAAE,CAACC,QAAmB,EAAEC,OAAkB,CAAC;IACxD,gBAAgB,EAAE,CAACI,YAAuB,EAAEC,OAAkB,CAAC;AAC/D,IAAA,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC;AACF,MAAM,qCAAqC,GAA6B;AACtE,IAAA,IAAI,EAAE,qDAAqD;AAC3D,IAAA,UAAU,EAAE,KAAK;AACjB,IAAA,SAAS,EAAE;AACT,QAAA,GAAG,EAAE;YACH,UAAU,EAAEC,sBAA8B;AAC3C,SAAA;AACD,QAAA,OAAO,EAAE;YACP,UAAU,EAAEb,aAAqB;AAClC,SAAA;AACF,KAAA;AACD,IAAA,eAAe,EAAE,CAACK,UAAqB,CAAC;AACxC,IAAA,aAAa,EAAE,CAACC,QAAmB,EAAEC,OAAkB,EAAEO,QAAmB,CAAC;AAC7E,IAAA,gBAAgB,EAAE,CAACF,OAAkB,CAAC;IACtC,UAAU;CACX,CAAC;AACF,MAAM,+BAA+B,GAA6B;AAChE,IAAA,IAAI,EAAE,uBAAuB;AAC7B,IAAA,UAAU,EAAE,MAAM;AAClB,IAAA,SAAS,EAAE;AACT,QAAA,GAAG,EAAE;YACH,aAAa,EAAEG,wCAAgD;AAChE,SAAA;AACD,QAAA,OAAO,EAAE;YACP,UAAU,EAAEf,aAAqB;AAClC,SAAA;AACF,KAAA;IACD,WAAW,EAAEgB,YAAuB;AACpC,IAAA,eAAe,EAAE,CAACX,UAAqB,CAAC;AACxC,IAAA,aAAa,EAAE,CAACC,QAAmB,CAAC;IACpC,gBAAgB,EAAE,CAACM,OAAkB,EAAEK,YAAuB,CAAC;AAC/D,IAAA,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC;AACF,MAAM,iCAAiC,GAA6B;AAClE,IAAA,IAAI,EAAE,yBAAyB;AAC/B,IAAA,UAAU,EAAE,MAAM;AAClB,IAAA,SAAS,EAAE;AACT,QAAA,GAAG,EAAE;YACH,aAAa,EAAEC,0CAAkD;AAClE,SAAA;AACD,QAAA,OAAO,EAAE;YACP,UAAU,EAAElB,aAAqB;AAClC,SAAA;AACF,KAAA;IACD,WAAW,EAAEmB,cAAyB;AACtC,IAAA,eAAe,EAAE,CAACd,UAAqB,CAAC;AACxC,IAAA,aAAa,EAAE,CAACC,QAAmB,CAAC;IACpC,gBAAgB,EAAE,CAACM,OAAkB,EAAEK,YAAuB,CAAC;AAC/D,IAAA,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC;AACF,MAAM,uCAAuC,GAA6B;AACxE,IAAA,IAAI,EAAE,+BAA+B;AACrC,IAAA,UAAU,EAAE,MAAM;AAClB,IAAA,SAAS,EAAE;AACT,QAAA,GAAG,EAAE;YACH,UAAU,EAAEG,iBAAyB;AACtC,SAAA;AACD,QAAA,OAAO,EAAE;YACP,UAAU,EAAEpB,aAAqB;AAClC,SAAA;AACF,KAAA;IACD,WAAW,EAAEqB,oBAA+B;AAC5C,IAAA,eAAe,EAAE,CAAChB,UAAqB,CAAC;AACxC,IAAA,aAAa,EAAE,CAACC,QAAmB,CAAC;IACpC,gBAAgB,EAAE,CAACM,OAAkB,EAAEK,YAAuB,CAAC;AAC/D,IAAA,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC;AACF,MAAM,gCAAgC,GAA6B;AACjE,IAAA,IAAI,EAAE,kCAAkC;AACxC,IAAA,UAAU,EAAE,MAAM;AAClB,IAAA,SAAS,EAAE;AACT,QAAA,GAAG,EAAE;YACH,aAAa,EAAEK,yCAAiD;AACjE,SAAA;AACD,QAAA,OAAO,EAAE;YACP,UAAU,EAAEtB,aAAqB;AAClC,SAAA;AACF,KAAA;IACD,WAAW,EAAEuB,aAAwB;AACrC,IAAA,eAAe,EAAE,CAAClB,UAAqB,CAAC;IACxC,aAAa,EAAE,CAACC,QAAmB,EAAEC,OAAkB,CAAC;IACxD,gBAAgB,EAAE,CAACK,OAAkB,EAAEK,YAAuB,CAAC;AAC/D,IAAA,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC;AACF,MAAM,0BAA0B,GAA6B;AAC3D,IAAA,IAAI,EAAE,aAAa;AACnB,IAAA,UAAU,EAAE,KAAK;AACjB,IAAA,SAAS,EAAE;AACT,QAAA,GAAG,EAAE;YACH,UAAU,EAAEO,qBAA6B;AAC1C,SAAA;AACD,QAAA,OAAO,EAAE;YACP,UAAU,EAAExB,aAAqB;AAClC,SAAA;AACF,KAAA;AACD,IAAA,eAAe,EAAE,CAACK,UAAqB,CAAC;AACxC,IAAA,aAAa,EAAE,CAACC,QAAmB,CAAC;AACpC,IAAA,gBAAgB,EAAE,CAACM,OAAkB,CAAC;IACtC,UAAU;CACX,CAAC;AACF,MAAM,yBAAyB,GAA6B;AAC1D,IAAA,IAAI,EAAE,2BAA2B;AACjC,IAAA,UAAU,EAAE,KAAK;AACjB,IAAA,SAAS,EAAE;AACT,QAAA,GAAG,EAAE;YACH,UAAU,EAAEa,gBAAwB;AACrC,SAAA;AACD,QAAA,OAAO,EAAE;YACP,UAAU,EAAEzB,aAAqB;AAClC,SAAA;AACF,KAAA;AACD,IAAA,eAAe,EAAE,CAACK,UAAqB,CAAC;IACxC,aAAa,EAAE,CAACC,QAAmB,EAAEoB,WAAsB,CAAC;AAC5D,IAAA,gBAAgB,EAAE,CAACd,OAAkB,CAAC;IACtC,UAAU;CACX,CAAC;AACF,MAAM,8BAA8B,GAA6B;AAC/D,IAAA,IAAI,EAAE,iBAAiB;AACvB,IAAA,UAAU,EAAE,KAAK;AACjB,IAAA,SAAS,EAAE;AACT,QAAA,GAAG,EAAE;YACH,UAAU,EAAEe,yBAAiC;AAC9C,SAAA;AACD,QAAA,OAAO,EAAE;YACP,UAAU,EAAE3B,aAAqB;AAClC,SAAA;AACF,KAAA;AACD,IAAA,eAAe,EAAE,CAACK,UAAqB,CAAC;AACxC,IAAA,aAAa,EAAE,CAACC,QAAmB,CAAC;AACpC,IAAA,gBAAgB,EAAE,CAACM,OAAkB,CAAC;IACtC,UAAU;CACX,CAAC;AACF,MAAM,6BAA6B,GAA6B;AAC9D,IAAA,IAAI,EAAE,2BAA2B;AACjC,IAAA,UAAU,EAAE,KAAK;AACjB,IAAA,SAAS,EAAE;AACT,QAAA,GAAG,EAAE;YACH,UAAU,EAAEgB,oBAA4B;AACzC,SAAA;AACD,QAAA,OAAO,EAAE;YACP,UAAU,EAAE5B,aAAqB;AAClC,SAAA;AACF,KAAA;AACD,IAAA,eAAe,EAAE,CAACK,UAAqB,CAAC;IACxC,aAAa,EAAE,CAACC,QAAmB,EAAEC,OAAkB,CAAC;AACxD,IAAA,gBAAgB,EAAE,CAACK,OAAkB,CAAC;IACtC,UAAU;CACX,CAAC;AACF,MAAM,gCAAgC,GAA6B;AACjE,IAAA,IAAI,EAAE,2BAA2B;AACjC,IAAA,UAAU,EAAE,QAAQ;AACpB,IAAA,SAAS,EAAE;AACT,QAAA,GAAG,EAAE,EAAE;AACP,QAAA,OAAO,EAAE;YACP,UAAU,EAAEZ,aAAqB;AAClC,SAAA;AACF,KAAA;AACD,IAAA,eAAe,EAAE,CAACK,UAAqB,CAAC;IACxC,aAAa,EAAE,CAACC,QAAmB,EAAEC,OAAkB,CAAC;AACxD,IAAA,gBAAgB,EAAE,CAACK,OAAkB,CAAC;IACtC,UAAU;CACX,CAAC;AACF,MAAM,+BAA+B,GAA6B;AAChE,IAAA,IAAI,EAAE,OAAO;AACb,IAAA,UAAU,EAAE,KAAK;AACjB,IAAA,SAAS,EAAE;AACT,QAAA,GAAG,EAAE;YACH,UAAU,EAAEiB,eAAuB;AACpC,SAAA;AACD,QAAA,OAAO,EAAE;YACP,UAAU,EAAE7B,aAAqB;AAClC,SAAA;AACF,KAAA;AACD,IAAA,eAAe,EAAE,CAACK,UAAqB,CAAC;AACxC,IAAA,aAAa,EAAE,CAACC,QAAmB,CAAC;AACpC,IAAA,gBAAgB,EAAE,CAACM,OAAkB,CAAC;IACtC,UAAU;CACX,CAAC;AACF,MAAM,8BAA8B,GAA6B;AAC/D,IAAA,IAAI,EAAE,YAAY;AAClB,IAAA,UAAU,EAAE,KAAK;AACjB,IAAA,SAAS,EAAE;AACT,QAAA,GAAG,EAAE;YACH,UAAU,EAAEY,qBAA6B;AAC1C,SAAA;AACD,QAAA,OAAO,EAAE;YACP,UAAU,EAAExB,aAAqB;AAClC,SAAA;AACF,KAAA;AACD,IAAA,eAAe,EAAE,CAACK,UAAqB,CAAC;IACxC,aAAa,EAAE,CAACC,QAAmB,EAAEwB,QAAmB,CAAC;AACzD,IAAA,gBAAgB,EAAE,CAAClB,OAAkB,CAAC;IACtC,UAAU;CACX,CAAC;AACF,MAAM,kCAAkC,GAA6B;AACnE,IAAA,IAAI,EAAE,YAAY;AAClB,IAAA,UAAU,EAAE,KAAK;AACjB,IAAA,SAAS,EAAE;AACT,QAAA,GAAG,EAAE;YACH,UAAU,EAAEe,yBAAiC;AAC9C,SAAA;AACD,QAAA,OAAO,EAAE;YACP,UAAU,EAAE3B,aAAqB;AAClC,SAAA;AACF,KAAA;AACD,IAAA,eAAe,EAAE,CAACK,UAAqB,CAAC;IACxC,aAAa,EAAE,CAACC,QAAmB,EAAEwB,QAAmB,CAAC;AACzD,IAAA,gBAAgB,EAAE,CAAClB,OAAkB,CAAC;IACtC,UAAU;CACX;;AC1vBD;AACA;AAUA;;AAEG;AACH;AACa,MAAA,wBAAwB,GAAG;AACtC;;;;;AAKG;AACH,IAAA,MAAM,EAAE,YAAY;;;AAGpB,IAAA,MAAM,EAAE,YAAY;EACX;AAOX;;AAEG;AACH;AACa,MAAA,eAAe,GAAG;AAC7B;;AAEG;AACH,IAAA,aAAa,EAAE,eAAe;AAC9B;;AAEG;AACH,IAAA,gBAAgB,EAAE,kBAAkB;EAC3B;AAEX;;;;AAIG;AACI,MAAM,gCAAgC,GAAG;IAC9C,eAAe,EAAE,eAAe,CAAC,aAAa;IAC9C,UAAU,EAAE,wBAAwB,CAAC,MAAM;CACnC;;ACxDV;AAcA;AACO,MAAM,UAAU,GAAGmB,2BAAgB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AAK3D;;;AAGG;AACI,MAAM,YAAY,GAAG,CAA4B,CAAS,MAC9D,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAoB,CAAC;AAExE;;;AAGG;AACI,MAAM,UAAU,GAAG,CAA4B,CAAI,MACvD,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAkB,CAAC;AAEtE;;;AAGG;AACI,MAAM,WAAW,GAAG,CAAC,CAAS,KAAa;AAChD,IAAA,OAAO,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC;AAEF;;;AAGG;AACI,MAAM,QAAQ,GAAG,CAAS,KAAqB,EAAE,CAAgB,KACtE,KAAK,KAAK,SAAS,GAAG,SAAS,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;AAE7C;;;AAGG;SACa,iBAAiB,CAC/B,QAAgB,EAChB,UAA2C,EAC3C,OAAsC,EAAA;IAEtC,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,kCAC1D,gCAAgC,CAAA,EAChC,OAAO,CAAA,CACV,CAAC;AAEH,IAAA,MAAM,UAAU,GAAGC,0BAAiB,CAAC,UAAU,CAAC;UAC5CC,gDAA+B,CAAC;YAC9B,UAAU;AACV,YAAA,MAAM,EAAE,uBAAuB;SAChC,CAAC;AACJ,UAAE,4CAA4C,CAAC,UAAU,CAAC,CAAC;AAE7D,IAAA,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;AAEtC,IAAA,OAAO,MAAM,CAAC;AAChB;;ACzEA;AAgOA;;;;;AAKG;AACG,SAAU,qCAAqC,CAAC,MAErD,EAAA;IACC,OAAO,MAAM,CAAC,OAAO,CAAC,MAAM,aAAN,MAAM,KAAA,KAAA,CAAA,GAAN,MAAM,GAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,iBAAiB,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,KAAI;QAC9E,iBAAiB,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC;AACjD,QAAA,OAAO,iBAAiB,CAAC;KAC1B,EAAE,EAAoC,CAAC,CAAC;AAC3C,CAAC;AAED;;;AAGG;AACG,SAAU,eAAe,CAAC,KAA6B,EAAA;AAC3D,IAAA,MAAM,IAAI,GAAG,KAAK,CAAC,IAA6B,CAAC;AAEjD,IAAA,MAAM,KAAK,GAA4D,CAAC,MAAK;;AAC3E,QAAA,QAAQ,IAAI;;AAEV,YAAA,KAAK,QAAQ,CAAC;AACd,YAAA,KAAK,MAAM,CAAC;AACZ,YAAA,KAAK,MAAM,CAAC;AACZ,YAAA,KAAK,aAAa,CAAC;AACnB,YAAA,KAAK,QAAQ,CAAC;AACd,YAAA,KAAK,SAAS,CAAC;AACf,YAAA,KAAK,eAAe,CAAC;AACrB,YAAA,KAAK,eAAe,CAAC;AACrB,YAAA,KAAK,WAAW,CAAC;AACjB,YAAA,KAAK,UAAU,CAAC;AAChB,YAAA,KAAK,SAAS;gBACZ,OAAO;oBACL,KAAK,EACH,KAAK,EACF,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,EAI5B;iBACJ,CAAC;AACJ,YAAA,KAAK,OAAO;gBACV,OAAO,EAAE,MAAM,EAAE,CAAA,EAAA,GAAA,KAAK,CAAC,UAAU,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAG,CAAC,CAAC,CAAC,KAAI,EAAA,IAAA,EAAA,CAAA,CAAC,OAAA,CAAA,EAAA,GAAA,eAAe,CAAC,CAAC,CAAC,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EAAE,CAAA,EAAA,CAAC,EAAE,CAAC;AAC5E,YAAA,KAAK,QAAQ;AACX,gBAAA,OAAO,EAAE,UAAU,EAAE,qCAAqC,CAAC,CAAA,EAAA,GAAA,KAAK,CAAC,WAAW,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE,CAAC,EAAE,CAAC;AACxF,YAAA;;;gBAGE,MAAM,SAAS,GAAU,IAAI,CAAC;AAC9B,gBAAA,MAAM,IAAI,KAAK,CAAC,oCAAoC,SAAS,CAAA,CAAE,CAAC,CAAC;AACpE,SAAA;KACF,GAAG,CAAC;AAEL,IAAA,OAAO,MACL,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,IAAI,EACD,EAAA,KAAK,KACR,eAAe,EAAE,iBAAiB,CAAC,KAAK,CAAC,eAAe,CAAC,EACzD,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,UAAU,EAAE,KAAK,CAAC,UAAU,GACZ,CAAC;AACrB;;ACjSA;AAiFA;;;;;;AAMG;AACG,SAAU,+BAA+B,CAAC,QAA2B,EAAA;;IACzE,OACK,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,QAAQ,KACX,eAAe,EAAE,iBAAiB,CAAC,QAAQ,CAAC,eAAe,CAAC,EAC5D,MAAM,EAAE,qCAAqC,CAAC,CAAA,EAAA,GAAA,QAAQ,CAAC,MAAM,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE,CAAC,EACpE,CAAA,CAAA;AACJ,CAAC;AAgED;;;;;;;;;AASG;AACa,SAAA,QAAQ,CAAC,KAAmB,EAAE,KAAmB,EAAA;IAC/D,OAAO,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;AACpG,CAAC;AAED;;AAEG;AACH,UAAU,KAAK,GAAA;;AAEf,CAAC;AAED;;;;;AAKG;UACc,QAAQ,CAAI,KAAU,EAAE,GAAW,EAAA;IAClD,IAAI,CAAC,GAAG,GAAG,CAAC;AAEZ,IAAA,OAAO,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE;AACvB,QAAA,MAAM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AAClB,KAAA;AACH,CAAC;AAEe,SAAA,2BAA2B,CACzC,SAAgC,EAChC,IAA2B,EAAA;AAE1B,IAAA,SAA0B,CAAC,KAAK,GAAG,MAAK;;QACvC,OAAA,eAAe,CACb,QAAQ,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,CAAC,EAC5B,MAAA,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,GAAG,CAAC,CAAC,IAAI,KAAI;YACvB,OAAY,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,CAAE,EAAA,EAAA,OAAO,EAAE,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAG,CAAA,CAAA;AAC/D,SAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE,CACT,CAAA;KAAA,CAAC;IAEH,SAA0B,CAAC,OAAO,GAAG,iBAAiB,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AAE3E,IAAA,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,OAAO,EAAE;AACxC,QAAA,UAAU,EAAE,KAAK;AAClB,KAAA,CAAC,CAAC;AAEH,IAAA,OAAO,SAAyB,CAAC;AACnC,CAAC;AAEK,SAAU,2BAA2B,CAAC,SAAgC,EAAA;;AAC1E,IAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,SAAS,CACZ,EAAA,EAAA,KAAK,EAAE,CAAA,EAAA,GAAA,SAAS,CAAC,KAAK,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAG,CAAC,CAAC,IAAI,KAAK,2BAA2B,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,EACnF,cAAc,EAAE,CAAA,EAAA,GAAA,SAAS,CAAC,cAAc,0CAAE,GAAG,CAAC,CAAC,IAAI,MAAK,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACnD,IAAI,CAAA,EAAA,EACP,OAAO,EAAE,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,EACxC,CAAA,CAAA,CAAC,EACH,KAAK,EAAE,MAAA,SAAS,CAAC,KAAK,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAG,CAAC,CAAC,IAAI,MAAK,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACjC,IAAI,CACP,EAAA,EAAA,OAAO,EAAE,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAA,CAAA,CACxC,CAAC,EACH,CAAA,CAAA;AACJ,CAAC;AAED;;;;;;;;;;;AAWG;AACa,SAAA,kCAAkC,CAChD,IAAkB,EAClB,KAAgB,EAAA;AAEhB,IAAA,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACvC,IAAI,OAAO,GAAG,GAAG,CAAC;IAClB,IAAI,GAAG,GAAG,CAAC,CAAC;AACZ,IAAA,IAAI,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC;IAEvB,MAAM,KAAK,GAAG,MAAc,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;;;AAG1B,IAAA,OAAA,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,CAAA,EAAA,GAAA,MAAA,CAAA,EAAA,GAAA,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAI,0CAAE,MAAM,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,CAAA,EAAA,CAAC;;IAG9F,GAAG;QACD,IAAI,KAAK,EAAE,EAAE;AACX,YAAA,OAAO,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AAC7B,SAAA;AAAM,aAAA,IAAI,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE;AAC/C,YAAA,GAAG,GAAG,OAAO,GAAG,GAAG,CAAC;AACpB,YAAA,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;AACzC,SAAA;AAAM,aAAA;AACL,YAAA,GAAG,GAAG,OAAO,GAAG,GAAG,CAAC;AACpB,YAAA,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;AACzC,SAAA;KACF,QAAQ,GAAG,KAAK,OAAO,EAAE;;IAG1B,OAAO,KAAK,EAAE,CAAC;AACjB,CAAC;AAED;;;;;;;;;;AAUG;UACc,eAAe,CAC9B,KAA6B,EAC7B,aAAwB,EAAA;AAExB,IAAA,IAAI,OAAO,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;;IAG3B,IAAI,OAAO,CAAC,IAAI,EAAE;QAChB,OAAO;AACR,KAAA;IAED,MAAM,QAAQ,GAAG,kCAAkC,CAAC,OAAO,CAAC,KAAqB,EAAE,aAAa,CAAC,CAAC;AAClG,IAAA,IAAI,QAAQ,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;IAE/B,OAAO,EAAE,QAAQ,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;AACvC,QAAA,IAAI,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;;YAEhD,MAAM,QAAQ,CAAC,KAAK,CAAC;AACrB,YAAA,QAAQ,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;AAC5B,SAAA;AAAM,aAAA,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE;;AAEnF,YAAA,OAAO,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;AACxB,SAAA;AAAM,aAAA;;AAEL,YAAA,QAAQ,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;AAC5B,SAAA;AACF,KAAA;AACH,CAAC;AA+CD;;;AAGG;AACG,SAAU,4BAA4B,CAAC,MAA8B,EAAA;;IACzE,OAAO;QACL,UAAU,EAAE,MAAM,CAAC,UAAsC;QACzD,OAAO,EAAE,MAAM,CAAC,OAAO;QACvB,OAAO,EAAE,MAAM,CAAC,OAAO;AACvB,QAAA,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,2BAA2B,CAAC,IAAI,CAAC,CAAC;AACpE,QAAA,MAAM,EAAE,CAAA,EAAA,GAAA,MAAM,CAAC,MAAM,0CAAE,GAAG,CAAC,CAAC,KAAK,KAAK,4BAA4B,CAAC,KAAK,CAAC,CAAC;AAC1E,QAAA,aAAa,EAAE,CAAA,EAAA,GAAA,MAAM,CAAC,aAAa,0CAAE,GAAG,CAAC,CAAC,IAAI,KAAK,2BAA2B,CAAC,IAAI,CAAC,CAAC;QACrF,SAAS,EAAE,MAAM,CAAC,SAAS;QAC3B,MAAM,EAAE,MAAM,CAAC,MAAM;QACrB,UAAU,EAAE,CAAA,EAAA,GAAA,MAAM,CAAC,UAAU,0CAAE,GAAG,CAAC,CAAC,IAAI,MACnC,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,CACP,EAAA,EAAA,eAAe,EAAE,iBAAiB,CAAC,IAAI,CAAC,eAAe,CAAC,EAAA,CAAA,CACxD,CAAC;QACH,SAAS,EAAE,MAAA,MAAM,CAAC,SAAS,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAG,CAAC,+BAA+B,CAAC;KAClE,CAAC;AACJ,CAAC;AAeD;;;AAGG;AACG,SAAU,oCAAoC,CAClD,UAA+C,EAC/C,OAAe,EACf,iBAAyB,EACzB,QAAgC,EAAA;IAEhC,OAAO;QACL,MAAM,EAAE,QAAQ,CAAC,MAAM;AACvB,QAAA,OAAO,EAAE,OAAO;QAChB,aAAa,EAAE,QAAQ,CAAC,aAAa;QACrC,SAAS,EAAE,QAAQ,CAAC,SAAS;QAC7B,iBAAiB;AACjB,QAAA,MAAM,EAAE,QAAQ,CAAC,aAAa,IAAI,UAAU,CAAC,eAAe,CAAC,QAAQ,CAAC,aAAa,CAAC;QACpF,KAAK,EAAE,QAAQ,CAAC,KAAK,IAAI,IAAI,mBAAmB,CAAC,QAAQ,CAAC,KAAK,CAAC;AAChE,QAAA,WAAW,EAAE,KAAK;AAClB,QAAA,SAAS,EAAE,QAAQ,CAAC,MAAM,KAAK,YAAY;AAC3C,QAAA,WAAW,EAAE,QAAQ,CAAC,MAAM,KAAK,WAAW;KAC7C,CAAC;AACJ;;AC9ZA;AAOA,MAAM,WAAW,GAAG,2DAA2D,CAAC;AAahF;;;;;;;;;;;;;;;;;;AAkBG;AACG,SAAU,OAAO,CAAC,EAAU,EAAA;IAChC,IAAI,OAAO,GAAG,KAAK,CAAC;AACpB,IAAA,IAAI,QAAkC,CAAC;AAEvC,IAAA,OAAO,MAAM,CAAC,MAAM,CAClB,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,KAAI;AACpC,QAAA,IAAI,KAAoC,CAAC;QACzC,QAAQ,GAAG,MAAK;AACd,YAAA,QAAQ,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;YAC9B,MAAM,CAAC,WAAW,CAAC,CAAC;AACtB,SAAC,CAAC;;;AAIF,QAAA,IAAI,OAAO,EAAE;AACX,YAAA,QAAQ,EAAE,CAAC;AACZ,SAAA;AAAM,aAAA;AACL,YAAA,KAAK,GAAG,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;AACjC,SAAA;AACH,KAAC,CAAC,EACF;QACE,MAAM,EAAE,MAAK;YACX,OAAO,GAAG,IAAI,CAAC;AACf,YAAA,QAAQ,KAAR,IAAA,IAAA,QAAQ,KAAR,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,QAAQ,EAAI,CAAC;SACd;AACF,KAAA,CACF,CAAC;AACJ;;AClEA;AAMA,MAAM,wBAAwB,GAAG,IAAI,CAAC;AAqBtC;;;;AAIG;AACI,eAAe,GAAG,CACvB,IAA2B,EAC3B,eAAmC,EAAA;IAEnC,IAAI,KAAK,GAAG,OAAO,IAAI,CAAC,IAAI,KAAK,UAAU,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC;;;AAM5E,IAAA,IAAI,GAAiC,CAAC;AACtC,IAAA,IAAI,SAAmC,CAAC;AAIxC,IAAA,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAmB,CAAC;IAC5C,MAAM,oBAAoB,GAAG,YAA2B,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AAE1F,IAAA,MAAM,IAAI,GAAe;AACvB,QAAA,UAAU,EAAE,CAAC,QAAiC,KAAI;AAChD,YAAA,MAAM,CAAC,GAAG,MAAM,EAAE,CAAC;AACnB,YAAA,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;YAC1B,OAAO,MAAM,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SACjC;QACD,WAAW,EAAE,MAAM,SAAS,KAAT,IAAA,IAAA,SAAS,KAAT,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,SAAS,EAAI;QAChC,IAAI,EAAE,YAAW;YACf,KAAK,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC/B,YAAA,oBAAoB,EAAE,CAAC;SACxB;AACD,QAAA,aAAa,EAAE,OACZ,GAAG,KAAH,IAAA,IAAA,GAAG,KAAH,KAAA,CAAA,GAAA,GAAG,IAAH,GAAG,GAAK,CAAC,YAAW;;AAEnB,YAAA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE;;AAElB,gBAAA,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;AAClB,gBAAA,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE;AACrB,oBAAA,MAAM,KAAK,GAAG,OAAO,CAAC,eAAe,KAAA,IAAA,IAAf,eAAe,KAAA,KAAA,CAAA,GAAf,eAAe,GAAI,wBAAwB,CAAC,CAAC;AACnE,oBAAA,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC;AACzB,oBAAA,MAAM,KAAK,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;AACrC,iBAAA;AACF,aAAA;AACD,YAAA,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;;YAGhC,IAAI,MAAM,KAAK,SAAS;AAAE,gBAAA,OAAO,MAAM,CAAC;AACnC,iBAAA,IAAI,KAAK,CAAC,KAAK,KAAK,SAAS;gBAAE,MAAM,KAAK,CAAC,KAAK,CAAC;;AAEjD,iBAAA;AACH,gBAAA,MAAM,IAAI,KAAK,CACb,8EAA8E,KAAK,CAAA,CAAE,CACtF,CAAC;AACH,aAAA;AACH,SAAC,GAAG,CAAC,OAAO,CAAC,MAAK;YAChB,GAAG,GAAG,SAAS,CAAC;AAClB,SAAC,CAAC,CAAC,CAAA;;AAEL,QAAA,SAAS,EAAE,MAAM,CAAC,CAAC,GAAG;;AAEtB,QAAA,MAAM,EAAE,MAAM,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK;;QAE7C,eAAe,GAAA;AACb,YAAA,MAAM,IAAI,KAAK,CAAC,4EAA4E,CAAC,CAAC;SAC/F;AACD,QAAA,iBAAiB,EAAE,MAAM,KAAK;AAC9B,QAAA,SAAS,EAAE,MAAM,KAAK,CAAC,MAAM;QAC7B,QAAQ,EAAE,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;KACtC,CAAC;AAEF,IAAA,OAAO,IAAI,CAAC;AACd;;ACrGA;AAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BG;MACU,sBAAsB,CAAA;AA+DjC,IAAA,WAAA,CACE,QAAgB,EAChB,UAA2C,EAC3C,UAAyC,EAAE,EAAA;;QAE3C,IAAI,CAAC,WAAW,GAAG,iBAAiB,CAAC,QAAQ,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;AACpE,QAAA,IAAI,CAAC,QAAQ,GAAGC,+BAAmB,CAAC;AAClC,YAAA,WAAW,EAAE,2BAA2B;AACxC,YAAA,cAAc,EAAE,WAAW;AAC3B,YAAA,SAAS,EAAE,6BAA6B;AACzC,SAAA,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,GAAG,CAAA,EAAA,GAAA,OAAO,CAAC,UAAU,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,gCAAgC,CAAC,UAAU,CAAC;KACtF;IAkHM,MAAM,oBAAoB,CAC/B,KAAsC,EACtC,QAAmC,EACnC,UAA2C,EAAE,EAAA;QAE7C,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,6CAA6C,EAC7C,OAAO,EACP,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,CACzC,CAAC;KACH;IAgHM,MAAM,2BAA2B,CACtC,KAAsC,EACtC,WAAmB,EACnB,UAA2C,EAAE,EAAA;QAE7C,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,oDAAoD,EACpD,OAAO,EACP,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,WAAW,CAAC,CAC5C,CAAC;KACH;AAED;;;;;;;AAOG;AACK,IAAA,OAAO,CACb,KAAsC,EACtC,KAAyC,EACzC,OAAwC,EAAA;AAExC,QAAA,MAAM,EACJ,OAAO,EAAE,cAAc,EACvB,UAAU,EAAE,iBAAiB,EAC7B,eAAe,GAChB,GAAG,OAAO,KAAK,KAAK,QAAQ;AAC3B,cAAE,EAAE,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC,CAAgB,KAAK,CAAC,EAAE;cACnF,KAAK,CAAC;AAEV,QAAA,IAAI,iBAAiB,IAAI,iBAAiB,KAAK,IAAI,CAAC,WAAW,EAAE;YAC/D,MAAM,IAAI,KAAK,CACb;AACE,gBAAA,CAAA,wDAAA,EAA2D,iBAAiB,CAAA,0BAAA,EAA6B,IAAI,CAAC,WAAW,CAAG,CAAA,CAAA;gBAC5H,mEAAmE;AACpE,aAAA,CAAC,IAAI,CAAC,IAAI,CAAC,CACb,CAAC;AACH,SAAA;AAED,QAAA,OAAO,IAAI,CAAC,oBAAoB,CAAU,KAAK,EAAE;YAC/C,cAAc;YACd,OAAO;AACP,YAAA,eAAe,EAAE,CAAC,MAAM,KAAK,eAAe,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC;AACnF,SAAA,CAAC,CAAC;KACJ;AAED;;;;;;;;;AASG;AACK,IAAA,MAAM,oBAAoB,CAChC,KAAyC,EACzC,UAA+C,EAAA;AAE/C,QAAA,MAAM,EAAE,UAAU,EAAE,GAAG,UAAU,CAAC,OAAO,CAAC;;;AAK1C,QAAA,MAAM,gBAAgB,GAAG,CAAC,iBAAyB,KACjD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CACpB,8DAA8D,EAC9D,UAAU,CAAC,OAAO,EAClB,CAAC,YAAY,KACX,IAAI,CAAC,WAAW,CAAC,oBAAoB,CACnC;AACE,YAAA,OAAO,EAAE,YAAY;SACtB,EACD;AACE,YAAA,IAAI,EAAE,iBAAiB;AACvB,YAAA,UAAU,EAAE,KAAK;AACjB,YAAA,SAAS,EAAE;AACT,gBAAA,GAAG,EAAE;oBACH,UAAU,EAAErB,sBAA8B;AAC3C,iBAAA;AACD,gBAAA,OAAO,EAAE;oBACP,UAAU,EAAEb,aAAqB;AAClC,iBAAA;AACF,aAAA;;YAED,gBAAgB,EAAE,CAAC,OAAO,CAAC;AAC3B,YAAA,UAAU,EAAE,UAAU;AACvB,SAAA,CACF,CACJ,CAAC;AAEJ,QAAA,MAAM,MAAM;;AAEV,QAAA,UAAU,KAAK,SAAS;AACtB,cAAE,YACE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CACpB,oDAAoD,EACpD,UAAU,CAAC,OAAO,EAClB,YAAW;AACT,gBAAA,MAAM,EAAE,iBAAiB,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAG3D,CAAC;AAEF,gBAAA,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;gBAEzD,OAAO,oCAAoC,CACzC,UAAU,EACV,OAAO,EACP,iBAAiB,EACjB,MAAM,CACP,CAAC;AACJ,aAAC,CACF;AACL;AACE,gBAAA,YACE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CACpB,mDAAmD,EACnD,UAAU,CAAC,OAAO,EAClB,YAAW;oBACT,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;oBAE9D,MAAM,EAAE,iBAAiB,EAAE,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,eAAe,CAClE,UAAU,CAAC,cAAc,EACzB,WAAkB,EAEb,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,UAAU,CAAC,OAAO,CAAA,EAAA,EACrB,cAAc,EAAA,CAAA,CAEjB,CAAC;oBAEF,IAAI,iBAAiB,KAAK,SAAS,EAAE;AACnC,wBAAA,MAAM,IAAI,KAAK,CACb,qEAAqE,CACtE,CAAC;AACH,qBAAA;AAED,oBAAA,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;AAEzD,oBAAA,OAAO,oCAAoC,CACzC,UAAU,EACV,UAAU,CAAC,cAAc,EACzB,iBAAiB,EACjB,MAAM,CACP,CAAC;AACJ,iBAAC,CACF,CAAC;AAEV,QAAA,MAAM,MAAM,GAAG,MAAM,GAAG,CACtB;AACE,YAAA,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,OAAO,EAAE,iBAAiB,EAAE,OAAO,EAAE,KACzC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CACpB,kDAAkD,EAClD,EAAE,EACF,YAAW;AACT,gBAAA,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;gBAEzD,OAAO,oCAAoC,CACzC,UAAU,EACV,OAAO,EACP,iBAAiB,EACjB,MAAM,CACP,CAAC;AACJ,aAAC,CACF;AACH,YAAA,SAAS,EAAE,CAAC,EAAE,iBAAiB,EAAE,OAAO,EAAE,KACxC,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,iBAAiB,EAAE,CAAC;AACjD,SAAA,EACD,UAAU,CAAC,OAAO,CAAC,kBAAkB,CACtC,CAAC;AAEF,QAAA,IAAI,UAAU,CAAC,OAAO,CAAC,UAAU,KAAK,SAAS,EAAE;YAC/C,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACjD,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,CAAC;AAC3D,SAAA;AAED,QAAA,OAAO,MAAM,CAAC;KACf;AAGF,CAAA;AAED;;;AAGG;AACH,SAAS,gBAAgB,CACvB,KAAyC,EAAA;AAEzC,IAAA,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO;YACL,kBAAkB;AAClB,YAAA;AACE,gBAAA,SAAS,EAAE,KAAK;AACjB,aAAA;SACF,CAAC;AACH,KAAA;AAAM,SAAA;AACL,QAAA,OAAO,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;AAC5C,KAAA;AACH;;ACnkBA;AAoEA;;;AAGG;AACI,eAAe,4BAA4B,CAChD,QAAoC,EAAA;;IAEpC,OAAO;QACL,WAAW,EAAE,QAAQ,CAAC,WAAW;QACjC,MAAM,EAAE,QAAQ,CAAC,MAAM;QACvB,UAAU,EAAE,QAAQ,CAAC,UAAU;AAC/B,QAAA,gBAAgB,EAAE,CAAA,EAAA,GAAA,QAAQ,CAAC,gBAAgB,mCAAI,CAAC;QAChD,aAAa,EAAE,QAAQ,CAAC,aAAa;QACrC,SAAS,EAAE,QAAQ,CAAC,SAAS;QAC7B,KAAK,EAAE,QAAQ,CAAC,KAAK,IAAI,IAAI,mBAAmB,CAAC,QAAQ,CAAC,KAAK,CAAC;AAChE,QAAA,WAAW,EAAE,QAAQ,CAAC,MAAM,KAAK,UAAU;AAC3C,QAAA,WAAW,EAAE,QAAQ,CAAC,MAAM,KAAK,WAAW;AAC5C,QAAA,SAAS,EAAE,QAAQ,CAAC,MAAM,KAAK,YAAY;QAC3C,IAAI,EAAE,QAAQ,CAAC,IAAI;QACnB,MAAM,EAAE,QAAQ,CAAC,MAAM;KACxB,CAAC;AACJ;;ACzFA;AA4CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BG;MACU,iCAAiC,CAAA;AA+D5C,IAAA,WAAA,CACE,QAAgB,EAChB,UAA2C,EAC3C,UAAoD,EAAE,EAAA;QAEtD,IAAI,CAAC,WAAW,GAAG,iBAAiB,CAAC,QAAQ,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;AACpE,QAAA,IAAI,CAAC,QAAQ,GAAGkC,+BAAmB,CAAC;AAClC,YAAA,WAAW,EAAE,2BAA2B;AACxC,YAAA,cAAc,EAAE,WAAW;AAC3B,YAAA,SAAS,EAAE,6BAA6B;AACzC,SAAA,CAAC,CAAC;KACJ;;AAID;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCG;IACI,MAAM,uBAAuB,CAClC,OAAe,EACf,YAAoB,EACpB,SAAiC,EACjC,OAAA,GAA0C,EAAE,EAAA;AAE5C,QAAA,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,2DAA2D,EAC3D,OAAO,EACP,CAAC,YAAY,KACX,IAAI,CAAC,yBAAyB,CAAC;AAC7B,YAAA,OAAO,EAAE,YAAY;YACrB,KAAK,EAAE,MACL,IAAI,CAAC,WAAW,CAAC,kBAAkB,CACjC;gBACE,OAAO;gBACP,WAAW,EAAE,YAAY,CAAC,WAAW;AACrC,gBAAA,eAAe,EAAE;oBACf,YAAY;AACb,iBAAA;gBACD,SAAS;AACV,aAAA,EACD,YAAY,CACb;AACJ,SAAA,CAAC,CACL,CAAC;KACH;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCG;IACI,MAAM,yBAAyB,CACpC,OAAe,EACf,iBAAmC,EACnC,UAA4C,EAAE,EAAA;AAE9C,QAAA,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,6DAA6D,EAC7D,OAAO,EACP,CAAC,YAAY,KACX,IAAI,CAAC,yBAAyB,CAAC;AAC7B,YAAA,OAAO,EAAE,YAAY;YACrB,KAAK,EAAE,MACL,IAAI,CAAC,WAAW,CAAC,oBAAoB,CACnC;gBACE,OAAO;AACP,gBAAA,eAAe,EAAE,CAAC,GAAG,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,UAAU,MAAM;AAC3D,oBAAA,OAAO,EAAE,UAAU;AACpB,iBAAA,CAAC,CAAC;gBACH,WAAW,EAAE,YAAY,CAAC,WAAW;gBACrC,IAAI,EAAE,YAAY,CAAC,IAAI;AACxB,aAAA,EACD,YAAY,CACb;AACJ,SAAA,CAAC,CACL,CAAC;KACH;AAED;;;;;;;;;;;;;;;;;AAiBG;AACI,IAAA,MAAM,oBAAoB,CAC/B,kBAA0B,EAC1B,UAAuC,EAAE,EAAA;QAEzC,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,wDAAwD,EACxD,OAAO,EACP,CAAC,YAAY,KACX,IAAI,CAAC,WAAW,CAAC,0BAA0B,CACzC;AACE,YAAA,OAAO,EAAE,kBAAkB;YAC3B,WAAW,EAAE,YAAY,CAAC,WAAW;YACrC,IAAI,EAAE,YAAY,CAAC,IAAI;SACxB,EACD,YAAY,CACb,CACJ,CAAC;KACH;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCG;IACI,MAAM,gBAAgB,CAC3B,aAAqB,EACrB,aAAgC,EAChC,UAAiC,EAAE,EAAA;AAEnC,QAAA,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,kDAAkD,EAClD,OAAO,EACP,CAAC,YAAY,KACX,IAAI,CAAC,yBAAyB,CAAC;AAC7B,YAAA,OAAO,EAAE,YAAY;AACrB,YAAA,KAAK,EAAE,MACL,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,aAAa,EAAE,aAAa,EAAE,YAAY,CAAC;AACnF,SAAA,CAAC,CACL,CAAC;KACH;AAED;;;;;;;AAOG;IACK,MAAM,yBAAyB,CACrC,UAAuC,EAAA;AAEvC,QAAA,MAAM,EAAE,UAAU,EAAE,GAAG,UAAU,CAAC,OAAO,CAAC;AAE1C,QAAA,MAAM,MAAM,GACV,UAAU,KAAK,SAAS;cACpB,MACE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CACpB,mEAAmE,EACnE,UAAU,CAAC,OAAO,EAClB,OAAO,OAAO,KAAI;gBAChB,MAAM,EAAE,iBAAiB,EAAE,GAAG,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;gBAEvD,IAAI,iBAAiB,KAAK,SAAS,EAAE;AACnC,oBAAA,MAAM,IAAI,KAAK,CACb,2EAA2E,CAC5E,CAAC;AACH,iBAAA;AAED,gBAAA,OAAO,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAC1C;oBACE,OAAO;iBACR,EACD;AACE,oBAAA,IAAI,EAAE,iBAAiB;AACvB,oBAAA,UAAU,EAAE,KAAK;AACjB,oBAAA,SAAS,EAAE;AACT,wBAAA,GAAG,EAAE;4BACH,UAAU,EAAET,gBAAwB;AACrC,yBAAA;AACD,wBAAA,OAAO,EAAE;4BACP,UAAU,EAAEzB,aAAqB;AAClC,yBAAA;AACF,qBAAA;oBACD,gBAAgB,EAAE,CAAC,OAAO,CAAC;AAC3B,oBAAA,UAAU,EAAE,UAAU;AACvB,iBAAA,CAC+B,CAAC;AACrC,aAAC,CACF;AACL,cAAE,MACE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CACpB,oEAAoE,EACpE,UAAU,CAAC,OAAO,EAClB,CAAC,OAAO,KAAI;gBACV,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAA4B,CAAC;gBAE1E,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;AAC7D,aAAC,CACF,CAAC;AAEV,QAAA,MAAM,MAAM,GAAG,MAAM,GAAG,CACtB;YACE,IAAI,EAAE,YAAY,4BAA4B,CAAC,MAAM,MAAM,EAAE,CAAC;YAC9D,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,KAC1B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CACpB,iEAAiE,EACjE,UAAU,CAAC,OAAO,EAClB,OAAO,OAAO,KAAI;AAChB,gBAAA,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;AAEtE,gBAAA,OAAO,4BAA4B,CAAC,GAAG,CAAC,CAAC;AAC3C,aAAC,CACF;AACH,YAAA,SAAS,EAAE,CAAC,EAAE,WAAW,EAAE,KAAK,IAAI,CAAC,SAAS,CAAC,EAAE,WAAW,EAAE,CAAC;AAChE,SAAA,EACD,UAAU,CAAC,OAAO,CAAC,kBAAkB,CACtC,CAAC;AAEF,QAAA,IAAI,UAAU,CAAC,OAAO,CAAC,UAAU,KAAK,SAAS,EAAE;YAC/C,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACjD,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,CAAC;AAC3D,SAAA;AAED,QAAA,OAAO,MAAM,CAAC;KACf;;;AAMD;;;;;;;;;;;;;;;;;;;AAmBG;IACI,kBAAkB,CAAC,UAAqC,EAAE,EAAA;QAC/D,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,sDAAsD,EACtD,OAAO,EACP,CAAC,YAAY,KAAK,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,YAAY,CAAC,CACpE,CAAC;KACH;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCG;AACI,IAAA,gBAAgB,CACrB,OAAe,EACf,OAAA,GAA2B,EAAE,EAAA;QAE7B,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,oDAAoD,EACpD,OAAO,EACP,CAAC,YAAY,KAAK,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,OAAO,EAAE,YAAY,CAAC,CAC3E,CAAC;KACH;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDG;IACI,kBAAkB,CACvB,UAA6B,EAAE,EAAA;QAE/B,OAAO,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;KACrD;AAED;;;;;;;;;;;;;;;;;;;;;;;;AAwBG;AACI,IAAA,YAAY,CACjB,WAAmB,EACnB,OAAA,GAA+B,EAAE,EAAA;QAEjC,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,gDAAgD,EAChD,OAAO,EACP,CAAC,YAAY,KAAK,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,WAAW,EAAE,YAAY,CAAC,CAC3E,CAAC;KACH;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCG;IACI,cAAc,CACnB,UAAiC,EAAE,EAAA;QAEnC,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;KACjD;AAED;;;;;;;;;;;AAWG;AACI,IAAA,mBAAmB,CACxB,OAAe,EACf,OAAA,GAAsC,EAAE,EAAA;QAExC,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,uDAAuD,EACvD,OAAO,EACP,CAAC,YAAY,KAAK,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,OAAO,EAAE,YAAY,CAAC,CAC9E,CAAC;KACH;AAGF;;AC3sBD;AACA;AAqBA;;AAEG;AACH;AACa,MAAA,sBAAsB,GAAG;AACpC;;;AAGG;AACH,IAAA,QAAQ,EAAE,UAAU;AACpB;;;AAGG;AACH,IAAA,MAAM,EAAE,QAAQ;;;ACpClB;AA8BA;;;;;;;AAOG;AACH,SAAS,YAAY,CACnB,SAAiB,EACjB,MAA2B,EAC3B,KAAoB,EAAA;AAEpB,IAAA,IAAI,MAAM,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE;AAC9B,QAAA,MAAM,IAAI,KAAK,CACb,CAAA,kBAAA,EAAqB,SAAS,CAAc,WAAA,EAAA,KAAK,CAAC,IAAI,oBAAoB,MAAM,CAAC,IAAI,CAAA,CAAA,CAAG,CACzF,CAAC;AACH,KAAA;;AAGD,IAAA,IAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;QAC3B,MAAM,MAAM,GAAQ,EAAE,CAAC;AAEvB,QAAA,KAAK,MAAM,CAAC,YAAY,EAAE,cAAc,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,UAAW,CAAC,EAAE;AAC/E,YAAA,IAAI,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,SAAS,IAAI,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,IAAI,EAAE;AAC3F,gBAAA,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,YAAY,GAAG,YAAY,CAAC,YAAY,CAAC,CAAC;AAC3E,oBAAA,YAAY,CACV,SAAS,GAAG,GAAG,GAAG,YAAY,EAC9B,cAAc,EACd,KAAK,CAAC,UAAU,CAAC,YAAY,CAAE,CAChC,CAAC;AACL,aAAA;AACF,SAAA;AAED,QAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,KAAK,CAAA,EAAA,EACR,UAAU,EAAE,MAAM,EAClB,CAAA,CAAA;AACH,KAAA;AAAM,SAAA,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE;AACjC,QAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,KAAK,CAAA,EAAA,EACR,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,KAChC,YAAY,CAAC,SAAS,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,MAAM,CAAC,KAAM,EAAE,GAAG,CAAC,CAC9D,EACD,CAAA,CAAA;AACH,KAAA;;AAAM,QAAA,OAAO,KAAK,CAAC;AACtB,CAAC;AAED;;;;;;;;;AASG;AACG,SAAU,qBAAqB,CACnC,MAA+C,EAAA;IAE/C,OAAO;QACL,OAAO,EAAE,MAAM,CAAC,OAAO;QACvB,UAAU,EAAE,MAAM,CAAC,UAAsC;AACzD,QAAA,eAAe,CAAC,UAAyB,EAAA;;AACvC,YAAA,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,CAAA,EAAA,GAAA,MAAM,CAAC,QAAQ,mCAAI,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;YAEtE,MAAM,gBAAgB,GAAG,YAAY,GAAG,EAAE,GAAG,SAAS,CAAC;AAEvD,YAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,UAAU,CACb,EAAA,EAAA,SAAS,EAAE,CAAA,EAAA,GAAA,MAAA,UAAU,CAAC,SAAS,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,GAAG,CAAC,UAAU,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,gBAAgB,EACpE,CAAA,CAAA;YAEF,SAAS,UAAU,CAAC,QAA0B,EAAA;;gBAC5C,MAAM,MAAM,GAA4B,EAAE,CAAC;gBAC3C,MAAM,KAAK,GAAG,CAAA,EAAA,GAAA,MAAM,CAAC,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;gBAElD,IAAI,KAAK,KAAK,SAAS,EAAE;AACvB,oBAAA,MAAM,IAAI,KAAK,CACb,CAAA,0BAAA,EAA6B,QAAQ,CAAC,OAAO,CAAA,yBAAA,EAA4B,MAAM,CAAC,OAAO,CAAA,CAAA,CAAG,CAC3F,CAAC;AACH,iBAAA;AACD,gBAAA,KAAK,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE;oBACxE,IACE,QAAQ,CAAC,MAAM;AACf,wBAAA,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,SAAS;AACxC,wBAAA,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,IAAI,EACnC;AACA,wBAAA,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,SAAS,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,GAAG,YAAY,CACjF,SAAS,EACT,WAAW,EACX,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAC3B,CAAC;AACH,qBAAA;AACF,iBAAA;AAED,gBAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,QAAQ,CAAA,EAAA,EACX,MAAM,EAAE,MAAM,EACd,CAAA,CAAA;aACH;SACF;KACF,CAAC;AACJ;;;;;;;;;;;;;"}