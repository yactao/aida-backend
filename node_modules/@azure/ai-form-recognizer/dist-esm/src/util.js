// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { isTokenCredential } from "@azure/core-auth";
import { bearerTokenAuthenticationPolicy } from "@azure/core-rest-pipeline";
import { createFormRecognizerAzureKeyCredentialPolicy } from "./azureKeyCredentialPolicy";
import { DEFAULT_COGNITIVE_SCOPE } from "./constants";
import { GeneratedClient } from "./generated";
import { DEFAULT_GENERATED_CLIENT_OPTIONS } from "./options/FormRecognizerClientOptions";
import * as Mappers from "./generated/models/mappers";
import { createSerializer } from "@azure/core-client";
export { Mappers };
// This is used for URL request processing.
export const SERIALIZER = createSerializer(Mappers, false);
/** @internal */
export const identity = (x) => x;
/**
 * Type-strong uncapitalization.
 * @internal
 */
export const uncapitalize = (s) => (s.substring(0, 1).toLowerCase() + s.substring(1));
/**
 * Type-strong capitalization
 * @internal
 */
export const capitalize = (s) => (s.substring(0, 1).toUpperCase() + s.substring(1));
/**
 * Tests if a string looks like it begins with an acronym, i.e. it starts with two capital letters.
 * @internal
 */
export const isAcronymic = (s) => {
    return /^[A-Z][A-Z]/.test(s);
};
/**
 * Map an optional value through a function
 * @internal
 */
export const maybemap = (value, f) => value === undefined ? undefined : f(value);
/**
 * Create a GeneratedClient.
 * @internal
 */
export function makeServiceClient(endpoint, credential, options) {
    const client = new GeneratedClient(endpoint === null || endpoint === void 0 ? void 0 : endpoint.replace(/\/$/, ""), Object.assign(Object.assign({}, DEFAULT_GENERATED_CLIENT_OPTIONS), options));
    const authPolicy = isTokenCredential(credential)
        ? bearerTokenAuthenticationPolicy({
            credential,
            scopes: DEFAULT_COGNITIVE_SCOPE,
        })
        : createFormRecognizerAzureKeyCredentialPolicy(credential);
    client.pipeline.addPolicy(authPolicy);
    return client;
}
//# sourceMappingURL=util.js.map