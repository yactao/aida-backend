{"version":3,"file":"documentModelAdministrationClient.js","sourceRoot":"","sources":["../../src/documentModelAdministrationClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EAAiB,mBAAmB,EAAE,MAAM,qBAAqB,CAAC;AAEzE,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAW1C,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAC;AACxD,OAAO,EAIL,4BAA4B,GAC7B,MAAM,sBAAsB,CAAC;AAC9B,OAAO,EAAE,GAAG,EAAE,MAAM,mBAAmB,CAAC;AAiBxC,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,iBAAiB,EAAE,MAAM,QAAQ,CAAC;AAEhE;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACH,MAAM,OAAO,iCAAiC;IA+D5C,YACE,QAAgB,EAChB,UAA2C,EAC3C,UAAoD,EAAE;QAEtD,IAAI,CAAC,WAAW,GAAG,iBAAiB,CAAC,QAAQ,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;QACpE,IAAI,CAAC,QAAQ,GAAG,mBAAmB,CAAC;YAClC,WAAW,EAAE,2BAA2B;YACxC,cAAc,EAAE,WAAW;YAC3B,SAAS,EAAE,6BAA6B;SACzC,CAAC,CAAC;IACL,CAAC;IAED,yBAAyB;IAEzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAyCG;IACI,KAAK,CAAC,uBAAuB,CAClC,OAAe,EACf,YAAoB,EACpB,SAAiC,EACjC,UAA0C,EAAE;QAE5C,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,2DAA2D,EAC3D,OAAO,EACP,CAAC,YAAY,EAAE,EAAE,CACf,IAAI,CAAC,yBAAyB,CAAC;YAC7B,OAAO,EAAE,YAAY;YACrB,KAAK,EAAE,GAAG,EAAE,CACV,IAAI,CAAC,WAAW,CAAC,kBAAkB,CACjC;gBACE,OAAO;gBACP,WAAW,EAAE,YAAY,CAAC,WAAW;gBACrC,eAAe,EAAE;oBACf,YAAY;iBACb;gBACD,SAAS;aACV,EACD,YAAY,CACb;SACJ,CAAC,CACL,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAsCG;IACI,KAAK,CAAC,yBAAyB,CACpC,OAAe,EACf,iBAAmC,EACnC,UAA4C,EAAE;QAE9C,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,6DAA6D,EAC7D,OAAO,EACP,CAAC,YAAY,EAAE,EAAE,CACf,IAAI,CAAC,yBAAyB,CAAC;YAC7B,OAAO,EAAE,YAAY;YACrB,KAAK,EAAE,GAAG,EAAE,CACV,IAAI,CAAC,WAAW,CAAC,oBAAoB,CACnC;gBACE,OAAO;gBACP,eAAe,EAAE,CAAC,GAAG,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;oBAC3D,OAAO,EAAE,UAAU;iBACpB,CAAC,CAAC;gBACH,WAAW,EAAE,YAAY,CAAC,WAAW;gBACrC,IAAI,EAAE,YAAY,CAAC,IAAI;aACxB,EACD,YAAY,CACb;SACJ,CAAC,CACL,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;OAiBG;IACI,KAAK,CAAC,oBAAoB,CAC/B,kBAA0B,EAC1B,UAAuC,EAAE;QAEzC,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,wDAAwD,EACxD,OAAO,EACP,CAAC,YAAY,EAAE,EAAE,CACf,IAAI,CAAC,WAAW,CAAC,0BAA0B,CACzC;YACE,OAAO,EAAE,kBAAkB;YAC3B,WAAW,EAAE,YAAY,CAAC,WAAW;YACrC,IAAI,EAAE,YAAY,CAAC,IAAI;SACxB,EACD,YAAY,CACb,CACJ,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAoCG;IACI,KAAK,CAAC,gBAAgB,CAC3B,aAAqB,EACrB,aAAgC,EAChC,UAAiC,EAAE;QAEnC,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,kDAAkD,EAClD,OAAO,EACP,CAAC,YAAY,EAAE,EAAE,CACf,IAAI,CAAC,yBAAyB,CAAC;YAC7B,OAAO,EAAE,YAAY;YACrB,KAAK,EAAE,GAAG,EAAE,CACV,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,aAAa,EAAE,aAAa,EAAE,YAAY,CAAC;SACnF,CAAC,CACL,CAAC;IACJ,CAAC;IAED;;;;;;;OAOG;IACK,KAAK,CAAC,yBAAyB,CACrC,UAAuC;QAEvC,MAAM,EAAE,UAAU,EAAE,GAAG,UAAU,CAAC,OAAO,CAAC;QAE1C,MAAM,MAAM,GACV,UAAU,KAAK,SAAS;YACtB,CAAC,CAAC,GAAG,EAAE,CACH,IAAI,CAAC,QAAQ,CAAC,QAAQ,CACpB,mEAAmE,EACnE,UAAU,CAAC,OAAO,EAClB,KAAK,EAAE,OAAO,EAAE,EAAE;gBAChB,MAAM,EAAE,iBAAiB,EAAE,GAAG,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;gBAEvD,IAAI,iBAAiB,KAAK,SAAS,EAAE;oBACnC,MAAM,IAAI,KAAK,CACb,2EAA2E,CAC5E,CAAC;iBACH;gBAED,OAAO,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAC1C;oBACE,OAAO;iBACR,EACD;oBACE,IAAI,EAAE,iBAAiB;oBACvB,UAAU,EAAE,KAAK;oBACjB,SAAS,EAAE;wBACT,GAAG,EAAE;4BACH,UAAU,EAAE,OAAO,CAAC,gBAAgB;yBACrC;wBACD,OAAO,EAAE;4BACP,UAAU,EAAE,OAAO,CAAC,aAAa;yBAClC;qBACF;oBACD,gBAAgB,EAAE,CAAC,OAAO,CAAC;oBAC3B,UAAU,EAAE,UAAU;iBACvB,CAC+B,CAAC;YACrC,CAAC,CACF;YACL,CAAC,CAAC,GAAG,EAAE,CACH,IAAI,CAAC,QAAQ,CAAC,QAAQ,CACpB,oEAAoE,EACpE,UAAU,CAAC,OAAO,EAClB,CAAC,OAAO,EAAE,EAAE;gBACV,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAA4B,CAAC;gBAE1E,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAC7D,CAAC,CACF,CAAC;QAEV,MAAM,MAAM,GAAG,MAAM,GAAG,CACtB;YACE,IAAI,EAAE,KAAK,IAAI,EAAE,CAAC,4BAA4B,CAAC,MAAM,MAAM,EAAE,CAAC;YAC9D,IAAI,EAAE,KAAK,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,CAC9B,IAAI,CAAC,QAAQ,CAAC,QAAQ,CACpB,iEAAiE,EACjE,UAAU,CAAC,OAAO,EAClB,KAAK,EAAE,OAAO,EAAE,EAAE;gBAChB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;gBAEtE,OAAO,4BAA4B,CAAC,GAAG,CAAC,CAAC;YAC3C,CAAC,CACF;YACH,SAAS,EAAE,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,WAAW,EAAE,CAAC;SAChE,EACD,UAAU,CAAC,OAAO,CAAC,kBAAkB,CACtC,CAAC;QAEF,IAAI,UAAU,CAAC,OAAO,CAAC,UAAU,KAAK,SAAS,EAAE;YAC/C,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACjD,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,CAAC;SAC3D;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,aAAa;IAEb,2BAA2B;IAE3B;;;;;;;;;;;;;;;;;;;OAmBG;IACI,kBAAkB,CAAC,UAAqC,EAAE;QAC/D,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,sDAAsD,EACtD,OAAO,EACP,CAAC,YAAY,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,YAAY,CAAC,CACpE,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAyCG;IACI,gBAAgB,CACrB,OAAe,EACf,UAA2B,EAAE;QAE7B,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,oDAAoD,EACpD,OAAO,EACP,CAAC,YAAY,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,OAAO,EAAE,YAAY,CAAC,CAC3E,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAsDG;IACI,kBAAkB,CACvB,UAA6B,EAAE;QAE/B,OAAO,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;IACtD,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;OAwBG;IACI,YAAY,CACjB,WAAmB,EACnB,UAA+B,EAAE;QAEjC,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,gDAAgD,EAChD,OAAO,EACP,CAAC,YAAY,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,WAAW,EAAE,YAAY,CAAC,CAC3E,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAsCG;IACI,cAAc,CACnB,UAAiC,EAAE;QAEnC,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;IAClD,CAAC;IAED;;;;;;;;;;;OAWG;IACI,mBAAmB,CACxB,OAAe,EACf,UAAsC,EAAE;QAExC,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAC3B,uDAAuD,EACvD,OAAO,EACP,CAAC,YAAY,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC,OAAO,EAAE,YAAY,CAAC,CAC9E,CAAC;IACJ,CAAC;CAGF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { TracingClient, createTracingClient } from \"@azure/core-tracing\";\nimport { __decorate } from \"tslib\";\nimport { SDK_VERSION } from \"./constants\";\nimport {\n  CopyAuthorization,\n  GeneratedClient,\n  ResourceDetails,\n  GetOperationResponse,\n  DocumentModelDetails,\n  DocumentModelSummary,\n  OperationSummary,\n  OperationDetails,\n} from \"./generated\";\nimport { accept1 } from \"./generated/models/parameters\";\nimport {\n  TrainingOperationDefinition,\n  DocumentModelOperationState,\n  DocumentModelPoller,\n  toTrainingPollOperationState,\n} from \"./lro/administration\";\nimport { lro } from \"./lro/util/poller\";\nimport {\n  BeginCopyModelOptions,\n  DeleteDocumentModelOptions,\n  DocumentModelAdministrationClientOptions,\n  GetCopyAuthorizationOptions,\n  GetResourceDetailsOptions,\n  GetModelOptions,\n  GetOperationOptions,\n  ListModelsOptions,\n  ListOperationsOptions,\n} from \"./options\";\nimport {\n  BeginBuildDocumentModelOptions,\n  BeginComposeDocumentModelOptions,\n  DocumentModelBuildMode,\n} from \"./options/BuildModelOptions\";\nimport { Mappers, SERIALIZER, makeServiceClient } from \"./util\";\n\n/**\n * A client for interacting with the Form Recognizer service's model management features, such as creating, reading,\n * listing, deleting, and copying models.\n *\n * ### Examples:\n *\n * #### Azure Active Directory\n *\n * ```typescript\n * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n * import { DefaultAzureCredential } from \"@azure/identity\";\n *\n * const endpoint = \"https://<resource name>.cognitiveservices.azure.com\";\n * const credential = new DefaultAzureCredential();\n *\n * const client = new DocumentModelAdministrationClient(endpoint, credential);\n * ```\n *\n * #### API Key (Subscription Key)\n *\n * ```typescript\n * import { DocumentModelAdministrationClient, AzureKeyCredential } from \"@azure/ai-form-recognizer\";\n *\n * const endpoint = \"https://<resource name>.cognitiveservices.azure.com\";\n * const credential = new AzureKeyCredential(\"<api key>\");\n *\n * const client = new DocumentModelAdministrationClient(endpoint, credential);\n * ```\n */\nexport class DocumentModelAdministrationClient {\n  private _restClient: GeneratedClient;\n  private _tracing: TracingClient;\n\n  /**\n   * Create a DocumentModelAdministrationClient instance from a resource endpoint and a an Azure Identity `TokenCredential`.\n   *\n   * See the [`@azure/identity`](https://npmjs.com/package/\\@azure/identity) package for more information about\n   * authenticating with Azure Active Directory.\n   *\n   * ### Example:\n   *\n   * ```javascript\n   * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   *\n   * const endpoint = \"https://<resource name>.cognitiveservices.azure.com\";\n   * const credential = new DefaultAzureCredential();\n   *\n   * const client = new DocumentModelAdministrationClient(endpoint, credential);\n   * ```\n   *\n   * @param endpoint - the endpoint URL of an Azure Cognitive Services instance\n   * @param credential - a TokenCredential instance from the `@azure/identity` package\n   * @param options - optional settings for configuring all methods in the client\n   */\n  public constructor(\n    endpoint: string,\n    credential: TokenCredential,\n    options?: DocumentModelAdministrationClientOptions\n  );\n  /**\n   * Create a DocumentModelAdministrationClient instance from a resource endpoint and a static API key\n   * (`KeyCredential`),\n   *\n   * ### Example:\n   *\n   * ```javascript\n   * import { DocumentModelAdministrationClient, AzureKeyCredential } from \"@azure/ai-form-recognizer\";\n   *\n   * const endpoint = \"https://<resource name>.cognitiveservices.azure.com\";\n   * const credential = new AzureKeyCredential(\"<api key>\");\n   *\n   * const client = new DocumentModelAdministrationClient(endpoint, credential);\n   * ```\n   *\n   * @param endpoint - the endpoint URL of an Azure Cognitive Services instance\n   * @param credential - a KeyCredential containing the Cognitive Services instance subscription key\n   * @param options - optional settings for configuring all methods in the client\n   */\n  public constructor(\n    endpoint: string,\n    credential: KeyCredential,\n    options?: DocumentModelAdministrationClientOptions\n  );\n  /**\n   * @hidden\n   */\n  public constructor(\n    endpoint: string,\n    credential: KeyCredential | TokenCredential,\n    options?: DocumentModelAdministrationClientOptions\n  );\n  public constructor(\n    endpoint: string,\n    credential: KeyCredential | TokenCredential,\n    options: DocumentModelAdministrationClientOptions = {}\n  ) {\n    this._restClient = makeServiceClient(endpoint, credential, options);\n    this._tracing = createTracingClient({\n      packageName: \"@azure/ai-form-recognizer\",\n      packageVersion: SDK_VERSION,\n      namespace: \"Microsoft.CognitiveServices\",\n    });\n  }\n\n  // #region Model Creation\n\n  /**\n   * Build a new model with a given ID from a set of input documents and labeled fields.\n   *\n   * The Model ID can consist of any text, so long as it does not begin with \"prebuilt-\" (as these models refer to\n   * prebuilt Form Recognizer models that are common to all resources), and so long as it does not already exist within\n   * the resource.\n   *\n   * The Form Recognizer service reads the training data set from an Azure Storage container, given as a URL to the\n   * container with a SAS token that allows the service backend to communicate with the container. At a minimum, the\n   * \"read\" and \"list\" permissions are required. In addition, the data in the given container must be organized\n   * according to a particular convention, which is documented in [the service's documentation for building custom\n   * models](https://aka.ms/form-recognizer/custom).\n   *\n   * ### Example\n   *\n   * ```javascript\n   * const modelId = \"aNewModel\";\n   * const containerUrl = \"<training data container SAS URL>\";\n   *\n   * const poller = await client.beginBuildDocumentModel(modelId, containerUrl, {\n   *   // Optionally, a text description may be attached to the model\n   *   description: \"This is an example model!\"\n   * });\n   *\n   * // Model building, like all other model creation operations, returns a poller that eventually produces a ModelDetails\n   * // object\n   * const modelDetails = await poller.pollUntilDone();\n   *\n   * const {\n   *   modelId, // identical to the modelId given when creating the model\n   *   description, // identical to the description given when creating the model\n   *   createdOn, // the Date (timestamp) that the model was created\n   *   docTypes // information about the document types in the model and their field schemas\n   * } = modelDetails;\n   * ```\n   *\n   * @param modelId - the unique ID of the model to create\n   * @param containerUrl - SAS-encoded URL to an Azure Storage container holding the training data set\n   * @param buildMode - the mode to use when building the model (see `DocumentModelBuildMode`)\n   * @param options - optional settings for the model build operation\n   * @returns a long-running operation (poller) that will eventually produce the created model information or an error\n   */\n  public async beginBuildDocumentModel(\n    modelId: string,\n    containerUrl: string,\n    buildMode: DocumentModelBuildMode,\n    options: BeginBuildDocumentModelOptions = {}\n  ): Promise<DocumentModelPoller> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.beginBuildDocumentModel\",\n      options,\n      (finalOptions) =>\n        this.createDocumentModelPoller({\n          options: finalOptions,\n          start: () =>\n            this._restClient.buildDocumentModel(\n              {\n                modelId,\n                description: finalOptions.description,\n                azureBlobSource: {\n                  containerUrl,\n                },\n                buildMode,\n              },\n              finalOptions\n            ),\n        })\n    );\n  }\n\n  /**\n   * Creates a single composed model from several pre-existing submodels.\n   *\n   * The resulting composed model combines the document types of its component models, and inserts a classification step\n   * into the extraction pipeline to determine which of its component submodels is most appropriate for the given input.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * const modelId = \"aNewComposedModel\";\n   * const subModelIds = [\n   *   \"documentType1Model\",\n   *   \"documentType2Model\",\n   *   \"documentType3Model\"\n   * ];\n   *\n   * // The resulting composed model can classify and extract data from documents\n   * // conforming to any of the above document types\n   * const poller = await client.beginComposeDocumentModel(modelId, subModelIds, {\n   *   description: \"This is a composed model that can handle several document types.\"\n   * });\n   *\n   * // Model composition, like all other model creation operations, returns a poller that eventually produces a\n   * // ModelDetails object\n   * const modelDetails = await poller.pollUntilDone();\n   *\n   * const {\n   *   modelId, // identical to the modelId given when creating the model\n   *   description, // identical to the description given when creating the model\n   *   createdOn, // the Date (timestamp) that the model was created\n   *   docTypes // information about the document types of the composed submodels\n   * } = modelDetails;\n   * ```\n   *\n   * @param modelId - the unique ID of the model to create\n   * @param componentModelIds - an Iterable of strings representing the unique model IDs of the models to compose\n   * @param options - optional settings for model creation\n   * @returns a long-running operation (poller) that will eventually produce the created model information or an error\n   */\n  public async beginComposeDocumentModel(\n    modelId: string,\n    componentModelIds: Iterable<string>,\n    options: BeginComposeDocumentModelOptions = {}\n  ): Promise<DocumentModelPoller> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.beginComposeDocumentModel\",\n      options,\n      (finalOptions) =>\n        this.createDocumentModelPoller({\n          options: finalOptions,\n          start: () =>\n            this._restClient.composeDocumentModel(\n              {\n                modelId,\n                componentModels: [...componentModelIds].map((submodelId) => ({\n                  modelId: submodelId,\n                })),\n                description: finalOptions.description,\n                tags: finalOptions.tags,\n              },\n              finalOptions\n            ),\n        })\n    );\n  }\n\n  /**\n   * Creates an authorization to copy a model into the resource, used with the `beginCopyModelTo` method.\n   *\n   * The `CopyAuthorization` grants another cognitive service resource the right to create a model in this client's\n   * resource with the model ID and optional description that are encoded into the authorization.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * // The copyAuthorization data structure stored below grants any cognitive services resource the right to copy a\n   * // model into the client's resource with the given destination model ID.\n   * const copyAuthorization = await client.getCopyAuthorization(\"<destination model ID>\");\n   * ```\n   *\n   * @param destinationModelId - the unique ID of the destination model (the ID to copy the model into)\n   * @param options - optional settings for creating the copy authorization\n   * @returns a copy authorization that encodes the given modelId and optional description\n   */\n  public async getCopyAuthorization(\n    destinationModelId: string,\n    options: GetCopyAuthorizationOptions = {}\n  ): Promise<CopyAuthorization> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.getCopyAuthorization\",\n      options,\n      (finalOptions) =>\n        this._restClient.authorizeCopyDocumentModel(\n          {\n            modelId: destinationModelId,\n            description: finalOptions.description,\n            tags: finalOptions.tags,\n          },\n          finalOptions\n        )\n    );\n  }\n\n  /**\n   * Copies a model with the given ID into the resource and model ID encoded by a given copy authorization.\n   *\n   * See {@link CopyAuthorization} and {@link getCopyAuthorization}.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * // We need a client for the source model's resource\n   * const sourceEndpoint = \"https://<source resource name>.cognitiveservices.azure.com\";\n   * const sourceCredential = new AzureKeyCredential(\"<source api key>\");\n   * const sourceClient = new DocumentModelAdministrationClient(sourceEndpoint, sourceCredential);\n   *\n   * // We create the copy authorization using a client authenticated with the destination resource. Note that these two\n   * // resources can be the same (you can copy a model to a new ID in the same resource).\n   * const copyAuthorization = await client.getCopyAuthorization(\"<destination model ID>\");\n   *\n   * // Finally, use the _source_ client to copy the model and await the copy operation\n   * const poller = await sourceClient.beginCopyModelTo(\"<source model ID>\");\n   *\n   * // Model copying, like all other model creation operations, returns a poller that eventually produces a ModelDetails\n   * // object\n   * const modelDetails = await poller.pollUntilDone();\n   *\n   * const {\n   *   modelId, // identical to the modelId given when creating the copy authorization\n   *   description, // identical to the description given when creating the copy authorization\n   *   createdOn, // the Date (timestamp) that the model was created\n   *   docTypes // information about the document types of the model (identical to the original, source model)\n   * } = modelDetails;\n   * ```\n   *\n   * @param sourceModelId - the unique ID of the source model that will be copied\n   * @param authorization - an authorization to copy the model, created using the {@link getCopyAuthorization}\n   * @param options - optional settings for\n   * @returns a long-running operation (poller) that will eventually produce the copied model information or an error\n   */\n  public async beginCopyModelTo(\n    sourceModelId: string,\n    authorization: CopyAuthorization,\n    options: BeginCopyModelOptions = {}\n  ): Promise<DocumentModelPoller> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.beginCopyModel\",\n      options,\n      (finalOptions) =>\n        this.createDocumentModelPoller({\n          options: finalOptions,\n          start: () =>\n            this._restClient.copyDocumentModelTo(sourceModelId, authorization, finalOptions),\n        })\n    );\n  }\n\n  /**\n   * Create an LRO poller that handles model creation operations.\n   *\n   * This is the meat of the above model creation operations.\n   *\n   * @param definition - operation definition (start operation method, request options)\n   * @returns a model poller (produces a ModelDetails)\n   */\n  private async createDocumentModelPoller(\n    definition: TrainingOperationDefinition\n  ): Promise<DocumentModelPoller> {\n    const { resumeFrom } = definition.options;\n\n    const toInit =\n      resumeFrom === undefined\n        ? () =>\n            this._tracing.withSpan(\n              \"DocumentModelAdministrationClient.createDocumentModelPoller-start\",\n              definition.options,\n              async (options) => {\n                const { operationLocation } = await definition.start();\n\n                if (operationLocation === undefined) {\n                  throw new Error(\n                    \"Unable to start model creation operation: no Operation-Location received.\"\n                  );\n                }\n\n                return this._restClient.sendOperationRequest(\n                  {\n                    options,\n                  },\n                  {\n                    path: operationLocation,\n                    httpMethod: \"GET\",\n                    responses: {\n                      200: {\n                        bodyMapper: Mappers.OperationDetails,\n                      },\n                      default: {\n                        bodyMapper: Mappers.ErrorResponse,\n                      },\n                    },\n                    headerParameters: [accept1],\n                    serializer: SERIALIZER,\n                  }\n                ) as Promise<GetOperationResponse>;\n              }\n            )\n        : () =>\n            this._tracing.withSpan(\n              \"DocumentModelAdministrationClient.createDocumentModelPoller-resume\",\n              definition.options,\n              (options) => {\n                const { operationId } = JSON.parse(resumeFrom) as { operationId: string };\n\n                return this._restClient.getOperation(operationId, options);\n              }\n            );\n\n    const poller = await lro<DocumentModelDetails, DocumentModelOperationState>(\n      {\n        init: async () => toTrainingPollOperationState(await toInit()),\n        poll: async ({ operationId }) =>\n          this._tracing.withSpan(\n            \"DocumentModelAdminstrationClient.createDocumentModelPoller-poll\",\n            definition.options,\n            async (options) => {\n              const res = await this._restClient.getOperation(operationId, options);\n\n              return toTrainingPollOperationState(res);\n            }\n          ),\n        serialize: ({ operationId }) => JSON.stringify({ operationId }),\n      },\n      definition.options.updateIntervalInMs\n    );\n\n    if (definition.options.onProgress !== undefined) {\n      poller.onProgress(definition.options.onProgress);\n      definition.options.onProgress(poller.getOperationState());\n    }\n\n    return poller;\n  }\n\n  // #endregion\n\n  // #region Model Management\n\n  /**\n   * Retrieve basic information about this client's resource.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * const {\n   *   // Information about the custom models in the current resource\n   *   customDocumentModelDetails: {\n   *     // The number of custom models in the current resource\n   *     count,\n   *     // The maximum number of models that the current resource can support\n   *     limit\n   *   }\n   * } = await client.getResourceDetails();\n   * ```\n   *\n   * @param options - optional settings for the request\n   * @returns basic information about this client's resource\n   */\n  public getResourceDetails(options: GetResourceDetailsOptions = {}): Promise<ResourceDetails> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.getResourceDetails\",\n      options,\n      (finalOptions) => this._restClient.getResourceDetails(finalOptions)\n    );\n  }\n\n  /**\n   * Retrieves information about a model ({@link ModelDetails}) by ID.\n   *\n   * This method can retrieve information about custom as well as prebuilt models.\n   *\n   * ### **Breaking Change**\n   *\n   * In previous versions of the Form Recognizer REST API and SDK, the `getModel` method could return any model, even\n   * one that failed to create due to errors. In the new service versions, `getDocumentModel` and `listDocumentModels`\n   * _only produce successfully created models_ (i.e. models that are \"ready\" for use). Failed models are now retrieved\n   * through the \"operations\" APIs, see {@link getOperation} and {@link listOperations}.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * // The ID of the prebuilt business card model\n   * const modelId = \"prebuilt-businessCard\";\n   *\n   * const {\n   *   modelId, // identical to the modelId given when calling `getDocumentModel`\n   *   description, // a textual description of the model, if provided during model creation\n   *   createdOn, // the Date (timestamp) that the model was created\n   *   // information about the document types in the model and their field schemas\n   *   docTypes: {\n   *     // the document type of the prebuilt business card model\n   *     \"prebuilt:businesscard\": {\n   *       // an optional, textual description of this document type\n   *       description,\n   *       // the schema of the fields in this document type, see the FieldSchema type\n   *       fieldSchema,\n   *       // the service's confidences in the fields (an object with field names as properties and numeric confidence\n   *       // values)\n   *       fieldConfidence\n   *     }\n   *   }\n   * } = await client.getDocumentModel(modelId);\n   * ```\n   *\n   * @param modelId - the unique ID of the model to query\n   * @param options - optional settings for the request\n   * @returns information about the model with the given ID\n   */\n  public getDocumentModel(\n    modelId: string,\n    options: GetModelOptions = {}\n  ): Promise<DocumentModelDetails> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.getDocumentModel\",\n      options,\n      (finalOptions) => this._restClient.getDocumentModel(modelId, finalOptions)\n    );\n  }\n\n  /**\n   * List summaries of models in the resource. Custom as well as prebuilt models will be included. This operation\n   * supports paging.\n   *\n   * The model summary ({@link ModelSummary}) includes only the basic information about the model, and does not include\n   * information about the document types in the model (such as the field schemas and confidence values).\n   *\n   * To access the full information about the model, use {@link getDocumentModel}.\n   *\n   * ### **Breaking Change**\n   *\n   * In previous versions of the Form Recognizer REST API and SDK, the `listModels` method would return all models, even\n   * those that failed to create due to errors. In the new service versions, `listDocumentModels` and `getDocumentModel`\n   * _only produce successfully created models_ (i.e. models that are \"ready\" for use). Failed models are now retrieved\n   * through the \"operations\" APIs, see {@link getOperation} and {@link listOperations}.\n   *\n   * ### Examples\n   *\n   * #### Async Iteration\n   *\n   * ```javascript\n   * for await (const summary of client.listDocumentModels()) {\n   *   const {\n   *     modelId, // The model's unique ID\n   *     description, // a textual description of the model, if provided during model creation\n   *   } = summary;\n   *\n   *   // You can get the full model info using `getDocumentModel`\n   *   const model = await client.getDocumentModel(modelId);\n   * }\n   * ```\n   *\n   * #### By Page\n   *\n   * ```javascript\n   * // The listDocumentModels method is paged, and you can iterate by page using the `byPage` method.\n   * const pages = client.listDocumentModels().byPage();\n   *\n   * for await (const page of pages) {\n   *   // Each page is an array of models and can be iterated synchronously\n   *   for (const model of page) {\n   *     const {\n   *       modelId, // The model's unique ID\n   *       description, // a textual description of the model, if provided during model creation\n   *     } = summary;\n   *\n   *     // You can get the full model info using `getDocumentModel`\n   *     const model = await client.getDocumentModel(modelId);\n   *   }\n   * }\n   * ```\n   *\n   * @param options - optional settings for the model requests\n   * @returns an async iterable of model summaries that supports paging\n   */\n  public listDocumentModels(\n    options: ListModelsOptions = {}\n  ): PagedAsyncIterableIterator<DocumentModelSummary> {\n    return this._restClient.listDocumentModels(options);\n  }\n\n  /**\n   * Retrieves information about an operation (`OperationDetails`) by its ID.\n   *\n   * Operations represent non-analysis tasks, such as building, composing, or copying a model.\n   *\n   * @param operationId - the ID of the operation to query\n   * @param options - optional settings for the request\n   * @returns information about the operation with the given ID\n   *\n   * ### Example\n   *\n   * ```javascript\n   * // The ID of the operation, which should be a GUID\n   * const operationId = \"<operation GUID>\";\n   *\n   * const {\n   *   operationId, // identical to the operationId given when calling `getOperation`\n   *   kind, // the operation kind, one of \"documentModelBuild\", \"documentModelCompose\", or \"documentModelCopyTo\"\n   *   status, // the status of the operation, one of \"notStarted\", \"running\", \"failed\", \"succeeded\", or \"canceled\"\n   *   percentCompleted, // a number between 0 and 100 representing the progress of the operation\n   *   createdOn, // a Date object that reflects the time when the operation was started\n   *   lastUpdatedOn, // a Date object that reflects the time when the operation state was last modified\n   * } = await client.getOperation(operationId);\n   * ```\n   */\n  public getOperation(\n    operationId: string,\n    options: GetOperationOptions = {}\n  ): Promise<OperationDetails> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.getOperation\",\n      options,\n      (finalOptions) => this._restClient.getOperation(operationId, finalOptions)\n    );\n  }\n\n  /**\n   * List model creation operations in the resource. This will produce all operations, including operations that failed\n   * to create models successfully. This operation supports paging.\n   *\n   * ### Examples\n   *\n   * #### Async Iteration\n   *\n   * ```javascript\n   * for await (const operation of client.listOperations()) {\n   *   const {\n   *     operationId, // the operation's GUID\n   *     status, // the operation status, one of \"notStarted\", \"running\", \"succeeded\", \"failed\", or \"canceled\"\n   *     percentCompleted // the progress of the operation, from 0 to 100\n   *   } = operation;\n   * }\n   * ```\n   *\n   * #### By Page\n   *\n   * ```javascript\n   * // The listOperations method is paged, and you can iterate by page using the `byPage` method.\n   * const pages = client.listOperations().byPage();\n   *\n   * for await (const page of pages) {\n   *   // Each page is an array of operation info objects and can be iterated synchronously\n   *   for (const operation of page) {\n   *     const {\n   *       operationId, // the operation's GUID\n   *       status, // the operation status, one of \"notStarted\", \"running\", \"succeeded\", \"failed\", or \"canceled\"\n   *       percentCompleted // the progress of the operation, from 0 to 100\n   *     } = operation;\n   *   }\n   * }\n   * ```\n   *\n   * @param options - optional settings for the operation requests\n   * @returns an async iterable of operation information objects that supports paging\n   */\n  public listOperations(\n    options: ListOperationsOptions = {}\n  ): PagedAsyncIterableIterator<OperationSummary> {\n    return this._restClient.listOperations(options);\n  }\n\n  /**\n   * Deletes a model with the given ID from the client's resource, if it exists. This operation CANNOT be reverted.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * await client.deleteModel(\"<model ID to delete>\"));\n   * ```\n   *\n   * @param modelId - the unique ID of the model to delete from the resource\n   * @param options - optional settings for the request\n   */\n  public deleteDocumentModel(\n    modelId: string,\n    options: DeleteDocumentModelOptions = {}\n  ): Promise<void> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.deleteDocumentModel\",\n      options,\n      (finalOptions) => this._restClient.deleteDocumentModel(modelId, finalOptions)\n    );\n  }\n\n  // #endregion\n}\n"]}