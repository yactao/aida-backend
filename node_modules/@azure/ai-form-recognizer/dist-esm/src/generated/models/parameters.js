/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { AnalyzeDocumentRequest as AnalyzeDocumentRequestMapper, BuildDocumentModelRequest as BuildDocumentModelRequestMapper, ComposeDocumentModelRequest as ComposeDocumentModelRequestMapper, AuthorizeCopyRequest as AuthorizeCopyRequestMapper, CopyAuthorization as CopyAuthorizationMapper } from "../models/mappers";
export const contentType = {
    parameterPath: "contentType",
    mapper: {
        serializedName: "Content-Type",
        required: true,
        type: {
            name: "Enum",
            allowedValues: [
                "application/octet-stream",
                "application/pdf",
                "image/bmp",
                "image/heif",
                "image/jpeg",
                "image/png",
                "image/tiff"
            ]
        }
    }
};
export const analyzeRequest = {
    parameterPath: ["options", "analyzeRequest"],
    mapper: {
        serializedName: "analyzeRequest",
        type: {
            name: "Stream"
        }
    }
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const contentType1 = {
    parameterPath: "contentType",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const analyzeRequest1 = {
    parameterPath: ["options", "analyzeRequest"],
    mapper: AnalyzeDocumentRequestMapper
};
export const accept1 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const endpoint = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "endpoint",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const modelId = {
    parameterPath: "modelId",
    mapper: {
        constraints: {
            Pattern: new RegExp("[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}")
        },
        serializedName: "modelId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const pages = {
    parameterPath: ["options", "pages"],
    mapper: {
        constraints: {
            Pattern: new RegExp("^(\\d+(-\\d+)?)(,\\s*(\\d+(-\\d+)?))*$")
        },
        serializedName: "pages",
        type: {
            name: "String"
        }
    }
};
export const locale = {
    parameterPath: ["options", "locale"],
    mapper: {
        serializedName: "locale",
        type: {
            name: "String"
        }
    }
};
export const stringIndexType = {
    parameterPath: "stringIndexType",
    mapper: {
        serializedName: "stringIndexType",
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-08-31",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const resultId = {
    parameterPath: "resultId",
    mapper: {
        serializedName: "resultId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType2 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const buildRequest = {
    parameterPath: "buildRequest",
    mapper: BuildDocumentModelRequestMapper
};
export const composeRequest = {
    parameterPath: "composeRequest",
    mapper: ComposeDocumentModelRequestMapper
};
export const authorizeCopyRequest = {
    parameterPath: "authorizeCopyRequest",
    mapper: AuthorizeCopyRequestMapper
};
export const copyToRequest = {
    parameterPath: "copyToRequest",
    mapper: CopyAuthorizationMapper
};
export const operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
//# sourceMappingURL=parameters.js.map