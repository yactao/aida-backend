{"version":3,"file":"ClientUtils.js","sourceRoot":"","sources":["../../../src/client/ClientUtils.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAOlC,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAC9C,cAAsC,EACtC,SAAoB;IAEpB,MAAM,sBAAsB,GAAG,MAAM,SAAS,CAAC,0BAA0B,CAAC,cAAc,CAAC,CAAC;IAC1F,OAAO,sBAAsB,CAAC,QAAQ,CAAC;AACzC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAC9C,cAAsC,EACtC,YAAkC,EAClC,sBAA8C,EAC9C,+BAAwC,EACxC,SAAoB,EACpB,YAAqC;IAErC,IAAI,mBAAmB,GAAuB,SAAS,CAAC;IACxD,IAAI,+BAA+B,EAAE,CAAC;QACpC,MAAM,sBAAsB,GAC1B,YAAY,IAAI,CAAC,MAAM,0BAA0B,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC,CAAC;QAChF,IAAI,sBAAsB,IAAI,YAAY,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACtE,mBAAmB,GAAG,MAAM,sBAAsB,CAAC,sCAAsC,CACvF,SAAS,CAAC,GAAG,EACb,YAAY,EACZ,sBAAsB,EACtB,cAAc,CACf,CAAC;QACJ,CAAC;IACH,CAAC;IACD,OAAO,mBAAmB,CAAC;AAC7B,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal.js\";\nimport type { PartitionKeyDefinition, PartitionKeyInternal } from \"../documents/index.js\";\nimport { PartitionKeyRangeCache } from \"../routing/partitionKeyRangeCache.js\";\nimport type { Container } from \"./Container/index.js\";\n\nexport async function readPartitionKeyDefinition(\n  diagnosticNode: DiagnosticNodeInternal,\n  container: Container,\n): Promise<PartitionKeyDefinition> {\n  const partitionKeyDefinition = await container.readPartitionKeyDefinition(diagnosticNode);\n  return partitionKeyDefinition.resource;\n}\n\nexport async function computePartitionKeyRangeId(\n  diagnosticNode: DiagnosticNodeInternal,\n  partitionKey: PartitionKeyInternal,\n  partitionKeyRangeCache: PartitionKeyRangeCache,\n  isPartitionLevelFailOverEnabled: boolean,\n  container: Container,\n  pKDefinition?: PartitionKeyDefinition,\n): Promise<string | undefined> {\n  let partitionKeyRangeId: string | undefined = undefined;\n  if (isPartitionLevelFailOverEnabled) {\n    const partitionKeyDefinition =\n      pKDefinition ?? (await readPartitionKeyDefinition(diagnosticNode, container));\n    if (partitionKeyDefinition && partitionKey && partitionKey.length > 0) {\n      partitionKeyRangeId = await partitionKeyRangeCache.getPartitionKeyRangeIdFromPartitionKey(\n        container.url,\n        partitionKey,\n        partitionKeyDefinition,\n        diagnosticNode,\n      );\n    }\n  }\n  return partitionKeyRangeId;\n}\n"]}