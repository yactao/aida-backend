{"version":3,"file":"platform.js","sourceRoot":"","sources":["../../../src/common/platform.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAQlC,oCAeC;AAoBD,gEAgBC;AAxDD,iDAAkE;AAElE;;GAEG;AACH,SAAgB,YAAY,CAC1B,yBAA+C,EAC/C,aAAsB;IAEtB,IAAI,EAAE,GAAG,GAAG,gBAAgB,EAAE,IAAI,wBAAS,CAAC,OAAO,IAAI,wBAAS,CAAC,UAAU,EAAE,CAAC;IAC9E,IAAI,aAAa,EAAE,CAAC;QAClB,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,aAAa,CAAC;IAChC,CAAC;IACD,IAAI,yBAAyB,EAAE,CAAC;QAC9B,EAAE,GAAG,EAAE,GAAG,0BAA0B,CAAC,yBAAyB,CAAC,CAAC;IAClE,CAAC;IACD,IAAI,yBAAyB,IAAI,yBAAyB,CAAC,eAAe,EAAE,CAAC;QAC3E,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,yBAAyB,CAAC,eAAe,CAAC;IAC5D,CAAC;IACD,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,iEAAiE;AACjE,SAAS,gBAAgB;IACvB,IAAI,eAAe,GAAG,4BAA4B,CAAC;IAEnD,IAAI,UAAU,CAAC,SAAS,IAAI,UAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;QAC3D,eAAe,GAAG,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC;IACnD,CAAC;IAED,IAAI,UAAU,CAAC,OAAO,IAAI,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACrD,eAAe,GAAG,WAAW,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC,IAAI,GAAG,CAAC;IACjG,CAAC;IAED,OAAO,eAAe,CAAC;AACzB,CAAC;AAED;;GAEG;AACH,SAAgB,0BAA0B,CAAC,yBAA8C;IACvF,IAAI,WAAW,GAAG,CAAC,CAAC;IAEpB,IAAI,yBAAyB,CAAC,gBAAgB,EAAE,CAAC;QAC/C,IAAI,yBAAyB,CAAC,gBAAgB,CAAC,4BAA4B,EAAE,CAAC;YAC5E,WAAW,IAAI,oCAAqB,CAAC,6BAA6B,CAAC;QACrE,CAAC;QACD,IACE,yBAAyB,CAAC,gBAAgB,CAAC,4BAA4B;YACvE,yBAAyB,CAAC,gBAAgB,CAAC,kCAAkC,EAC7E,CAAC;YACD,WAAW,IAAI,oCAAqB,CAAC,0BAA0B,CAAC;QAClE,CAAC;IACH,CAAC;IAED,OAAO,WAAW,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC;AAChF,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { CosmosClientOptions } from \"../index.js\";\nimport { Constants, UserAgentFeatureFlags } from \"./constants.js\";\n\n/**\n * @hidden\n */\nexport function getUserAgent(\n  optionsOrConnectionString?: CosmosClientOptions,\n  hostFramework?: string,\n): string {\n  let ua = `${userAgentDetails()} ${Constants.SDKName}/${Constants.SDKVersion}`;\n  if (hostFramework) {\n    ua = ua + \" \" + hostFramework;\n  }\n  if (optionsOrConnectionString) {\n    ua = ua + addFeatureFlagsToUserAgent(optionsOrConnectionString);\n  }\n  if (optionsOrConnectionString && optionsOrConnectionString.userAgentSuffix) {\n    ua = ua + \" \" + optionsOrConnectionString.userAgentSuffix;\n  }\n  return ua;\n}\n\n// TODO: Standardize across other platforms from @azure/core-util\nfunction userAgentDetails(): string {\n  let userAgentDetail = \"<environment undetectable>\";\n\n  if (globalThis.navigator && globalThis.navigator.userAgent) {\n    userAgentDetail = globalThis.navigator.userAgent;\n  }\n\n  if (globalThis.process && globalThis.process.version) {\n    userAgentDetail = `Node.js/${process.version.slice(1)} (${process.platform}; ${process.arch})`;\n  }\n\n  return userAgentDetail;\n}\n\n/**\n * @hidden\n */\nexport function addFeatureFlagsToUserAgent(optionsOrConnectionString: CosmosClientOptions): string {\n  let featureFlag = 0;\n\n  if (optionsOrConnectionString.connectionPolicy) {\n    if (optionsOrConnectionString.connectionPolicy.enablePartitionLevelFailover) {\n      featureFlag += UserAgentFeatureFlags.PerPartitionAutomaticFailover;\n    }\n    if (\n      optionsOrConnectionString.connectionPolicy.enablePartitionLevelFailover ||\n      optionsOrConnectionString.connectionPolicy.enablePartitionLevelCircuitBreaker\n    ) {\n      featureFlag += UserAgentFeatureFlags.PerPartitionCircuitBreaker;\n    }\n  }\n\n  return featureFlag === 0 ? \"\" : ` F${featureFlag.toString(16).toUpperCase()}`;\n}\n"]}