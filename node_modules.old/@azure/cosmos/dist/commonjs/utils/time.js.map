{"version":3,"file":"time.js","sourceRoot":"","sources":["../../../src/utils/time.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAQlC,0DAEC;AASD,kDAcC;AA/BD;;;;GAIG;AAEH,SAAgB,uBAAuB;IACrC,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC;AACpB,CAAC;AAED;;;;;;GAMG;AACH,SAAgB,mBAAmB,CACjC,MAA2B,EAC3B,UAAkB;IAElB,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE;QAC7B,CAAC,KAAK,IAAI,EAAE;YACV,MAAM,MAAM,EAAE,CAAC;QACjB,CAAC,CAAC,EAAE,CAAC;IACP,CAAC,EAAE,UAAU,CAAC,CAAC;IACf,uFAAuF;IACvF,IAAI,KAAK,CAAC,KAAK,IAAI,OAAO,KAAK,CAAC,KAAK,KAAK,UAAU,EAAE,CAAC;QACrD,KAAK,CAAC,KAAK,EAAE,CAAC;IAChB,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * @hidden\n * Utility function to get currentTime in UTC milliseconds.\n * @returns\n */\n\nexport function getCurrentTimestampInMs(): number {\n  return Date.now();\n}\n\n/**\n * @hidden\n * Utility function to start a background task that runs at specified intervals.\n * @param action - A function that returns a Promise, representing the task to be executed.\n * @param intervalMs - The interval in milliseconds at which the task should run.\n * @returns A NodeJS.Timeout object representing the timer for the background task.\n */\nexport function startBackgroundTask(\n  action: () => Promise<void>,\n  intervalMs: number,\n): NodeJS.Timeout {\n  const timer = setInterval(() => {\n    (async () => {\n      await action();\n    })();\n  }, intervalMs);\n  // Unref the timer if available to prevent it from keeping the Node.js event loop alive\n  if (timer.unref && typeof timer.unref === \"function\") {\n    timer.unref();\n  }\n  return timer;\n}\n"]}